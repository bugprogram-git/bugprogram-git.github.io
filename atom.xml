<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog</title>
  
  <subtitle>blog</subtitle>
  <link href="https://bugprogram-git.github.io/atom.xml" rel="self"/>
  
  <link href="https://bugprogram-git.github.io/"/>
  <updated>2024-04-21T15:31:26.417Z</updated>
  <id>https://bugprogram-git.github.io/</id>
  
  <author>
    <name>404NotFound</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://bugprogram-git.github.io/2024/04/21/go%20learing/"/>
    <id>https://bugprogram-git.github.io/2024/04/21/go%20learing/</id>
    <published>2024-04-21T15:31:26.417Z</published>
    <updated>2024-04-21T15:31:26.417Z</updated>
    
    <content type="html"><![CDATA[<p>函数接口<br>bufio.NewReader将会返回一个执行Reader对象的指针<br>从键盘输入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> newreader *bufio.Reader = bufio.NewReader(os.Stdin)</span><br><span class="line">input,err := newreader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(err==<span class="literal">nil</span>)&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;you input string is %s&quot;</span>,input)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件io</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">inputfile,inputerr := os.Open(<span class="string">&quot;file.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(input != <span class="literal">nil</span>)&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file error!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> inputfile.Close()</span><br><span class="line">newfilereader := bufio.NewReader(inputfile)</span><br><span class="line">inputstring,inputerr := newfilereader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span>(inputerr != <span class="literal">nil</span>)&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;read file error!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;input string is :%s&quot;</span>,inputstring)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go 包管理<br>Go 1.5 引入了vendor 机制，但是需要手动设置环境变量 GO15VENDOREXPERIMENT&#x3D; 1，Go编译器才能启用。</p><p>从Go1.6起，默认开启 vendor 目录查找，vendor 机制就是在包中引入 vendor 目录，将依赖的外部包复制到 vendor 目录下，编译器在查找外部依赖包时，优先在 vendor 目录下查找。整个查找第三方包的流程如下：</p><p>在当前vendor目录（如果当前目录存在vendor目录的话）查找依赖包；<br>如果当前目录不存在vendor目录，则到上一级目录继续查找；<br>重复步骤2，直到到达$GOPATH&#x2F;src目录，查找vendor目录中是否存在依赖包；<br>如何没有查找到依赖包，则继续在$GOROOT目录查找；<br>如果没有查找到，则继续在$GOPATH&#x2F;src目录查找。<br>在发布 1.6 版本时，该环境变量的值已经默认设置为 1 了，该值可以使用 go env 命令查看。在发布 1.7 版本时，已去掉该环境变量，默认开启 vendor 特性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;函数接口&lt;br&gt;bufio.NewReader将会返回一个执行Reader对象的指针&lt;br&gt;从键盘输入&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bugprogram-git.github.io/2024/04/21/l2tp/"/>
    <id>https://bugprogram-git.github.io/2024/04/21/l2tp/</id>
    <published>2024-04-21T15:31:26.415Z</published>
    <updated>2024-04-21T15:31:26.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-预操作"><a href="#1-预操作" class="headerlink" title="1.预操作"></a>1.预操作</h3><h5 id="1-安装组件"><a href="#1-安装组件" class="headerlink" title="1.安装组件"></a>1.安装组件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install strongswan xl2tpd ppp lsof</span><br></pre></td></tr></table></figure><h5 id="2-加载需要的内核模块"><a href="#2-加载需要的内核模块" class="headerlink" title="2.加载需要的内核模块"></a>2.加载需要的内核模块</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modprobe l2tp_ppp</span><br><span class="line">modprobe udp_tunnel</span><br><span class="line">modprobe l2tp_netlink</span><br><span class="line">modprobe l2tp_core</span><br></pre></td></tr></table></figure><h3 id="3-配置xl2tpd"><a href="#3-配置xl2tpd" class="headerlink" title="3.配置xl2tpd"></a>3.配置xl2tpd</h3><p>修改配置文件 &#x2F;etc&#x2F;xl2tpd&#x2F;xl2tpd.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[lac myvpn] <span class="comment">#myvpn为vpn名称</span></span><br><span class="line">lns = 121.248.154.251 <span class="comment">#vpn服务器的地址</span></span><br><span class="line">ppp debug = no <span class="comment">#关闭调试信息</span></span><br><span class="line">pppoptfile = /etc/ppp/options.l2tpd.client <span class="comment">#验证文件的路径</span></span><br><span class="line">refuse chap = <span class="built_in">yes</span></span><br><span class="line">require pap = <span class="built_in">yes</span></span><br><span class="line">length bit = <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>修改验证文件&#x2F;etc&#x2F;ppp&#x2F;options.l2tpd.client</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ipcp-accept-local</span><br><span class="line">ipcp-accept-remote</span><br><span class="line">refuse-eap</span><br><span class="line">require-chap</span><br><span class="line">require-mschap-v2</span><br><span class="line">noccp</span><br><span class="line">noauth</span><br><span class="line">logfile /var/log/xl2tpd.<span class="built_in">log</span></span><br><span class="line">idle 72000</span><br><span class="line">mtu 1410</span><br><span class="line">mru 1410</span><br><span class="line">defaultroute</span><br><span class="line">usepeerdns</span><br><span class="line">debug</span><br><span class="line">connect-delay 5000</span><br><span class="line">name <span class="string">&quot;2111605319&quot;</span> <span class="comment">#vpn账号</span></span><br><span class="line">password <span class="string">&quot;yh20021007&quot;</span> <span class="comment">#vpn密码</span></span><br></pre></td></tr></table></figure><h3 id="4-配置预共享密钥"><a href="#4-配置预共享密钥" class="headerlink" title="4.配置预共享密钥"></a>4.配置预共享密钥</h3><p>vim &#x2F;etc&#x2F;ipsec.secrets<br>添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: PSK <span class="string">&quot;njfu.edu&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-配置ipsec"><a href="#5-配置ipsec" class="headerlink" title="5.配置ipsec"></a>5.配置ipsec</h3><p>vim &#x2F;etc&#x2F;ipsec.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">config setup</span><br><span class="line"></span><br><span class="line">conn %default</span><br><span class="line">    ikelifetime=60m</span><br><span class="line">    keylife=20m</span><br><span class="line">    rekeymargin=3m</span><br><span class="line">    keyingtries=1</span><br><span class="line">    keyexchange=ikev1</span><br><span class="line">    authby=secret</span><br><span class="line">    ike=aes128-sha1-modp1024,3des-sha1-modp1024!</span><br><span class="line">    esp=aes128-sha1-modp1024,3des-sha1-modp1024!</span><br><span class="line"></span><br><span class="line">conn myvpn</span><br><span class="line">    keyexchange=ikev1</span><br><span class="line">    left=%defaultroute</span><br><span class="line">    auto=add</span><br><span class="line">    authby=secret</span><br><span class="line">    rekey=<span class="built_in">yes</span></span><br><span class="line">    ikelifetime=8h</span><br><span class="line">    keylife=1h</span><br><span class="line">    <span class="built_in">type</span>=transport</span><br><span class="line">    leftprotoport=17/1701</span><br><span class="line">    rightprotoport=17/1701</span><br><span class="line">    left=172.19.123.72</span><br><span class="line">    right=121.248.154.251</span><br></pre></td></tr></table></figure><h3 id="6-启动vpn并激活连接到vpn"><a href="#6-启动vpn并激活连接到vpn" class="headerlink" title="6.启动vpn并激活连接到vpn"></a>6.启动vpn并激活连接到vpn</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ipsec restart</span><br><span class="line">service xl2tpd restart</span><br><span class="line"><span class="comment">#连接接到指定的vpn</span></span><br><span class="line">ipsec up myvpn</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> /var/run/xl2tpd -p</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;c myvpn&quot;</span> &gt; /var/run/xl2tpd/l2tp-control <span class="comment">#这里的myvpn要和前面匹配</span></span><br></pre></td></tr></table></figure><h3 id="7-确认连接成功"><a href="#7-确认连接成功" class="headerlink" title="7.确认连接成功"></a>7.确认连接成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#执行指令</span></span><br><span class="line">ipsec status</span><br></pre></td></tr></table></figure><p>如果显示<br>Security Associations (1 up, 0 connecting):<br>       myvpn[1]: ESTABLISHED 17 minutes ago, 172.19.123.72[172.19.123.72]…121.248.154.251[121.248.154.251]<br>       myvpn{1}:  INSTALLED, TRANSPORT, reqid 1, ESP in UDP SPIs: c7ed658e_i 8cd83099_o<br>       myvpn{1}:   172.19.123.72&#x2F;32[udp&#x2F;l2f] &#x3D;&#x3D;&#x3D; 121.248.154.251&#x2F;32[udp&#x2F;l2f]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#执行指令 如果发现有个ppp的网卡，即连接成功</span></span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-预操作&quot;&gt;&lt;a href=&quot;#1-预操作&quot; class=&quot;headerlink&quot; title=&quot;1.预操作&quot;&gt;&lt;/a&gt;1.预操作&lt;/h3&gt;&lt;h5 id=&quot;1-安装组件&quot;&gt;&lt;a href=&quot;#1-安装组件&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bugprogram-git.github.io/2024/04/21/centos%E8%A7%A3%E5%8E%8Binitrd/"/>
    <id>https://bugprogram-git.github.io/2024/04/21/centos%E8%A7%A3%E5%8E%8Binitrd/</id>
    <published>2024-04-21T15:31:26.413Z</published>
    <updated>2024-04-21T15:31:26.413Z</updated>
    
    <content type="html"><![CDATA[<p>修复boot分区</p><ul><li>1.centos默认的grub安装命令为grub2-install不是grub-install</li><li>2.hexdump命令所在的软件包为linux-utils<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y linux-utils</span><br></pre></td></tr></table></figure>解压initrd.img<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xz -dc initrd.img | cpio -<span class="built_in">id</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;修复boot分区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.centos默认的grub安装命令为grub2-install不是grub-install&lt;/li&gt;
&lt;li&gt;2.hexdump命令所在的软件包为linux-utils&lt;figure class=&quot;highlight bash</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bugprogram-git.github.io/2024/04/21/socks5%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA/"/>
    <id>https://bugprogram-git.github.io/2024/04/21/socks5%E4%BB%A3%E7%90%86%E6%90%AD%E5%BB%BA/</id>
    <published>2024-04-21T15:31:26.409Z</published>
    <updated>2024-04-21T15:31:26.410Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL https://my.oofeye.com/work/Socks5/ss5.sh)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>嵌入式linux</title>
    <link href="https://bugprogram-git.github.io/2023/06/25/%E5%B5%8C%E5%85%A5%E5%BC%8Flinux/"/>
    <id>https://bugprogram-git.github.io/2023/06/25/%E5%B5%8C%E5%85%A5%E5%BC%8Flinux/</id>
    <published>2023-06-25T13:47:28.000Z</published>
    <updated>2024-04-21T15:31:26.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-启动步骤"><a href="#1-启动步骤" class="headerlink" title="1.启动步骤"></a>1.启动步骤</h3><p>1.加载bootloader（uboot)<br>2.加载设备树<br>3.加载linux内核，initrd.img ,挂载跟文件系统<br>4.tty，登录系统</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-启动步骤&quot;&gt;&lt;a href=&quot;#1-启动步骤&quot; class=&quot;headerlink&quot; title=&quot;1.启动步骤&quot;&gt;&lt;/a&gt;1.启动步骤&lt;/h3&gt;&lt;p&gt;1.加载bootloader（uboot)&lt;br&gt;2.加载设备树&lt;br&gt;3.加载linux内核，initrd</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>centos7.9解决RTL8125网卡不识别的问题</title>
    <link href="https://bugprogram-git.github.io/2023/05/15/centos7-9%E8%A7%A3%E5%86%B3RTL8125%E7%BD%91%E5%8D%A1%E4%B8%8D%E8%AF%86%E5%88%AB%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://bugprogram-git.github.io/2023/05/15/centos7-9%E8%A7%A3%E5%86%B3RTL8125%E7%BD%91%E5%8D%A1%E4%B8%8D%E8%AF%86%E5%88%AB%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2023-05-15T10:02:20.000Z</published>
    <updated>2024-04-21T15:31:26.411Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-获取网卡驱动源码"><a href="#1-获取网卡驱动源码" class="headerlink" title="1.获取网卡驱动源码"></a>1.获取网卡驱动源码</h3><p><a href="https://www.realtek.com/zh/component/zoo/category/network-interface-controllers-10-100-1000m-gigabit-ethernet-pci-express-software">点击跳转到realtek官网下载页面</a></p><h3 id="2-升级内核-可选"><a href="#2-升级内核-可选" class="headerlink" title="2.升级内核(可选)"></a>2.升级内核(可选)</h3><p>不确定这个网卡依赖还是不依赖内核，建议升级内核版本</p><h5 id="2-1-检查是否安装ELRepo"><a href="#2-1-检查是否安装ELRepo" class="headerlink" title="2.1 检查是否安装ELRepo"></a>2.1 检查是否安装ELRepo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum  --disablerepo=<span class="string">&quot;*&quot;</span>  --enablerepo=<span class="string">&quot;elrepo-kernel&quot;</span>  list  available</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Error getting repository data <span class="keyword">for</span> elrepo-kernel, repository not found</span><br><span class="line"><span class="comment"># 看到error说明没有安装ELRepo</span></span><br></pre></td></tr></table></figure><h5 id="2-2-升级安装ELRepo"><a href="#2-2-升级安装ELRepo" class="headerlink" title="2.2 升级安装ELRepo"></a>2.2 升级安装ELRepo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br><span class="line"><span class="comment">#载入ELRepo仓库的公共密钥</span></span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line"></span><br><span class="line">yum -y update</span><br><span class="line"><span class="comment">#载入ELRepo仓库的公共密钥</span></span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-3-查看可用安装包"><a href="#2-3-查看可用安装包" class="headerlink" title="2.3.查看可用安装包"></a>2.3.查看可用安装包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看可用的系统内核包</span></span><br><span class="line">yum  --disablerepo=<span class="string">&quot;*&quot;</span>  --enablerepo=<span class="string">&quot;elrepo-kernel&quot;</span>  list  available</span><br><span class="line"></span><br><span class="line"><span class="comment"># 长期维护版本为lt，最新主线稳定版为ml</span></span><br></pre></td></tr></table></figure><h5 id="2-4-手动下载"><a href="#2-4-手动下载" class="headerlink" title="2.4 手动下载"></a>2.4 手动下载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget http://linux-mirrors.fnal.gov/linux/elrepo/archive/kernel/el7/x86_64/RPMS/kernel-lt-headers-5.4.242-1.el7.elrepo.x86_64.rpm</span><br><span class="line">wget http://linux-mirrors.fnal.gov/linux/elrepo/archive/kernel/el7/x86_64/RPMS/kernel-lt-tools-libs-5.4.242-1.el7.elrepo.x86_64.rpm</span><br><span class="line">wget http://linux-mirrors.fnal.gov/linux/elrepo/archive/kernel/el7/x86_64/RPMS/kernel-lt-devel-5.4.242-1.el7.elrepo.x86_64.rpm</span><br><span class="line">wget http://linux-mirrors.fnal.gov/linux/elrepo/archive/kernel/el7/x86_64/RPMS/kernel-lt-tools-5.4.242-1.el7.elrepo.x86_64.rpm</span><br><span class="line">wget http://linux-mirrors.fnal.gov/linux/elrepo/archive/kernel/el7/x86_64/RPMS/kernel-lt-tools-5.4.242-1.el7.elrepo.x86_64.rpm</span><br><span class="line"><span class="comment">#安装完成之后重新生成grub配置文件</span></span><br><span class="line"><span class="comment">#同样也可以删除掉旧的内核</span></span><br><span class="line">rpm -qa | grep kernel</span><br><span class="line"><span class="comment">#然后移除相关的旧的内核包</span></span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure><h5 id="2-5-查看内核启动顺序"><a href="#2-5-查看内核启动顺序" class="headerlink" title="2.5 查看内核启动顺序"></a>2.5 查看内核启动顺序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk -F\&#x27; <span class="string">&#x27;$1==&quot;menuentry &quot; &#123;print i++ &quot; : &quot; $2&#125;&#x27;</span> /boot/grub2/grub.cfg</span><br><span class="line"></span><br><span class="line">0 : CentOS Linux (5.4.108-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">1 : CentOS Linux (3.10.0-1160.11.1.el7.x86_64) 7 (Core)</span><br><span class="line">2 : CentOS Linux (3.10.0-1160.el7.x86_64) 7 (Core)</span><br><span class="line">3 : CentOS Linux (0-rescue-20210128140208453518997635111697) 7 (Core)</span><br></pre></td></tr></table></figure><h5 id="2-6-安装辅助工具"><a href="#2-6-安装辅助工具" class="headerlink" title="2.6 安装辅助工具"></a>2.6 安装辅助工具</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y grub2-pc</span><br></pre></td></tr></table></figure><h5 id="2-7-设置内核启动顺序"><a href="#2-7-设置内核启动顺序" class="headerlink" title="2.7 设置内核启动顺序"></a>2.7 设置内核启动顺序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub2-set-default 0</span><br></pre></td></tr></table></figure><h5 id="2-8-重新生成grub配置文件"><a href="#2-8-重新生成grub配置文件" class="headerlink" title="2.8 重新生成grub配置文件"></a>2.8 重新生成grub配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure><h5 id="2-9-重启"><a href="#2-9-重启" class="headerlink" title="2.9 重启"></a>2.9 重启</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h3 id="3-更换gcc"><a href="#3-更换gcc" class="headerlink" title="3.更换gcc"></a>3.更换gcc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.ustc.edu.cn/centos/7.9.2009/sclo/x86_64/rh/Packages/d/devtoolset-8-binutils-2.30-55.el7.1.x86_64.rpm</span><br><span class="line">wget https://mirrors.ustc.edu.cn/centos/7.9.2009/sclo/x86_64/rh/Packages/d/devtoolset-8-gcc-8.3.1-3.2.el7.x86_64.rpm</span><br><span class="line">wget https://mirrors.ustc.edu.cn/centos/7.9.2009/sclo/x86_64/rh/Packages/d/devtoolset-8-gcc-c%2B%2B-8.3.1-3.2.el7.x86_64.rpm</span><br><span class="line">wget https://mirrors.ustc.edu.cn/centos/7.9.2009/sclo/x86_64/rh/Packages/d/devtoolset-8-gcc-gdb-plugin-8.3.1-3.2.el7.x86_64.rpm</span><br><span class="line">wget https://mirrors.ustc.edu.cn/centos/7.9.2009/sclo/x86_64/rh/Packages/d/devtoolset-8-gcc-gfortran-8.3.1-3.2.el7.x86_64.rpm</span><br><span class="line">wget https://mirrors.ustc.edu.cn/centos/7.9.2009/sclo/x86_64/rh/Packages/d/devtoolset-8-gcc-plugin-devel-8.3.1-3.2.el7.x86_64.rpm</span><br><span class="line">wget https://mirrors.ustc.edu.cn/centos/7.9.2009/sclo/x86_64/rh/Packages/d/devtoolset-8-libquadmath-devel-8.3.1-3.2.el7.x86_64.rpm</span><br><span class="line">wget https://mirrors.ustc.edu.cn/centos/7.9.2009/sclo/x86_64/rh/Packages/d/devtoolset-8-libstdc%2B%2B-devel-8.3.1-3.2.el7.x86_64.rpm</span><br><span class="line">wget https://mirrors.ustc.edu.cn/centos/7.9.2009/sclo/x86_64/rh/Packages/d/devtoolset-8-runtime-8.1-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>将所有下载好的软件包安装完毕<br>激活toolchain</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/rh/devtoolset-8 </span><br><span class="line">./enable</span><br><span class="line"><span class="comment">#直接替换旧的gcc</span></span><br><span class="line"><span class="comment">#旧的gcc是运行的 /usr/bin/gcc，所以将该目录下的gcc/g++替换为刚安装的新版本gcc软连接，免得每次enable</span></span><br><span class="line"><span class="built_in">mv</span> /usr/bin/gcc /usr/bin/gcc-4.8.5 </span><br><span class="line"><span class="built_in">ln</span> -s /opt/rh/devtoolset-8/root/bin/gcc /usr/bin/gcc </span><br><span class="line"><span class="built_in">mv</span> /usr/bin/g++ /usr/bin/g++-4.8.5 </span><br><span class="line"><span class="built_in">ln</span> -s /opt/rh/devtoolset-8/root/bin/g++ /usr/bin/g++ </span><br><span class="line">查看gcc版本是否已经升级成功</span><br><span class="line">gcc --version </span><br><span class="line">g++ --version</span><br></pre></td></tr></table></figure><h3 id="4-开始编译第一步下载驱动源码，并安装"><a href="#4-开始编译第一步下载驱动源码，并安装" class="headerlink" title="4.开始编译第一步下载驱动源码，并安装"></a>4.开始编译第一步下载驱动源码，并安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> r8125-9.011.01 </span><br><span class="line">./autorun.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-获取网卡驱动源码&quot;&gt;&lt;a href=&quot;#1-获取网卡驱动源码&quot; class=&quot;headerlink&quot; title=&quot;1.获取网卡驱动源码&quot;&gt;&lt;/a&gt;1.获取网卡驱动源码&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.realtek.com/zh/co</summary>
      
    
    
    
    
    <category term="软件配置" scheme="https://bugprogram-git.github.io/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>centos7磁盘扩容</title>
    <link href="https://bugprogram-git.github.io/2023/05/15/centos7%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
    <id>https://bugprogram-git.github.io/2023/05/15/centos7%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</id>
    <published>2023-05-14T17:34:31.000Z</published>
    <updated>2024-04-21T15:31:26.398Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql安装配置</title>
    <link href="https://bugprogram-git.github.io/2023/05/11/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://bugprogram-git.github.io/2023/05/11/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2023-05-11T04:03:09.000Z</published>
    <updated>2024-04-21T15:31:26.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql安装配置"><a href="#mysql安装配置" class="headerlink" title="mysql安装配置"></a>mysql安装配置</h1><h2 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1.安装配置"></a>1.安装配置</h2><h3 id="1-Archlinux"><a href="#1-Archlinux" class="headerlink" title="1.Archlinux"></a>1.Archlinux</h3><h5 id="1-安装mariadb"><a href="#1-安装mariadb" class="headerlink" title="1.安装mariadb"></a>1.安装mariadb</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S mariadb</span><br></pre></td></tr></table></figure><h5 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2.初始化数据库"></a>2.初始化数据库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br></pre></td></tr></table></figure><h5 id="3-启动数据库"><a href="#3-启动数据库" class="headerlink" title="3.启动数据库"></a>3.启动数据库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure><h5 id="4-修改root密码"><a href="#4-修改root密码" class="headerlink" title="4.修改root密码"></a>4.修改root密码</h5><p>首次使用root用户登录不需要密码并且只能在本地登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user<span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果要开启远程登录<br>对于mariadb来说同一个用户在本地登录和在远程登录，密码是互不干扰的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h3 id="2-Centos"><a href="#2-Centos" class="headerlink" title="2.Centos"></a>2.Centos</h3><h4 id="1-1-从官网获取"><a href="#1-1-从官网获取" class="headerlink" title="1.1.从官网获取"></a>1.1.从官网获取</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-community-common-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-community-icu-data-files-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-community-libs-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-community-client-plugins-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-community-client-plugins-8.0.33-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh *.rpm</span><br></pre></td></tr></table></figure><h4 id="1-2-从yum源获取"><a href="#1-2-从yum源获取" class="headerlink" title="1.2 从yum源获取"></a>1.2 从yum源获取</h4><p>2.安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mysql</span><br></pre></td></tr></table></figure><h4 id="2-启动mysql"><a href="#2-启动mysql" class="headerlink" title="2.启动mysql"></a>2.启动mysql</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysqld</span><br><span class="line"><span class="comment">#启动mysql后mysql会自动初始化数据库</span></span><br></pre></td></tr></table></figure><h4 id="3-修改密码"><a href="#3-修改密码" class="headerlink" title="3.修改密码"></a>3.修改密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取密码</span></span><br><span class="line"><span class="built_in">tail</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>mysq8.0开始默认启用了validate_password组件<br>    如果出现密码问题，可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录mysql（这里的密码通过上面步骤获取）</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#mariadb/mysql (适用于相对较新的版本)</span></span><br><span class="line">alter user<span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#mariadb（适用于相对较老的版本）</span></span><br><span class="line">UPDATE mysql.user SET password = PASSWORD(<span class="string">&#x27;root&#x27;</span>) WHERE user = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新</span></span><br><span class="line">flush privileges</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启远程登录</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>如果出现修改密码不符合策略可以卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE <span class="string">&#x27;validate_password%&#x27;</span>; <span class="comment">#查看密码策略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看validate_password plugin的状态</span></span><br><span class="line">SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE <span class="string">&#x27;validate%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装或者卸载组件</span></span><br><span class="line">UNINSTALL COMPONENT <span class="string">&#x27;file://component_validate_password&#x27;</span>;</span><br><span class="line">INSTALL COMPONENT <span class="string">&#x27;file://component_validate_password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql默认会加载validate_password component,但是不会加载validate_password plugin</span></span><br><span class="line">install plugin validate_password soname <span class="string">&#x27;validate_password.so&#x27;</span>;</span><br><span class="line">UNINSTALL PLUGIN  validate_password;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改mysql配置文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="comment">#加入以下两行</span></span><br><span class="line">validate_password.policy=LOW</span><br><span class="line">validate_password.length=0</span><br><span class="line">validate_password.check_user_name=OFF</span><br><span class="line"><span class="comment">#这个用于关闭密码和用户名一样的时候密码不通过。（这些参数依赖与vaildate_password component)</span></span><br><span class="line"></span><br><span class="line">validate_password.number_count + validate_password.special_char_count + (2 * validate_password.mixed_case_count)</span><br></pre></td></tr></table></figure><h2 id="2-mysql配置主从复制"><a href="#2-mysql配置主从复制" class="headerlink" title="2.mysql配置主从复制"></a>2.mysql配置主从复制</h2><h5 id="2-1-mysql主从复制的原理"><a href="#2-1-mysql主从复制的原理" class="headerlink" title="2.1 mysql主从复制的原理"></a>2.1 mysql主从复制的原理</h5><ul><li>1.mysql主库将数据的更改记录记录到二进制日志(binary log)中</li><li>2.mysql从库将主库的更改记录的二进制日志同步到本地的中继日志(relay log)</li><li>3.mysql从库读取中继日志,根据日志中的操作步骤,同步数据</li></ul><h5 id="2-2-配置主库"><a href="#2-2-配置主库" class="headerlink" title="2.2 配置主库"></a>2.2 配置主库</h5><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br><span class="line">log-bin=localhost-binlog<span class="comment">#日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#需要同步的表，不配置默认同步所有数据库</span></span><br><span class="line">binlog-do-db=db_a</span><br><span class="line">binlog-do-db=db_b</span><br><span class="line">binlog-do-db=db_c</span><br></pre></td></tr></table></figure><p>创建从复制的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建slave用户</span></span><br><span class="line">create user slave@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;slave&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="2-3-配置从库"><a href="#2-3-配置从库" class="headerlink" title="2.3 配置从库"></a>2.3 配置从库</h5><p>修改serverid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line"><span class="comment">#这个server-id要和主库不一样</span></span><br></pre></td></tr></table></figure><p>修改要复制的数据库的地址以及验证信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">change master to </span><br><span class="line">master_host=<span class="string">&#x27;172.17.0.4&#x27;</span>,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_user=<span class="string">&#x27;slave&#x27;</span>,</span><br><span class="line">master_password=<span class="string">&#x27;slave&#x27;</span>,</span><br><span class="line">master_log_file=<span class="string">&#x27;logbin.000002&#x27;</span>,</span><br><span class="line">master_log_pos=1825;<span class="comment">#这个参数可以由主库show master status得到</span></span><br></pre></td></tr></table></figure><p>开始复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql安装配置&quot;&gt;&lt;a href=&quot;#mysql安装配置&quot; class=&quot;headerlink&quot; title=&quot;mysql安装配置&quot;&gt;&lt;/a&gt;mysql安装配置&lt;/h1&gt;&lt;h2 id=&quot;1-安装配置&quot;&gt;&lt;a href=&quot;#1-安装配置&quot; class=&quot;head</summary>
      
    
    
    
    <category term="linux运维" scheme="https://bugprogram-git.github.io/categories/linux%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="软件配置" scheme="https://bugprogram-git.github.io/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>keystone框架分析</title>
    <link href="https://bugprogram-git.github.io/2023/05/04/keystone%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/"/>
    <id>https://bugprogram-git.github.io/2023/05/04/keystone%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/</id>
    <published>2023-05-04T04:08:06.000Z</published>
    <updated>2024-04-21T15:31:26.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-RISC-V的PMP权限"><a href="#1-RISC-V的PMP权限" class="headerlink" title="1.RISC-V的PMP权限"></a>1.RISC-V的PMP权限</h3><p>RISC-V PMP（Physical Memory Protection）是一种硬件保护机制，用于保护处理器的物理内存免受非授权访问。它可以为每个特权级别和每个地址范围设置访问权限，从而提供更细粒度的内存保护。  </p><h4 id="1-1-PMP机制"><a href="#1-1-PMP机制" class="headerlink" title="1.1 PMP机制"></a>1.1 PMP机制</h4><ol><li><p>地址匹配模式<br>PMP支持两种地址匹配模式：地址范围和地址匹配。地址范围模式允许设置一段地址范围的访问权限，而地址匹配模式则允许设置具体地址的访问权限。  </p></li><li><p>访问权限<br>PMP支持4种访问权限：读、写、执行和访问控制。访问控制权限用于控制对PMP寄存器的访问，只有特权级别为M级别的代码才能访问PMP寄存器。  </p></li><li><p>特权级别<br>PMP可以为每个特权级别设置不同的访问权限。RISC-V支持3个特权级别：M级别（最高特权级别）、S级别（次高特权级别）和U级别（用户特权级别）。  </p></li><li><p>PMP寄存器<br>PMP机制通过PMP寄存器来实现。RISC-V架构中有16个PMP寄存器，每个寄存器可以设置一段地址范围的访问权限。PMP寄存器包括以下字段：</p></li></ol><ul><li>PMPADDR：地址范围的起始地址。  </li><li>PMPADDRLEN：地址范围的长度。  </li><li>PMPCFG：访问权限和地址匹配模式。</li></ul><ol start="5"><li>PMP配置<br>PMP配置指的是将PMP寄存器中的配置信息加载到处理器中。在RISC-V中，PMP配置可以通过以下方式实现：</li></ol><ul><li>1.在处理器启动时，将PMP寄存器中的配置信息加载到处理器中。  </li><li>2.在程序运行时，通过特定的指令将PMP寄存器中的配置信息加载到处理器中。</li></ul><h4 id="1-2-PMP-权限控制"><a href="#1-2-PMP-权限控制" class="headerlink" title="1.2 PMP 权限控制"></a>1.2 PMP 权限控制</h4><p>PMP 权限控制分为以下几个权限</p><ul><li>1.S-mode (Supervisor特权权限)<br> 次最高用户权限，权限仅次于machine，系统的驱动，以及内核都运行再这一用户权限</li><li>2.U-mode(User用户权限)<br>  最低的用户权限，用户的应用程序一般都运行再这一层</li><li>3.M-mode(Machine,系统权限)</li><li>最高的用户权限，bootloader，firmware等都运行在这一用户权限<br>其中，M（machine mode）可以访问全部的地址。为了禁止不可信的代码执行特权指令，引入了U（User mode）。为了限制不可信的代码使其只能访问自己的那部分内存，处理器可以提供一个物理内存保护（PMP，Physical Memory Protection）功能，以提供在各种模式下的内存保护。</li></ul><p>总之，PMP机制是一种硬件保护机制，用于保护处理器的物理内存免受非授权访问。它可以为每个特权级别和每个地址范围设置访问权限，从而提供更细粒度的内存保护。</p><h4 id="1-3-源码分析"><a href="#1-3-源码分析" class="headerlink" title="1.3 源码分析"></a>1.3 源码分析</h4><p><strong>keystone关于PMP的源码分析</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pmp_region</span> //<span class="title">pmp</span>结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint64_t</span> size;</span><br><span class="line"><span class="type">uint8_t</span> addrmode;</span><br><span class="line"><span class="type">uintptr_t</span> addr;</span><br><span class="line"><span class="type">int</span> allow_overlap;</span><br><span class="line"><span class="type">int</span> reg_idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pmp_set_keystone</span><span class="params">(<span class="type">int</span> region_idx,<span class="type">uint8_t</span> perm)</span></span><br><span class="line">&#123;</span><br><span class="line">.....</span><br><span class="line"><span class="type">uint8_t</span> perm_bits = perm &amp; PMP_ALL_PERM;</span><br><span class="line">pmpreg_id reg_idx = region_register_idx(region_idx);</span><br><span class="line"><span class="type">uintptr_t</span> pmpcfg = region_pmpcfg_val(region_idx,reg_idx,perm_bits);<span class="comment">//PMP配置寄存器</span></span><br><span class="line"><span class="type">uintptr_t</span> pmpaddr;</span><br><span class="line">pmpaddr = region_pmpaddr_val(region_idx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看出pmp_set_keystone干了几件事</p><ul><li>1.pmp_set_keystone函数通过传进的perm参数计算实际需要设置的perm参数</li><li>2.根据传入的region_idx对应的 pmp_region对应结构体的信息，计算需要写入PMP条目的PMP配置寄存器和PMP地址寄存器的值。</li></ul><h3 id="2-Keystone运行机制"><a href="#2-Keystone运行机制" class="headerlink" title="2.Keystone运行机制"></a>2.Keystone运行机制</h3><p>一个简单的demo程序一般由两个程序构成</p><ul><li>1.host程序，作为enclave的runtime，其中内存分配以及内存映射都是通过host程序进行系统调用实现</li><li>2.eapp程序，作为实际运行的程序，依靠host程序作为runtime<br>一个简单的demo<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#host.cpp</span></span><br><span class="line"><span class="comment">//******************************************************************************</span></span><br><span class="line"><span class="comment">// Copyright (c) 2018, The Regents of the University of California (Regents).</span></span><br><span class="line"><span class="comment">// All Rights Reserved. See LICENSE for license details.</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;edge/edge_call.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;host/keystone.h&quot;</span></span></span><br><span class="line">using namespace Keystone;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">  Enclave enclave;</span><br><span class="line">  Params params;</span><br><span class="line">  params.setFreeMemSize(<span class="number">1024</span> * <span class="number">1024</span>);<span class="comment">//申请空间</span></span><br><span class="line">  params.setUntrustedMem(DEFAULT_UNTRUSTED_PTR, <span class="number">1024</span> * <span class="number">1024</span>); <span class="comment">//设置eapp的内存地址</span></span><br><span class="line">  enclave.init(argv[<span class="number">1</span>], argv[<span class="number">2</span>], params); <span class="comment">//初始化enclave</span></span><br><span class="line">  enclave.registerOcallDispatch(incoming_call_dispatch);</span><br><span class="line">  edge_call_init_internals(</span><br><span class="line">      (<span class="type">uintptr_t</span>)enclave.getSharedBuffer(), enclave.getSharedBufferSize());</span><br><span class="line">  enclave.run(); <span class="comment">//启动enclave</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello, world!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据官方文档介绍</p><p>一个enclave程序首先有一个连续的物理地址范围，成为EPM(enclave private memory)，不受信任的主机要运行enclave程序首先申请分配EPM,并用PT(page table) 和RT(Runtime table)进行初始化epm，一旦主机调用SM创建一个enclave，SM(security monitory) 就会使用PMP保护EPM，并对EPM进行权限控制，并且PMP都是通过内核进行传递再创建成功之后，SM将会对enclave初始化状态进行验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enclave.run --&gt;keystone_run_enclave --&gt;sbi_sm_run_enclave</span><br></pre></td></tr></table></figure><p>我们首先看run函数执行了什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">KeystoneDevice::__run(<span class="type">bool</span> resume, <span class="type">uintptr_t</span>* ret) &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">keystone_ioctl_run_enclave</span> <span class="title">encl</span>;</span></span><br><span class="line">  encl.eid = eid;</span><br><span class="line">  Error error;</span><br><span class="line">  <span class="type">uint64_t</span> request;</span><br><span class="line">  <span class="keyword">if</span> (resume) &#123;</span><br><span class="line">    error   = Error::IoctlErrorResume;</span><br><span class="line">    request = KEYSTONE_IOC_RESUME_ENCLAVE;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    error   = Error::IoctlErrorRun;</span><br><span class="line">    request = KEYSTONE_IOC_RUN_ENCLAVE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ioctl(fd, request, &amp;encl)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们发现run中调用了ioctl函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">keystone_fops</span> =</span> &#123;</span><br><span class="line">    .owner          = THIS_MODULE,</span><br><span class="line">    .mmap           = keystone_mmap,</span><br><span class="line">    .unlocked_ioctl = keystone_ioctl,</span><br><span class="line">    .release        = keystone_release</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着看ioctl函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">keystone_ioctl</span><span class="params">(<span class="keyword">struct</span> file *filep, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> ret;</span><br><span class="line">  <span class="type">char</span> data[<span class="number">512</span>];</span><br><span class="line">  <span class="type">size_t</span> ioc_size;</span><br><span class="line">  <span class="keyword">if</span> (!arg)</span><br><span class="line">    <span class="keyword">return</span> -EINVAL;</span><br><span class="line">  ioc_size = _IOC_SIZE(cmd);</span><br><span class="line">  ioc_size = ioc_size &gt; <span class="keyword">sizeof</span>(data) ? <span class="keyword">sizeof</span>(data) : ioc_size;</span><br><span class="line">  <span class="keyword">if</span> (copy_from_user(data,(<span class="type">void</span> __user *) arg, ioc_size))</span><br><span class="line">    <span class="keyword">return</span> -EFAULT;</span><br><span class="line">  <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> KEYSTONE_IOC_CREATE_ENCLAVE:</span><br><span class="line">      ret = keystone_create_enclave(filep, (<span class="type">unsigned</span> <span class="type">long</span>) data);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> KEYSTONE_IOC_FINALIZE_ENCLAVE:</span><br><span class="line">      ret = keystone_finalize_enclave((<span class="type">unsigned</span> <span class="type">long</span>) data);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> KEYSTONE_IOC_DESTROY_ENCLAVE:</span><br><span class="line">      ret = keystone_destroy_enclave(filep, (<span class="type">unsigned</span> <span class="type">long</span>) data);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> KEYSTONE_IOC_RUN_ENCLAVE:</span><br><span class="line">      ret = keystone_run_enclave((<span class="type">unsigned</span> <span class="type">long</span>) data);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> KEYSTONE_IOC_RESUME_ENCLAVE:</span><br><span class="line">      ret = keystone_resume_enclave((<span class="type">unsigned</span> <span class="type">long</span>) data);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">/* Note that following commands could have been implemented as a part of ADD_PAGE ioctl.</span></span><br><span class="line"><span class="comment">     * However, there was a weird bug in compiler that generates a wrong control flow</span></span><br><span class="line"><span class="comment">     * that ends up with an illegal instruction if we combine switch-case and if statements.</span></span><br><span class="line"><span class="comment">     * We didn&#x27;t identified the exact problem, so we&#x27;ll have these until we figure out */</span></span><br><span class="line">    <span class="keyword">case</span> KEYSTONE_IOC_UTM_INIT:</span><br><span class="line">      ret = utm_init_ioctl(filep, (<span class="type">unsigned</span> <span class="type">long</span>) data);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> -ENOSYS;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (copy_to_user((<span class="type">void</span> __user*) arg, data, ioc_size))</span><br><span class="line">    <span class="keyword">return</span> -EFAULT;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看enclave_run_enclave函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">keystone_run_enclave</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sbiret</span> <span class="title">ret</span>;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> ueid;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">enclave</span>* <span class="title">enclave</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">keystone_ioctl_run_enclave</span> *<span class="title">arg</span> =</span> (<span class="keyword">struct</span> keystone_ioctl_run_enclave*) data;</span><br><span class="line">  ueid = arg-&gt;eid;</span><br><span class="line">  enclave = get_enclave_by_id(ueid);</span><br><span class="line">  <span class="keyword">if</span> (!enclave) &#123;</span><br><span class="line">    keystone_err(<span class="string">&quot;invalid enclave id\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> -EINVAL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (enclave-&gt;eid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    keystone_err(<span class="string">&quot;real enclave does not exist\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> -EINVAL;</span><br><span class="line">  &#125;</span><br><span class="line">  ret = sbi_sm_run_enclave(enclave-&gt;eid);</span><br><span class="line">  arg-&gt;error = ret.error;</span><br><span class="line">  arg-&gt;value = ret.value;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看一下sbi_sm_run_enclave函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">sbi_sm_run_enclave</span><span class="params">((<span class="keyword">struct</span> sbi_trap_regs *)regs,<span class="type">unsigned</span> <span class="type">long</span> eid)</span></span><br><span class="line">&#123;</span><br><span class="line">regs-&gt;a0 = run_enclave(regs,(<span class="type">unsigned</span> <span class="type">int</span>)eid);</span><br><span class="line">regs-&gt;mepc += <span class="number">4</span>;</span><br><span class="line">sbi_trap_exit(regs);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pmp_set<br>这里我们可以清楚的看到，sbi_sm_run_enclave函数先是调用了run_enclave函数，然后将返回结果存储到a0,然后调用sbi_trap_exit(regs)函数返回，因此我们这里基本可以推测，eapp程序是作为host程序中的一个中断程序。<br>run_enclave中，完成以下操作：<br>1.修改寄存器组的值，对应需要run的那个enclave，并且把当前的寄存器组的值保存起来，（就像函数调用或者中断一样，调用函数或者执行中断函数首先需要保留现场，以便于执行完成之后可以正确的返回）</p><p>2.翻转pmp的权限。<br>每个eapp拥有自己的运行权限，由于host程序最终要运行到eapp，因此这里通过反转pmp权限实现控制eapp的运行权限，可以这么理解，eapp的运行环境是host程序创建的，因此eapp运行之前需要通过host进行初始化。</p><p>3。保存一些信息，用于之后的一些操作，例如检查之类的。比如保存当前的hart（硬件线程）对应的eid，以及是否在enclave中，用于之后的操作。</p><p>4.sbi_trap_exit:<br>这函数调用了opensbi的接口，功能是执行中断，并且重新加载寄存器组regs。<br>因为在之前的函数中修改了寄存器组regs，配套到了eapp，所以执行完这个之后，执行流就到了eapp当中。</p><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/139695407">https://zhuanlan.zhihu.com/p/139695407</a><br><a href="https://www.cnblogs.com/bows7ring/p/14775208.html">https://www.cnblogs.com/bows7ring/p/14775208.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-RISC-V的PMP权限&quot;&gt;&lt;a href=&quot;#1-RISC-V的PMP权限&quot; class=&quot;headerlink&quot; title=&quot;1.RISC-V的PMP权限&quot;&gt;&lt;/a&gt;1.RISC-V的PMP权限&lt;/h3&gt;&lt;p&gt;RISC-V PMP（Physical Me</summary>
      
    
    
    
    
    <category term="软件分析" scheme="https://bugprogram-git.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>keystone</title>
    <link href="https://bugprogram-git.github.io/2023/04/21/keystone/"/>
    <id>https://bugprogram-git.github.io/2023/04/21/keystone/</id>
    <published>2023-04-21T06:35:30.000Z</published>
    <updated>2024-04-21T15:31:26.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keystone"><a href="#keystone" class="headerlink" title="keystone"></a>keystone</h1><h3 id="1-搭建keystone开发环境"><a href="#1-搭建keystone开发环境" class="headerlink" title="1.搭建keystone开发环境"></a>1.搭建keystone开发环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载镜像</span></span><br><span class="line">docker pull keystoneenclaveorg/keystone:master</span><br></pre></td></tr></table></figure><h3 id="2-进入到keystone开发环境"><a href="#2-进入到keystone开发环境" class="headerlink" title="2.进入到keystone开发环境"></a>2.进入到keystone开发环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --entrypoint /bin/bash keystoneenclaveorg/keystone:master</span><br></pre></td></tr></table></figure><h3 id="3-配置好开发工具链"><a href="#3-配置好开发工具链" class="headerlink" title="3.配置好开发工具链"></a>3.配置好开发工具链</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /keystone</span><br><span class="line"><span class="built_in">source</span> source.sh</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment">#编译测试模块</span></span><br><span class="line">make run-tests</span><br></pre></td></tr></table></figure><h3 id="4-编译模块"><a href="#4-编译模块" class="headerlink" title="4. 编译模块"></a>4. 编译模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换到构建目录</span></span><br><span class="line"><span class="built_in">cd</span> /keystone/build</span><br><span class="line"><span class="comment">#构建hello模块</span></span><br><span class="line">make hello-package</span><br><span class="line"><span class="comment">#将生成的可执行文件拷贝到overlay/root目录，这个目录用于后面生成启动镜像</span></span><br><span class="line"><span class="comment">#overlay/root的目录的文件都会编译进镜像，后面上电启动开发版，这些文件都能找到</span></span><br><span class="line"><span class="built_in">cp</span> examples/hello/hello.ke ./overlay/root</span><br><span class="line"><span class="comment">#构建镜像</span></span><br><span class="line">make image</span><br></pre></td></tr></table></figure><h3 id="5-使用qemu运行"><a href="#5-使用qemu运行" class="headerlink" title="5. 使用qemu运行"></a>5. 使用qemu运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./scripts/run-qemu.sh</span><br></pre></td></tr></table></figure><h3 id="6-进入到qemu"><a href="#6-进入到qemu" class="headerlink" title="6. 进入到qemu"></a>6. 进入到qemu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加载keystone内核模块</span></span><br><span class="line">insmod keystone-driver.ko</span><br><span class="line"><span class="comment">#运行可执行文件</span></span><br><span class="line">./hello.ke</span><br></pre></td></tr></table></figure><p>参考:<a href="https://docs.keystone-enclave.org/en/latest/Getting-Started/Tutorials/Build-Enclave-App-Hello-World.html">https://docs.keystone-enclave.org/en/latest/Getting-Started/Tutorials/Build-Enclave-App-Hello-World.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;keystone&quot;&gt;&lt;a href=&quot;#keystone&quot; class=&quot;headerlink&quot; title=&quot;keystone&quot;&gt;&lt;/a&gt;keystone&lt;/h1&gt;&lt;h3 id=&quot;1-搭建keystone开发环境&quot;&gt;&lt;a href=&quot;#1-搭建keystone开</summary>
      
    
    
    
    
    <category term="软件配置" scheme="https://bugprogram-git.github.io/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>cifs文件系统从windows挂载到linux</title>
    <link href="https://bugprogram-git.github.io/2023/03/31/cifs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BB%8Ewindows%E6%8C%82%E8%BD%BD%E5%88%B0linux/"/>
    <id>https://bugprogram-git.github.io/2023/03/31/cifs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BB%8Ewindows%E6%8C%82%E8%BD%BD%E5%88%B0linux/</id>
    <published>2023-03-31T07:39:31.000Z</published>
    <updated>2024-04-21T15:31:26.413Z</updated>
    
    <content type="html"><![CDATA[<p>参考原文链接<a href="https://blog.51cto.com/u_15380887/4596626">https://blog.51cto.com/u_15380887/4596626</a></p><p>bug:<br>出现乱码，首先确认在挂载的时候有没有指定字符集</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考原文链接&lt;a href=&quot;https://blog.51cto.com/u_15380887/4596626&quot;&gt;https://blog.51cto.com/u_15380887/4596626&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;bug:&lt;br&gt;出现乱码，首先确认在挂载的时候有没有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kubernetes集群部署</title>
    <link href="https://bugprogram-git.github.io/2023/03/30/kubernetes%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    <id>https://bugprogram-git.github.io/2023/03/30/kubernetes%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</id>
    <published>2023-03-30T04:54:31.000Z</published>
    <updated>2024-04-21T15:31:26.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubernetes简单入门"><a href="#kubernetes简单入门" class="headerlink" title="kubernetes简单入门"></a>kubernetes简单入门</h1><h2 id="1-kubernetes是什么"><a href="#1-kubernetes是什么" class="headerlink" title="1.kubernetes是什么?"></a>1.kubernetes是什么?</h2><p>Kubernetes 是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。 Kubernetes 拥有一个庞大且快速增长的生态，其服务、支持和工具的使用范围相当广泛。</p><p><strong>Kubernetes</strong> 这个名字源于希腊语，意为“舵手”或“飞行员”。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。 Google 在 2014 年开源了 Kubernetes 项目。 Kubernetes 建立在<a href="https://research.google/pubs/pub43438">Google 大规模运行生产工作负载十几年经验</a>的基础上， 结合了社区中最优秀的想法和实践。</p><h2 id="2-kubernetes组件"><a href="#2-kubernetes组件" class="headerlink" title="2.kubernetes组件"></a>2.kubernetes组件</h2><h3 id="2-1-控制平面组件（Control-Plane-Components"><a href="#2-1-控制平面组件（Control-Plane-Components" class="headerlink" title="2.1.控制平面组件（Control Plane Components)"></a>2.1.控制平面组件（Control Plane Components)</h3><h5 id="2-1-1-kube-apiserver"><a href="#2-1-1-kube-apiserver" class="headerlink" title="2.1.1.kube-apiserver"></a>2.1.1.kube-apiserver</h5><p>API 服务器是 Kubernetes <a href="https://kubernetes.io/zh-cn/docs/reference/glossary/?all=true#term-control-plane">控制平面</a>的组件， 该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。</p><p>Kubernetes API 服务器的主要实现是 <a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-apiserver/">kube-apiserver</a>。 <code>kube-apiserver</code> 设计上考虑了水平扩缩，也就是说，它可通过部署多个实例来进行扩缩。 你可以运行 <code>kube-apiserver</code> 的多个实例，并在这些实例之间平衡流量。</p><h5 id="2-1-2-kube-scheduler"><a href="#2-1-2-kube-scheduler" class="headerlink" title="2.1.2.kube-scheduler"></a>2.1.2.kube-scheduler</h5><p><code>kube-scheduler</code> 是<a href="https://kubernetes.io/zh-cn/docs/reference/glossary/?all=true#term-control-plane">控制平面</a>的组件， 负责监视新创建的、未指定运行<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/nodes/">节点（node）</a>的 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">Pods</a>， 并选择节点来让 Pod 在上面运行。</p><p>调度决策考虑的因素包括单个 Pod 及 Pods 集合的资源需求、软硬件及策略约束、 亲和性及反亲和性规范、数据位置、工作负载间的干扰及最后时限。</p><h5 id="2-1-3-kube-controller-manager"><a href="#2-1-3-kube-controller-manager" class="headerlink" title="2.1.3.kube-controller-manager"></a>2.1.3.kube-controller-manager</h5><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-controller-manager/">kube-controller-manager</a> 是<a href="https://kubernetes.io/zh-cn/docs/reference/glossary/?all=true#term-control-plane">控制平面</a>的组件， 负责运行<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/controller/">控制器</a>进程。</p><p>从逻辑上讲， 每个<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/controller/">控制器</a>都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在同一个进程中运行。</p><p>这些控制器包括：</p><ul><li>节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应</li><li>任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li><li>端点控制器（Endpoints Controller）：填充端点（Endpoints）对象（即加入 Service 与 Pod）</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）：为新的命名空间创建默认帐户和 API 访问令牌</li></ul><h5 id="2-1-4-cloud-controller-manager"><a href="#2-1-4-cloud-controller-manager" class="headerlink" title="2.1.4.cloud-controller-manager"></a>2.1.4.cloud-controller-manager</h5><p><code>cloud-controller-manager</code> 是指嵌入特定云的控制逻辑之 <a href="https://kubernetes.io/zh-cn/docs/reference/glossary/?all=true#term-control-plane">控制平面</a>组件。 <code>cloud-controller-manager</code> 允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。</p><p><code>cloud-controller-manager</code> 仅运行特定于云平台的控制器。 因此如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部署的集群不需要有云控制器管理器。</p><p>与 <code>kube-controller-manager</code> 类似，<code>cloud-controller-manager</code> 将若干逻辑上独立的控制回路组合到同一个可执行文件中， 供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。</p><p>下面的控制器都包含对云平台驱动的依赖：</p><ul><li>节点控制器（Node Controller）：用于在节点终止响应后检查云提供商以确定节点是否已被删除</li><li>路由控制器（Route Controller）：用于在底层云基础架构中设置路由</li><li>服务控制器（Service Controller）：用于创建、更新和删除云提供商负载均衡器</li></ul><h5 id="2-1-5-etcd"><a href="#2-1-5-etcd" class="headerlink" title="2.1.5.etcd"></a>2.1.5.etcd</h5><p><code>etcd</code> 是兼顾一致性与高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</p><p>你的 Kubernetes 集群的 <code>etcd</code> 数据库通常需要有个<a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster">备份</a>计划。</p><p>如果想要更深入的了解 <code>etcd</code>，请参考 <a href="https://etcd.io/docs/">etcd 文档</a>。</p><h3 id="2-2-Node-组件"><a href="#2-2-Node-组件" class="headerlink" title="2.2.Node 组件"></a>2.2.Node 组件</h3><h5 id="2-2-1-kubelet"><a href="#2-2-1-kubelet" class="headerlink" title="2.2.1.kubelet"></a>2.2.1.kubelet</h5><p><code>kubelet</code> 会在集群中每个<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/nodes/">节点（node）</a>上运行。 它保证<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/#why-containers">容器（containers）</a>都运行在 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/">Pod</a> 中。</p><p>kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p><h5 id="2-2-2-kube-proxy"><a href="#2-2-2-kube-proxy" class="headerlink" title="2.2.2.kube-proxy"></a>2.2.2.kube-proxy</h5><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-proxy/">kube-proxy</a> 是集群中每个<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/nodes/">节点（node）</a>所上运行的网络代理， 实现 Kubernetes <a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/service/">服务（Service）</a> 概念的一部分。</p><p>kube-proxy 维护节点上的一些网络规则， 这些网络规则会允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p><p>如果操作系统提供了可用的数据包过滤层，则 kube-proxy 会通过它来实现网络规则。 否则，kube-proxy 仅做流量转发。</p><h5 id="2-2-3-Flannel-Kubernetes网络组件"><a href="#2-2-3-Flannel-Kubernetes网络组件" class="headerlink" title="2.2.3.Flannel(Kubernetes网络组件)"></a>2.2.3.Flannel(Kubernetes网络组件)</h5><p>Flannel是Kubernetes中一种常用的网络插件，用于为集群中的Pod提供网络互联。它使用了一种名为VXLAN（Virtual Extensible LAN）的技术来创建覆盖整个Kubernetes集群的虚拟网络。</p><p>具体来说，Flannel使用以下方式工作：</p><p>1.初始化：当Flannel代理节点启动时，它会为每个节点分配一个唯一的、未使用的子网(CIDR)地址段，通过etcd存储这些地址段信息，并将其称为“网络配置”。</p><p>2.分配IP地址：当需要为一个新的Pod分配IP地址时，Flannel会从网络配置中选择一个可用的子网，然后在该子网中为该Pod分配一个IP地址。Flannel会确保所选子网中的任何其他Pod都不会使用相同的IP地址。</p><p>3.创建网络隧道：为了将不同节点上的Pod连接起来，Flannel会创建一组网络隧道。具体来说，它会在每个节点上创建一个虚拟网络接口vxlan0，并将其绑定到一个物理网络接口（如eth0）。然后，Flannel会使用VXLAN技术，在不同节点之间创建一个覆盖整个Kubernetes集群的虚拟网络。<br>4.数据传输：当两个Pod需要进行通信时，它们会像单个计算机内部的进程一样通信。数据包被发送到本地的虚拟网络接口vxlan0，并通过创建的隧道传输到目标节点上的vxlan0接口。然后，数据包被路由到目标Pod。</p><h2 id="3-kubernetes的资源对象"><a href="#3-kubernetes的资源对象" class="headerlink" title="3.kubernetes的资源对象"></a>3.kubernetes的资源对象</h2><ul><li>1.ReplicationController</li><li>2.ReplicationSet</li><li>3.Deployment</li><li>4.Ingress</li><li>5.Secret</li></ul><h5 id="1-ReplicationController"><a href="#1-ReplicationController" class="headerlink" title="1.ReplicationController"></a>1.ReplicationController</h5><p>Replication Controller（RC）是一种核心资源对象，用于确保指定数量的Pod副本正在运行。它允许用户定义一个Pod模板，并创建多个相同的Pod副本，以便在集群中部署和管理应用程序容器。</p><p>具体来说，Replication Controller 可以确保满足以下条件：<br>1.运行指定数量的 Pod 副本：用户可以通过 RC 对象指定需要创建和维护的Pod副本数。</p><p>2.重启崩溃的 Pod：当某个 Pod 崩溃或被删除时，RC会自动创建一个新的 Pod 副本来代替它。</p><p>3.控制 Pod 的生命周期：用户可以使用 RC 来进行滚动更新、扩容&#x2F;缩容等操作，而无需手动管理每个 Pod 的状态。<br>Replication Controller已经不被推荐使用，而是使用ReplicationSet或者Deployment进行代替</p><h5 id="2-ReplicationSet"><a href="#2-ReplicationSet" class="headerlink" title="2.ReplicationSet"></a>2.ReplicationSet</h5><p>ReplicaSet（RS）是一种资源对象，用于确保指定数量的 Pod 副本正在运行。类似于 Replication Controller（RC），但 RS 具有更多高级的功能。</p><p>1.与 RC 不同的是，RS 可以使用 Label Selector 来选择要管理的 Pod 子集，从而允许用户根据其需要更精细地控制 Pod 的创建和删除。例如，用户可以定义一个 Label Selector 来选择特定类型的 Pod，并在满足一些特定条件时自动扩展或缩小该 Pod 集合。</p><p>2.此外，RS 还支持滚动升级，即在更新 Pod 模板时逐步替换现有 Pod 副本，以实现应用程序的无缝升级，这在 RC 中是不支持的。</p><p>3.总之，ReplicaSet 是 Kubernetes 中一种关键的资源对象，用于管理 Pod 的副本集。它提供了比 RC 更高级的功能，如 Label Selector、滚动升级等，使得管理和部署应用程序变得更加灵活和可靠。</p><h5 id="3-Deployment"><a href="#3-Deployment" class="headerlink" title="3.Deployment"></a>3.Deployment</h5><p>1.Deployment 是一种资源对象，用于管理 Pod 副本集的创建、更新和删除等操作。Deployment 通常建立在 ReplicaSet（RS）之上，并通过动态地创建、更新和删除 RS 对象来实现应用程序的无缝升级和回滚。</p><p>2.Deployment 允许用户指定一个 Pod 模板，并定义需要创建和维护的 Pod 副本数。然后，当需要更新应用程序时，用户可以修改 Pod 模板，并通过 Deployment 对象进行滚动升级，以逐步替换现有 Pod 副本。如果更新失败或出现问题，Deployment 还支持回滚操作，以自动恢复到先前的稳定状态。</p><p>3.此外，Deployment 还支持暂停&#x2F;恢复操作，允许用户在更新过程中暂停所有 Pod 的创建和删除，以便进行一些必要的检查和修复。</p><h5 id="4-Service"><a href="#4-Service" class="headerlink" title="4.Service"></a>4.Service</h5><p>具体来说，Service 可以帮助用户实现以下功能：</p><p>1.发现和路由：通过 Service 对象，用户可以为一组 Pod 创建一个稳定的 IP 和端口，并使用该 IP 和端口将请求路由到集群中的任何一个 Pod 上。</p><p>2.负载均衡：当多个 Pod 共享同一个 Service 时，Kubernetes 会自动为这些 Pod 进行负载均衡，从而分摊请求流量并提高系统的可靠性和性能。</p><p>3.健康检查：Service 还支持对后端 Pod 的健康状态进行检查，并在发现故障时自动调整路由策略，从而保证应用程序的可用性和稳定性。</p><h5 id="5-Secret"><a href="#5-Secret" class="headerlink" title="5.Secret"></a>5.Secret</h5><p>Secret 是一种资源对象，用于存储敏感数据，例如密码、API 密钥、证书等。它提供了一种安全地将这些敏感数据传递给容器的方法，同时也可以确保这些数据在传输和存储过程中得到加密和保护。</p><p>具体来说，Secret 可以用于以下场景：</p><p>1.存储密码和机密数据：例如数据库密码、SSH 密钥等。</p><p>2.存储 TLS 证书：例如 HTTPS 网站所需的证书和私钥。</p><p>3.存储 API 认证密钥：例如 OAuth 鉴权所需的令牌信息等。</p><p>在使用 Secret 时，用户需要先创建一个 Secret 对象，并将需要存储的数据放到其中。然后，可以通过 Pod 的环境变量、卷挂载等方式，将这些数据传递给容器。Kubernetes 会自动将 Secret 数据转换为 Base64 编码格式，并在传输和存储过程中对其进行加密和保护。</p><h5 id="6-Ingress"><a href="#6-Ingress" class="headerlink" title="6.Ingress"></a>6.Ingress</h5><p>Ingress 是一种资源对象，用于管理对集群中 Service 的 HTTP&#x2F;HTTPS 访问，并允许用户使用类似于 Nginx 的路由规则将流量路由到不同的服务或后端 Pod 上。</p><p>具体来说，Ingress 可以实现以下功能：</p><p>1.路由：使用 Ingress 规则，将入站请求路由到指定的 Service 或后端 Pod 上。</p><p>2.HTTPS 支持：通过定义 TLS 证书和私钥，Ingress 可以实现终止和解密传入的 HTTPS 连接，并在转发请求时重新加密。</p><p>3.负载均衡：当多个 Pod 共享同一个 Ingress 时，Kubernetes 会自动为这些 Pod 进行负载均衡，从而分摊请求流量并提高系统的可靠性和性能。</p><p>4.应用程序层通信：可以使用 Ingress 控制器实现应用程序层的通信，例如 WebSocket、HTTP&#x2F;2 等。</p><p>注意，Ingress本身并不提供负载均衡功能，只是简单的将各个匹配规则的流量转发到各个Service，虽然Ingress会有负载均衡算法，但是这些负载均衡算法是告诉Service的，实际的负载均衡是Service来做的</p><h2 id="4-kubernetes集群部署"><a href="#4-kubernetes集群部署" class="headerlink" title="4.kubernetes集群部署"></a>4.kubernetes集群部署</h2><p>本教程基于Archlinux，其他发行版大体步骤类似<br>容器引擎基于CRI-O</p><h3 id="1-安装必要的组件"><a href="#1-安装必要的组件" class="headerlink" title="1.安装必要的组件"></a>1.安装必要的组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pacman -S kubeadm kubelet kubectl containerd </span><br><span class="line"><span class="comment">#kubeadm用于管理kubernetes的工具</span></span><br><span class="line"><span class="comment">#kubectl用于控制kubernetes集群的工具</span></span><br><span class="line"><span class="comment">#cri-o 一种专门为kubernetes设计的容器引擎</span></span><br></pre></td></tr></table></figure><h3 id="2-准备好必要的组件"><a href="#2-准备好必要的组件" class="headerlink" title="2.准备好必要的组件"></a>2.准备好必要的组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加载内核模块</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line">modprobe overlay</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /lib/modules-load.d/10-kubernetes.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">ip_vs</span></span><br><span class="line"><span class="string">ip_vs_wr</span></span><br><span class="line"><span class="string">ip_vs_wrr</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF </span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1 </span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1 </span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h3 id="2-启动容器引擎"><a href="#2-启动容器引擎" class="headerlink" title="2.启动容器引擎"></a>2.启动容器引擎</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start crio</span><br></pre></td></tr></table></figure><h3 id="3-初始化集群"><a href="#3-初始化集群" class="headerlink" title="3.初始化集群"></a>3.初始化集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --image-repository=registry.aliyuncs.com/google_containers --pod-network-cidr=10.254.0.0/16 --service-cidr=10.253.0.0/16 --cri-socket=unix:///var/run/containerd/containerd.sock</span><br><span class="line"><span class="comment">#指定国内的镜像仓库，不然可能会拉取镜像失败</span></span><br><span class="line"><span class="comment">#--pod-network-cidr指定pod网段</span></span><br><span class="line"><span class="comment">#--service-cidr指定svc网段</span></span><br><span class="line"><span class="comment">#--cri-socket指定容器引擎的socket</span></span><br></pre></td></tr></table></figure><h3 id="4-创建集群成功"><a href="#4-创建集群成功" class="headerlink" title="4.创建集群成功"></a>4.创建集群成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.1.250:6443 --token 6xfvp5.9gdoo9c9xp87cn4c \</span><br><span class="line">        --discovery-token-ca-cert-hash sha256:cd43db87da74dbcb3fb4eedf4bfdb454a175431928f8accbac331a357797e104</span><br></pre></td></tr></table></figure><h3 id="5-安装网络插件"><a href="#5-安装网络插件" class="headerlink" title="5.安装网络插件"></a>5.安装网络插件</h3><p>参考<br><a href="https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/#networking-and-network-policy">https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/#networking-and-network-policy</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span><br><span class="line"><span class="comment">#修改文件中的网段修改成自己创建集群时候的pod网段</span></span><br><span class="line"><span class="comment">#创建启动 flannel pod</span></span><br><span class="line">kubectl apply -f ./kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h5 id="1-apiserver以及etcd重启问题"><a href="#1-apiserver以及etcd重启问题" class="headerlink" title="1.apiserver以及etcd重启问题"></a>1.apiserver以及etcd重启问题</h5><p>对于systemd启动的linux系统，我们需要将容器引擎的资源分配策略改为systemd<br>containerd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class="line">  BinaryName = <span class="string">&quot;&quot;</span></span><br><span class="line">  CriuImagePath = <span class="string">&quot;&quot;</span></span><br><span class="line">  CriuPath = <span class="string">&quot;&quot;</span></span><br><span class="line">  CriuWorkPath = <span class="string">&quot;&quot;</span></span><br><span class="line">  IoGid = 0</span><br><span class="line">  IoUid = 0</span><br><span class="line">  NoNewKeyring = <span class="literal">false</span></span><br><span class="line">  NoPivotRoot = <span class="literal">false</span></span><br><span class="line">  Root = <span class="string">&quot;&quot;</span></span><br><span class="line">  ShimCgroup = <span class="string">&quot;&quot;</span></span><br><span class="line">  SystemdCgroup = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="2-网络问题"><a href="#2-网络问题" class="headerlink" title="2.网络问题"></a>2.网络问题</h3><p>对于crio容器引擎可能需要指定网络插件配置文件的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/crio/crio.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[crio.network]</span><br><span class="line">plugin_dirs = [</span><br><span class="line"><span class="string">&quot;/opt/cni/bin&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment">#在修改这个配置文件前确认这个文件下有没有配置文件</span></span><br><span class="line"><span class="comment">#重启crio和kubelet</span></span><br><span class="line">systemctl restart crio kubelet</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kubernetes简单入门&quot;&gt;&lt;a href=&quot;#kubernetes简单入门&quot; class=&quot;headerlink&quot; title=&quot;kubernetes简单入门&quot;&gt;&lt;/a&gt;kubernetes简单入门&lt;/h1&gt;&lt;h2 id=&quot;1-kubernetes是什么&quot;&gt;</summary>
      
    
    
    
    <category term="linux运维" scheme="https://bugprogram-git.github.io/categories/linux%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="云原生" scheme="https://bugprogram-git.github.io/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>etcd配置详解</title>
    <link href="https://bugprogram-git.github.io/2023/03/26/etcd%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>https://bugprogram-git.github.io/2023/03/26/etcd%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-03-26T11:43:39.000Z</published>
    <updated>2024-04-21T15:31:26.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="etcd配置详解"><a href="#etcd配置详解" class="headerlink" title="etcd配置详解"></a>etcd配置详解</h1><h3 id="1-什么是etcd？"><a href="#1-什么是etcd？" class="headerlink" title="1.什么是etcd？"></a>1.什么是etcd？</h3><p>etcd是一个开源的分布式键值存储系统，它用于在集群中的多个节点之间共享数据。etcd最初由CoreOS团队开发，现在由Cloud Native Computing Foundation (CNCF) 维护。etcd通常与Kubernetes一起使用，以存储和同步Kubernetes集群的配置信息和元数据。除了Kubernetes之外，etcd还可以用于其他分布式系统，例如OpenStack、Apache Mesos等。</p><h3 id="2-etcd的使用场景"><a href="#2-etcd的使用场景" class="headerlink" title="2.etcd的使用场景"></a>2.etcd的使用场景</h3><ul><li><p>1.Kubernetes集群控制平面的数据存储：etcd存储Kubernetes集群的配置信息、状态和元数据，确保在多个节点之间同步。</p></li><li><p>2.服务发现和负载均衡：etcd可以存储服务注册表，以便其他服务可以查询可用的服务实例并进行负载均衡。</p></li><li><p>3.分布式锁：etcd提供了一个基于租约的分布式锁实现，可以防止多个客户端同时修改相同的资源。</p></li><li><p>4.配置管理：etcd可以存储应用程序的配置信息，并允许应用程序在运行时动态更新这些配置。</p></li><li><p>5日志聚合：etcd可以用于存储日志收集器的配置和元数据，以便管理和监控日志收集器。<br>总之，etcd可以作为任何需要共享数据的分布式系统的通用数据存储解决方案。</p></li></ul><h3 id="3-etcd对比redis"><a href="#3-etcd对比redis" class="headerlink" title="3.etcd对比redis"></a>3.etcd对比redis</h3><p>tcd和Redis都是基于内存的键值对数据库，但它们有不同的设计目标和使用场景：</p><ul><li><p>1.etcd是一个专为分布式系统设计的键值对数据库，用于在多个节点之间共享配置信息和元数据，通常与Kubernetes等容器编排工具配合使用。</p></li><li><p>2.Redis是一个广泛用于缓存、消息队列、实时统计、地理位置等应用的内存数据库，支持多种数据结构和丰富的操作。</p></li></ul><p>相对而言，etcd更加注重数据的一致性和高可用性，并提供了一些特定于分布式环境下的功能，例如基于租约的分布式锁。而Redis则更侧重于快速的读写性能和丰富的数据处理能力。</p><h3 id="4-etcd配置"><a href="#4-etcd配置" class="headerlink" title="4.etcd配置"></a>4.etcd配置</h3><p>1.安装etcd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于Archlinux</span></span><br><span class="line">pacman -S etcd <span class="comment">#</span></span><br></pre></td></tr></table></figure><p>2.配置etcd<br>由于Archlinux安装etcd后生成的etcd.service文件中并没有指定etcd的配置文件，因此我们可以修改&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;etcd.service文件的配置参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=etcd key-value store</span><br><span class="line">Documentation=https://github.com/etcd-io/etcd</span><br><span class="line">After=network-online.target local-fs.target remote-fs.target time-sync.target</span><br><span class="line">Wants=network-online.target local-fs.target remote-fs.target time-sync.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=etcd</span><br><span class="line">Type=notify</span><br><span class="line">Environment=ETCD_DATA_DIR=/var/lib/etcd</span><br><span class="line">Environment=ETCD_NAME=%m</span><br><span class="line">ExecStart=/usr/bin/etcd --config-file /etc/etcd/etcd.conf #这里指定配置文件</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10s</span><br><span class="line">LimitNOFILE=40000</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>3.编辑etcd配置文件<br>etcd配置文件以yaml文件语法格式编写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Cluster配置</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&quot;etcd-node-1&quot;</span></span><br><span class="line"><span class="comment">#指定初始集群状态，&quot;new&quot;代表一个全新的未初始化的etcd集群</span></span><br><span class="line"><span class="attr">initial-cluster-state:</span> <span class="string">&quot;new&quot;</span></span><br><span class="line"><span class="attr">initial-cluster-token:</span> <span class="string">&quot;etcd-cluster-1&quot;</span></span><br><span class="line"><span class="attr">initial-cluster:</span> <span class="string">&quot;etcd-node-1=http://192.168.0.1:2380,etcd-node-2=http://192.168.0.2:2380,etcd-node-3=http://192.168.0.3:2380&quot;</span></span><br><span class="line"><span class="comment">#用于集群部署的，listen-peer-urls为其他etcd节点访问的url</span></span><br><span class="line"><span class="attr">listen-peer-urls:</span> <span class="string">&quot;http://192.168.0.1:2380&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Security配置</span></span><br><span class="line"><span class="attr">client-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&quot;/path/to/client.crt&quot;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&quot;/path/to/client.key&quot;</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&quot;/path/to/ca.crt&quot;</span></span><br><span class="line">  <span class="comment">#集群的证书，信任的ca证书，以及密钥</span></span><br><span class="line"><span class="attr">peer-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&quot;/path/to/peer.crt&quot;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&quot;/path/to/peer.key&quot;</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&quot;/path/to/ca.crt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Logging配置</span></span><br><span class="line"><span class="comment">#如果需要输出更多的调试信息，打开debug，在生产环境中建议关闭</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#日志等级</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">&quot;info&quot;</span></span><br><span class="line"><span class="attr">log-outputs:</span> [<span class="string">&quot;stdout&quot;</span>]</span><br><span class="line"><span class="comment">#如果要将日志输出到指定文件</span></span><br><span class="line"><span class="comment">#log-outputs: [&quot;file&quot;]</span></span><br><span class="line"><span class="comment">#log-file: &quot;/var/log/etcd/etcd.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Storage配置</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">&quot;/var/lib/etcd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># API Server配置</span></span><br><span class="line"><span class="comment">#监听的地址2379端口为etcd V3版本的监听端口，V2版本为4001，可以根据具体版本进行修改</span></span><br><span class="line"><span class="attr">listen-client-urls:</span> <span class="string">&quot;http://0.0.0.0:2379,http://0.0.0.0:4001&quot;</span></span><br><span class="line"><span class="comment">#响应客户端请求在响应头中加入的地址和端口</span></span><br><span class="line"><span class="attr">advertise-client-urls:</span> <span class="string">&quot;http://192.168.0.1:2379,http://192.168.0.1:4001&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;etcd配置详解&quot;&gt;&lt;a href=&quot;#etcd配置详解&quot; class=&quot;headerlink&quot; title=&quot;etcd配置详解&quot;&gt;&lt;/a&gt;etcd配置详解&lt;/h1&gt;&lt;h3 id=&quot;1-什么是etcd？&quot;&gt;&lt;a href=&quot;#1-什么是etcd？&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>onosproject和mininet部署</title>
    <link href="https://bugprogram-git.github.io/2023/03/22/onos%E5%92%8Cmininet%E9%83%A8%E7%BD%B2/"/>
    <id>https://bugprogram-git.github.io/2023/03/22/onos%E5%92%8Cmininet%E9%83%A8%E7%BD%B2/</id>
    <published>2023-03-21T17:57:55.000Z</published>
    <updated>2024-04-21T15:31:26.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="onos和mininet部署"><a href="#onos和mininet部署" class="headerlink" title="onos和mininet部署"></a>onos和mininet部署</h1><h2 id="1-onos"><a href="#1-onos" class="headerlink" title="1.onos"></a>1.onos</h2><h3 id="1-1-onos是什么"><a href="#1-1-onos是什么" class="headerlink" title="1.1.onos是什么?"></a>1.1.onos是什么?</h3><p>ONOS（Open Network Operating System）是一个用于构建和管理网络的开源操作系统。它由Linux基金会主持并进行开发，旨在为现代网络提供可编程、高度自动化和灵活性的操作系统平台。ONOS允许用户使用各种编程语言和工具来实现网络应用程序和服务，并提供了一套标准API和开放协议，以便与其他网络设备和管理平台进行集成。</p><p>ONOS的核心架构采用分布式控制平面，可以自动处理网络拓扑变化、流量路由和负载均衡等任务，同时支持多租户和多层次的网络安全策略。ONOS还支持多种网络技术和协议，如SDN、NFV、P4等，可以轻松地将这些技术与现有的网络结构进行整合和扩展。</p><p>ONOS是一个开放且灵活的网络操作系统平台，已经被广泛应用于电信、互联网服务提供商、企业和研究机构等领域中，以构建高效、灵活和强大的网络基础设施。</p><h3 id="1-2-如何部署onos"><a href="#1-2-如何部署onos" class="headerlink" title="1.2.如何部署onos?"></a>1.2.如何部署onos?</h3><p>源码部署由于会涉及到过多的依赖以及版本兼容问题(网上大部分教程也是基于源码部署)，并且源码部署需要一个漫长的编译时间(取决于你的cpu性能)，由于docker镜像帮我们帮onos的环境以及依赖打包好了，因此我们使用docker部署onos不仅不会出问题，而且会非常的高效。</p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>如果你的系统上没有安装docker，那么你首先需要安装docker</p><h5 id="1-2-1安装docker"><a href="#1-2-1安装docker" class="headerlink" title="1.2.1安装docker"></a>1.2.1安装docker</h5><p>基于ubuntu&#x2F;debian</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker-compose是用来编排docker容器的一个脚本,如果你不需要docker-compose,将下面的改成docker.io即可</span></span><br><span class="line">apt install docker-compose<span class="comment">#在安装docker-compose的时候回一起安装docker</span></span><br></pre></td></tr></table></figure><h5 id="1-2-2-使用docker-compose编排"><a href="#1-2-2-使用docker-compose编排" class="headerlink" title="1.2.2.使用docker-compose编排"></a>1.2.2.使用docker-compose编排</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">onosproject:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">onosproject/onos:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">onosproject</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">onosproject</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6640:6640&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6653:6653&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8101:8101&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8181:8181&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9876:9876&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将文件保存成docker-compose.yml</p><h5 id="1-2-3-开始部署"><a href="#1-2-3-开始部署" class="headerlink" title="1.2.3.开始部署"></a>1.2.3.开始部署</h5><p>在docker-compose.yml文件夹下执行以下命令编排容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br><span class="line"><span class="comment">#如果这条命令报错，那么首先你需要删除所有的docker容器(指令在下面)</span></span><br><span class="line"><span class="comment">#sudo docker rm -f $(sudo docker ps -qa)</span></span><br></pre></td></tr></table></figure><h5 id="1-2-4-激活功能"><a href="#1-2-4-激活功能" class="headerlink" title="1.2.4.激活功能"></a>1.2.4.激活功能</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录到onos容器内部</span></span><br><span class="line">ssh karaf@127.0.0.1 -p8101<span class="comment">#(密码默认为karaf)(指定指令的机器一定要在搭建onos的机器上)</span></span><br><span class="line"><span class="comment">#进入到命令行后输入以下指令(密码默认为karaf)</span></span><br><span class="line">app activate org.onosproject.openflow<span class="comment">#打开openflow功能</span></span><br><span class="line">app activate org.onosproject.fwd<span class="comment">#打开流量转发功能</span></span><br></pre></td></tr></table></figure><p>至此onos服务已经搭建完毕</p><h5 id="1-2-5-我们可以打开浏览器访问"><a href="#1-2-5-我们可以打开浏览器访问" class="headerlink" title="1.2.5.我们可以打开浏览器访问"></a>1.2.5.我们可以打开浏览器访问</h5><p><a href="http://127.0.0.1:8181/onos/ui">http://127.0.0.1:8181/onos/ui</a> (如果浏览器和部署机器不在同一台机器上，把127.0.0.1换成服务器的真实ip地址)<br>默认用户名和密码<br>onos<br>rocks</p><h5 id="1-2-6-确认功能已激活"><a href="#1-2-6-确认功能已激活" class="headerlink" title="1.2.6.确认功能已激活"></a>1.2.6.确认功能已激活</h5><p><img src="/images/activate.png" alt="确认功能已经激活"><br>如果这些功能中有功能未激活，那么回到1.2.4.去激活openflow和fwd功能</p><h2 id="2-mininet"><a href="#2-mininet" class="headerlink" title="2.mininet"></a>2.mininet</h2><h3 id="2-1-什么是mininet？"><a href="#2-1-什么是mininet？" class="headerlink" title="2.1.什么是mininet？"></a>2.1.什么是mininet？</h3><p>Mininet是一种用于创建虚拟网络环境的开源工具。它可以在单个计算机上运行，并模拟多个网络设备和主机之间的连接，包括交换机、路由器、主机等。使用Mininet可以轻松地构建和测试各种网络应用程序和协议，并且可以在实验环境中有效地调试和优化网络性能。</p><p>Mininet基于Linux的命名空间技术，使得用户可以创建多个隔离的虚拟网络环境，并在每个环境中运行自己的网络协议栈和应用程序。它还提供了一个Python API，可以方便地定义和管理虚拟网络拓扑，并支持对网络流量进行捕获和分析。</p><p>Mininet已经成为一个广泛使用的虚拟化网络环境工具，在网络学术研究、教育和开发领域都有着重要的应用价值。</p><h3 id="2-2-mininet部署"><a href="#2-2-mininet部署" class="headerlink" title="2.2.mininet部署"></a>2.2.mininet部署</h3><p>mininet部署有多种方法，但是目前经过多次尝试最稳定的是单独导入一个mininet虚拟机(官方推荐方法),这个虚拟机中已经部署好了mininet环境以及mininet需要的所有的依赖，因此导入即用，非常的方便<br><a href="https://github.com/mininet/mininet/releases/">mininet虚拟机下载地址</a>根据所需下载</p><h3 id="2-3-mininet导入"><a href="#2-3-mininet导入" class="headerlink" title="2.3.mininet导入"></a>2.3.mininet导入</h3><p>将下载好的压缩包导入，使用vmware或者virtualbox即可打开导入<br>以后在mininet命令行上添加设备<br>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这里的ip地址是已经配置搭建好onos的服务器ip地址(需要根据实际修改)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!!!!!命令一定要看注释!!!</span></span><br><span class="line"><span class="comment">#!!!!!命令一定要看注释!!!</span></span><br><span class="line"><span class="comment">#!!!!!命令一定要看注释!!!</span></span><br><span class="line">sudo mn --topo tree,2 --controller remote,ip=172.17.0.2<span class="comment">#指令执行的地方为mininet主机上，不是onos部署的那台主机(切记！！！！！)(ip地址需要修改成onos的主机的ip地址)</span></span><br><span class="line"><span class="comment">#controller指定onos服务器的ip地址</span></span><br><span class="line"><span class="comment">#--topo 指定拓扑结构</span></span><br></pre></td></tr></table></figure><h3 id="2-4-优化配置选项"><a href="#2-4-优化配置选项" class="headerlink" title="2.4.优化配置选项"></a>2.4.优化配置选项</h3><p>由于虚拟机没有图形化，更没有和宿主机共享剪切板等问题，每次进mininet中操作非常的麻烦，而且mininet默认开启openssh服务，我们可以直接使用ssh工具远程连接，不过你首先需要知道他的ip地址<br><strong>获取ip地址的方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip addr <span class="comment">#执行命令的主机为mininet主机</span></span><br><span class="line"><span class="comment">#eth0网卡后面的inet参数就是ip地址(一般是192.168开头的)</span></span><br></pre></td></tr></table></figure><p>知道ip地址后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh mininet@&#123;IP&#125; <span class="comment">#将ip地址修改成mininet主机的ip地址(执行这条命令的主机是onos主机)</span></span><br><span class="line"><span class="comment">#密码是mininet</span></span><br><span class="line"><span class="comment">#这条命令实现从onos主机远程登录到mininet主机，而不用mininet和onos主机来回切换</span></span><br></pre></td></tr></table></figure><p>登录成功后，我们即可远程操作</p><h3 id="最后的效果"><a href="#最后的效果" class="headerlink" title="最后的效果"></a>最后的效果</h3><p><img src="/images/mininetandonos.png" alt="mininet和onos"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;onos和mininet部署&quot;&gt;&lt;a href=&quot;#onos和mininet部署&quot; class=&quot;headerlink&quot; title=&quot;onos和mininet部署&quot;&gt;&lt;/a&gt;onos和mininet部署&lt;/h1&gt;&lt;h2 id=&quot;1-onos&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="软件部署" scheme="https://bugprogram-git.github.io/tags/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>GreaterWMS部署</title>
    <link href="https://bugprogram-git.github.io/2023/03/21/GreaterWMS%E9%83%A8%E7%BD%B2/"/>
    <id>https://bugprogram-git.github.io/2023/03/21/GreaterWMS%E9%83%A8%E7%BD%B2/</id>
    <published>2023-03-20T16:13:34.000Z</published>
    <updated>2024-04-21T15:31:26.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GreaterWMS部署"><a href="#GreaterWMS部署" class="headerlink" title="GreaterWMS部署"></a>GreaterWMS部署</h1><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><p>部署环境node14.18.3<br>python 3.10.6，原则上其他python版本也是可以的(但是不能太低，官方用的python3.9，自行参考)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#### 1.获取node</span><br><span class="line">使用的node版本不能太高，不能根据官方教程将node版本升级到最新</span><br><span class="line">```bash</span><br><span class="line">wget [https://nodejs.org/dist/v14.18.3/node-v14.18.3-linux-x64.tar.gz(https://nodejs.org/dist/v14.18.3/node-v14.18.3-linux-x64.tar.gz)  </span><br><span class="line">sudo tar zvxf node-v14.18.3-linux-x64.tar.gz -C /usr/local  </span><br><span class="line">echo &quot;export NODE_HOME=/usr/local/node-v14.18.3-linux-x64&quot; &gt;&gt; /etc/profile</span><br><span class="line">echo &quot;export PATH=$PATH:$NODE_HOME/bin &quot;&gt;&gt; /etc/profile</span><br><span class="line">echo &quot;export NODE_PATH=$NODE_HOME/lib/node_modules&quot; &gt;&gt; /etc/profile</span><br><span class="line">/etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-更新"><a href="#2-更新" class="headerlink" title="2.更新"></a>2.更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#npm换源</span></span><br><span class="line">sudo npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">sudo npm install yarn -g <span class="comment">#安装yarn</span></span><br><span class="line">sudo npm install -g @quasar/cli <span class="comment">#安装quasar/cli</span></span><br><span class="line"><span class="comment">#yarn换源</span></span><br><span class="line">sudo yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br><span class="line"><span class="comment">#安装pip</span></span><br><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><h3 id="3-部署项目"><a href="#3-部署项目" class="headerlink" title="3.部署项目"></a>3.部署项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取项目(可能需要魔法上网，你懂的)</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/GreaterWMS/GreaterWMS.git</span><br><span class="line"><span class="comment">#安装依赖(如果安装依赖出现问题，则是)</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="built_in">cd</span> templates/ &amp;&amp; yarn install </span><br><span class="line"><span class="comment">#初始化数据库</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h3 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4.修改配置"></a>4.修改配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /templates/public/statics/baseurl.txt</span><br><span class="line">修改成http://127.0.0.1:8008/</span><br><span class="line">(注意最后一个斜杠不能省，一定要加上)</span><br><span class="line">回到templates目录下重新打包</span><br><span class="line">quasar build</span><br></pre></td></tr></table></figure><h3 id="5-运行项目"><a href="#5-运行项目" class="headerlink" title="5.运行项目"></a>5.运行项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#回到项目根目录运行项目</span></span><br><span class="line">python3 manage.py runserver 0.0.0.0:8008</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GreaterWMS部署&quot;&gt;&lt;a href=&quot;#GreaterWMS部署&quot; class=&quot;headerlink&quot; title=&quot;GreaterWMS部署&quot;&gt;&lt;/a&gt;GreaterWMS部署&lt;/h1&gt;&lt;h3 id=&quot;1-环境准备&quot;&gt;&lt;a href=&quot;#1-环境准备&quot;</summary>
      
    
    
    
    
    <category term="软件部署" scheme="https://bugprogram-git.github.io/tags/%E8%BD%AF%E4%BB%B6%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>docker镜像的构建</title>
    <link href="https://bugprogram-git.github.io/2023/03/05/docker%E9%95%9C%E5%83%8F%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
    <id>https://bugprogram-git.github.io/2023/03/05/docker%E9%95%9C%E5%83%8F%E7%9A%84%E6%9E%84%E5%BB%BA/</id>
    <published>2023-03-05T09:37:53.000Z</published>
    <updated>2024-04-21T15:31:26.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker镜像的构建"><a href="#docker镜像的构建" class="headerlink" title="docker镜像的构建"></a>docker镜像的构建</h2><h3 id="1-Dockerfile"><a href="#1-Dockerfile" class="headerlink" title="1.Dockerfile"></a>1.Dockerfile</h3><p>Dockerfile是构建docker镜像的脚本，它里面会告诉docker镜像构建程序如何构建一个特定的docker镜像</p><h3 id="2-overlayer"><a href="#2-overlayer" class="headerlink" title="2.overlayer"></a>2.overlayer</h3><p>overlayer是docker镜像的镜像层，每一个docker镜像由多个overlayer的组成，由于docker镜像存储使用了联合文件系统，每一个docker镜像由多个overlayer组成，多个docker镜像相同的overlayer进行共用，这使得不管是存储docker镜像还是运行docker容器，这都极大的节省了空间</p><h3 id="3-Dockerfile语法"><a href="#3-Dockerfile语法" class="headerlink" title="3.Dockerfile语法"></a>3.Dockerfile语法</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:latest       <span class="comment">#以什么镜像为基础构建镜像</span></span><br><span class="line">MANTAINER bugprogram-git <span class="comment">#镜像的构建人</span></span><br><span class="line"><span class="keyword">ENV</span> hello=world <span class="comment">#设置环境变量，在镜像运行时，此参数仍然生效</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt update -y &amp;&amp; apt upgrade -y \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">ln</span> -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="language-bash"></span></span><br></pre></td></tr></table></figure><h3 id="4-docker镜像构建"><a href="#4-docker镜像构建" class="headerlink" title="4.docker镜像构建"></a>4.docker镜像构建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myubuntu:latest -f ./Dockerfile .</span><br><span class="line"><span class="comment">#-f指定dockerfile文件名 </span></span><br><span class="line"><span class="comment">#-t指定构建的镜像名和tag</span></span><br></pre></td></tr></table></figure><h3 id="5-docker镜像多阶段构建"><a href="#5-docker镜像多阶段构建" class="headerlink" title="5.docker镜像多阶段构建"></a>5.docker镜像多阶段构建</h3><p>在实际构建docker镜像的过程中，有时候可能要先构建成中间产物，比如部署项目时，我们可能要先部署编译环境，然后构建成可执行程序的时候，然后在清理中间产物，导致整个构建过程十分的繁琐，因此自从Docker 17.05.0-ce之后，docker支持了多阶段构建镜像</p><p>例如，部署golang程序，我们首先在golang的docker镜像上将源码编译成可执行程序，再将可执行程序部署到alpine镜像上构建成docker镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> golang:alpine as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./hello.go .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o hello ./hello.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">MAINTAINER</span> bugprogram-git</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /hello . <span class="comment">#从上述构建的镜像中拷贝可执行程序拷贝到此镜像中</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x hello</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> /hello</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-常用的docker基础镜像"><a href="#6-常用的docker基础镜像" class="headerlink" title="6.常用的docker基础镜像"></a>6.常用的docker基础镜像</h3><p><strong>alpine</strong><br>最常用的docker基础镜像，非常小，只有几MB，libc使用的musllib，和glibc不兼容，因此部署的可执行程序需要在musllib作为libc时进行编译，否则无法运行<br><strong>centos</strong><br>常用的运行环境，centos由于其稳定性是企业中最常用的linux发行版，<br><strong>ubuntu</strong><br>常用的编译环境，libc为glibc</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker镜像的构建&quot;&gt;&lt;a href=&quot;#docker镜像的构建&quot; class=&quot;headerlink&quot; title=&quot;docker镜像的构建&quot;&gt;&lt;/a&gt;docker镜像的构建&lt;/h2&gt;&lt;h3 id=&quot;1-Dockerfile&quot;&gt;&lt;a href=&quot;#1-Doc</summary>
      
    
    
    
    <category term="linux运维" scheme="https://bugprogram-git.github.io/categories/linux%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="云原生" scheme="https://bugprogram-git.github.io/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>ssh配置密钥</title>
    <link href="https://bugprogram-git.github.io/2023/02/11/ssh%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>https://bugprogram-git.github.io/2023/02/11/ssh%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</id>
    <published>2023-02-11T06:37:58.000Z</published>
    <updated>2024-04-21T15:31:26.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是ssh？"><a href="#1-什么是ssh？" class="headerlink" title="1.什么是ssh？"></a>1.什么是ssh？</h2><p>ssh是一种应用层协议，一般用于本地客户端登录到远程服务器进行相关作业，端口是22&#x2F;TCP。</p><h2 id="2-ssh结构"><a href="#2-ssh结构" class="headerlink" title="2.ssh结构"></a>2.ssh结构</h2><ul><li>1.ssh服务器</li><li>2.ssh客户端</li></ul><h2 id="3-ssh客户端认证方式"><a href="#3-ssh客户端认证方式" class="headerlink" title="3.ssh客户端认证方式"></a>3.ssh客户端认证方式</h2><ul><li>1.密码认证</li><li>2.密钥认证<br>基于安全性和便利性考量，我们一般使用密钥认证</li></ul><h2 id="4-ssh相关配置"><a href="#4-ssh相关配置" class="headerlink" title="4.ssh相关配置"></a>4.ssh相关配置</h2><h3 id="1-服务器配置"><a href="#1-服务器配置" class="headerlink" title="1.服务器配置"></a>1.服务器配置</h3><h4 id="1-生成密钥"><a href="#1-生成密钥" class="headerlink" title="1.生成密钥"></a>1.生成密钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成一对长度为2048的RSA密钥，指定注释为“rocky linux ECS”</span></span><br><span class="line">ssh-keygen -t rsa -b 2048 -C <span class="string">&quot;rocky linux ECS&quot;</span> -f rocky</span><br><span class="line"><span class="comment">#-t 为指定密钥算法类型</span></span><br><span class="line"><span class="comment">#-b 为密钥的长度一般指定2048足以，</span></span><br><span class="line"><span class="comment">#-C 指定密钥的注释</span></span><br><span class="line"><span class="comment">#-f 指定生成的密钥文件名称</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这一步将会生成一对RSA密钥，公钥会以.pub为后缀,公钥放在被登录的服务器上，私钥自行留存，被用于以后进行登录服务器时进行身份验证使用。</p><h4 id="2-配置密钥"><a href="#2-配置密钥" class="headerlink" title="2.配置密钥"></a>2.配置密钥</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将公钥配置在家目录的.ssh目录下</span></span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt; <span class="variable">$HOME</span>/.ssh/authorized_keys</span><br><span class="line"><span class="comment">#注意权限</span></span><br><span class="line"><span class="comment">#.ssh目录要配置成700权限authorized_keys密钥文件权限要配置成644</span></span><br></pre></td></tr></table></figure><p>将公钥配置在服务器上，并且相关目录的权限要配置正确</p><h4 id="3-其他相关配置"><a href="#3-其他相关配置" class="headerlink" title="3.其他相关配置"></a>3.其他相关配置</h4><p>为了服务器的安全考虑以及其他相关需求，我们一般要对服务器进行其他相关配置，ssh服务器的配置文件为&#x2F;etc&#x2F;ssh&#x2F;sshd_config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim /etc/ssh/sshd_config</span></span><br><span class="line">PermitRootlogin <span class="built_in">yes</span><span class="comment">#指定是否允许root用户登录,如果一般不使用root用户登录建议关闭</span></span><br><span class="line">PasswordAuthentication <span class="comment">#指定是否允许通过密码认证方式登录,如果已经使用密钥登录建议关闭</span></span><br><span class="line">AuthorizedKeyFiles .ssh/authorized_key <span class="comment">#指定服务器公钥的存放路径，仅在使用密钥认证的情况下有用</span></span><br></pre></td></tr></table></figure><h3 id="2-客户端配置"><a href="#2-客户端配置" class="headerlink" title="2.客户端配置"></a>2.客户端配置</h3><h4 id="1-配置密钥"><a href="#1-配置密钥" class="headerlink" title="1.配置密钥"></a>1.配置密钥</h4><p>将上次生成的密钥对中的私钥放在客户端目录，一般为了方便我们一般会定义一个ssh客户端配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="variable">$HOME</span>/.ssh/config</span><br><span class="line">Host armbian<span class="comment">#取的别名</span></span><br><span class="line">        Hostname 192.168.1.254<span class="comment">#登录的服务器的ip地址</span></span><br><span class="line">        Port 22<span class="comment">#ssh服务开放的端口，一般默认22</span></span><br><span class="line">        User root<span class="comment">#登录的用户名</span></span><br><span class="line">        Identityfile ~/.ssh/private_keys/armbian<span class="comment">#指定密钥的所在地</span></span><br></pre></td></tr></table></figure><p>将私钥放在配置文件指定的目录下面</p><h4 id="2-使用-配置的别名登录服务器"><a href="#2-使用-配置的别名登录服务器" class="headerlink" title="2.使用 配置的别名登录服务器"></a>2.使用 配置的别名登录服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh armbian</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-什么是ssh？&quot;&gt;&lt;a href=&quot;#1-什么是ssh？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是ssh？&quot;&gt;&lt;/a&gt;1.什么是ssh？&lt;/h2&gt;&lt;p&gt;ssh是一种应用层协议，一般用于本地客户端登录到远程服务器进行相关作业，端口是22&amp;</summary>
      
    
    
    
    
    <category term="linux系统配置" scheme="https://bugprogram-git.github.io/tags/linux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>cmake基本使用</title>
    <link href="https://bugprogram-git.github.io/2023/02/07/cmake%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://bugprogram-git.github.io/2023/02/07/cmake%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2023-02-07T12:34:16.000Z</published>
    <updated>2024-04-21T15:31:26.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cmake基本使用"><a href="#cmake基本使用" class="headerlink" title="cmake基本使用"></a>cmake基本使用</h1><h3 id="1-cmake是什么"><a href="#1-cmake是什么" class="headerlink" title="1.cmake是什么?"></a>1.cmake是什么?</h3><p>cmake是一种项目构建工具，在cmake出现之前我们一般使用make进行项目构建，但是makefile编写比较复杂，因此cmake应运而生，使用cmake只需要编写简单的CMakeLists.txt，cmake会根据CMakeLists.txt生成对应的makefile。</p><h3 id="2-cmake的安装和配置"><a href="#2-cmake的安装和配置" class="headerlink" title="2.cmake的安装和配置"></a>2.cmake的安装和配置</h3><h4 id="1-cmake安装"><a href="#1-cmake安装" class="headerlink" title="1.cmake安装"></a>1.cmake安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmake <span class="comment">#基于ubuntu/debian</span></span><br></pre></td></tr></table></figure><h4 id="2-cmake配置"><a href="#2-cmake配置" class="headerlink" title="2.cmake配置"></a>2.cmake配置</h4><p>cmake使用一般要设定两个环境变量，如果工程使用的包含文件或者库文件放在非默认路径下，则需要使用设置该环境变量来弥补</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CMAKE_INCLUDE_PATH=/usr/include</span><br><span class="line"><span class="built_in">export</span> CMAKE_LIBRARY_PATH=/usr/lib</span><br></pre></td></tr></table></figure><h3 id="3-CMakeLists-txt的编写规则"><a href="#3-CMakeLists-txt的编写规则" class="headerlink" title="3.CMakeLists.txt的编写规则"></a>3.CMakeLists.txt的编写规则</h3><p>脚本关键字一般使用大写，当然使用小写也是可以的</p><h5 id="1-CMAKE-MINIMUM-REQUIRED"><a href="#1-CMAKE-MINIMUM-REQUIRED" class="headerlink" title="1.CMAKE_MINIMUM_REQUIRED"></a>1.CMAKE_MINIMUM_REQUIRED</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="variable">$&#123;VERSION&#125;</span>)</span><br><span class="line"><span class="comment">#用于指定该cmake脚本兼容的最低cmake版本</span></span><br><span class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">3.12</span>)</span><br><span class="line"><span class="comment">#这里表明cmake兼容的最低版本为3.12</span></span><br></pre></td></tr></table></figure><h4 id="2-PROJECT"><a href="#2-PROJECT" class="headerlink" title="2.PROJECT"></a>2.PROJECT</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PROJECT</span>(project_name <span class="variable">$&#123;program_language&#125;</span>)</span><br><span class="line"><span class="comment">#指定该项目的名称和该项目支持的变成语言</span></span><br><span class="line"><span class="keyword">PROJECT</span>(shadowsocks-libev C )</span><br><span class="line"><span class="comment">#这里指定项目名称为shadowsocks-libev,支持的变成语言为C,如果不指定此项默认支持所有变成语言</span></span><br></pre></td></tr></table></figure><h4 id="3-INCLUDE-DIRECTORY"><a href="#3-INCLUDE-DIRECTORY" class="headerlink" title="3.INCLUDE_DIRECTORY"></a>3.INCLUDE_DIRECTORY</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(<span class="variable">$&#123;PATH&#125;</span>)</span><br><span class="line"><span class="comment">#指定包含头文件的包含路径</span></span><br><span class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(/usr/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment">#指定项目头文件的包含路径为/usr/include</span></span><br></pre></td></tr></table></figure><h4 id="4-LINK-DIRECTORIES"><a href="#4-LINK-DIRECTORIES" class="headerlink" title="4.LINK_DIRECTORIES"></a>4.LINK_DIRECTORIES</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LINK_DIRECTORIES</span>(<span class="variable">$&#123;PATH&#125;</span>)</span><br><span class="line"><span class="comment">#指定链接库的路径</span></span><br><span class="line"><span class="keyword">LINK_DIRECTORIES</span>(/usr/lib)</span><br><span class="line"><span class="comment">#指定链接库的路径为/usr/lib</span></span><br></pre></td></tr></table></figure><h4 id="5-SET"><a href="#5-SET" class="headerlink" title="5.SET"></a>5.SET</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span>(PARAM VALUE)</span><br><span class="line"><span class="comment">#设置变量</span></span><br><span class="line"><span class="keyword">SET</span>(EXECUTABLE bin)</span><br><span class="line"><span class="comment">#这里设定变量EXECUTABLE为bin</span></span><br><span class="line"><span class="comment">#SET选项一般设置一些关键的环境变量，例如，输出的可执行程序的输出路径，包含文件的查找路径，包含库文件的查找路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用的关键变量</span></span><br><span class="line">LIBRARY_OUTPUT_PATH <span class="comment">#生成的库文件的生成目录</span></span><br><span class="line">EXECUTABLE_OUTPUT_PATH <span class="comment">#生成的可执行文件的生成目录</span></span><br><span class="line">CMAKE_C_COMPILER    <span class="comment">#指定cmake使用什么编译器进行编译项目</span></span><br><span class="line">CMAKE_CXX_COMPILER   <span class="comment">#指定cmake使用什么c++编译器进行编译项目</span></span><br></pre></td></tr></table></figure><h4 id="6-ADD-LIBRARY"><a href="#6-ADD-LIBRARY" class="headerlink" title="6.ADD_LIBRARY"></a>6.ADD_LIBRARY</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD_LIBRARY</span>(&lt;name&gt; STATIC/SHARED/MODULE &lt;source&gt;)</span><br><span class="line"><span class="comment">#指定源代码路径以及生成的库的类型和名称</span></span><br><span class="line"><span class="comment">#&lt;name&gt;为指定生成库的名称</span></span><br><span class="line"><span class="comment">#STATIC/SHARED 指定生成静态或者动态库</span></span><br><span class="line"><span class="comment">#&lt;source&gt;指定源代码的路径</span></span><br></pre></td></tr></table></figure><h4 id="7-AUX-SOURCE-DIRECTORY"><a href="#7-AUX-SOURCE-DIRECTORY" class="headerlink" title="7.AUX_SOURCE_DIRECTORY"></a>7.AUX_SOURCE_DIRECTORY</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">AUX_SOURCE_DIRECTORY</span>(src SOURCE_DIR)</span><br><span class="line"><span class="comment">#扫描一个目录的文件并将该目录的文件定义成一个变量</span></span><br></pre></td></tr></table></figure><h4 id="8-其他常用的关键字"><a href="#8-其他常用的关键字" class="headerlink" title="8.其他常用的关键字"></a>8.其他常用的关键字</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TARGET_LINK_DIRECTORIES</span></span><br><span class="line"><span class="keyword">TARGET_LINK_DIRECTORIES</span>(/usr/lib)</span><br><span class="line"><span class="comment">#指定目标文件链接的库路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TARGET_INCLUDE_DIRECTORIES</span></span><br><span class="line">TARGET_INCLUDED_DIRECTORIES(/usr/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment">#指定生成的目标文件链接的头文件目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MESSAGE</span></span><br><span class="line"><span class="keyword">MESSAGE</span>(type<span class="string">&quot;$&#123;message&#125;&quot;</span>)</span><br><span class="line">type</span><br><span class="line"><span class="number">1</span>.STATUS 非重要信息</span><br><span class="line"><span class="number">2</span>.WARNING 警告信息，会继续执行</span><br><span class="line"><span class="number">3</span>.AUTHOR_WARNING 警告信息(dev)，会继续执行</span><br><span class="line"><span class="number">4</span>.SEND_ERROR 错误，继续执行，但是会跳过生辰步骤</span><br><span class="line"><span class="number">5</span>.FATAL_ERROR 错误，终止所有处理过程</span><br><span class="line"><span class="comment">#输出打印信息，如果不指定type则默认STATUS类型</span></span><br><span class="line"><span class="keyword">MESSAGE</span>(FATAL_ERROR <span class="string">&quot;FATAL error&quot;</span>)</span><br><span class="line"><span class="comment">#输出信息错误FATAL error，并且终止cmake执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">OPTION</span>(WITH_STATIC <span class="string">&quot;build with static libraries&quot;</span> <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment">#给用户一个选择，如果用户在编译的时候没有进行传参则使用默认值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(hello_static PROPERTIES OUTPUT_NAME <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">#设置hello_static库文件输出文件名为hello</span></span><br></pre></td></tr></table></figure><h3 id="4-cmake使用方法"><a href="#4-cmake使用方法" class="headerlink" title="4.cmake使用方法"></a>4.cmake使用方法</h3><p>在构建cmake项目的时候我们一般会在项目的根目录建立一个build目录，然后将生成的目标文件以及中间文件生成在build目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$PROJECT</span> &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build &amp;&amp; cmake .. &amp;&amp; make</span><br><span class="line"><span class="comment">#如果希望传递一些变量给cmake进行控制一些参数</span></span><br><span class="line">cmake -DCMAKE_C_COMPILER=clang</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cmake基本使用&quot;&gt;&lt;a href=&quot;#cmake基本使用&quot; class=&quot;headerlink&quot; title=&quot;cmake基本使用&quot;&gt;&lt;/a&gt;cmake基本使用&lt;/h1&gt;&lt;h3 id=&quot;1-cmake是什么&quot;&gt;&lt;a href=&quot;#1-cmake是什么&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux网络管理工具</title>
    <link href="https://bugprogram-git.github.io/2023/01/07/Linux%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>https://bugprogram-git.github.io/2023/01/07/Linux%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2023-01-07T01:42:55.000Z</published>
    <updated>2024-04-21T15:31:26.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux网络管理工具"><a href="#Linux网络管理工具" class="headerlink" title="Linux网络管理工具"></a>Linux网络管理工具</h1><h2 id="1-systemd-networkd"><a href="#1-systemd-networkd" class="headerlink" title="1.systemd-networkd"></a>1.systemd-networkd</h2><p>systemd自带的网络管理工具，一般仅用于有线网卡的网络配置或者是不需要验证的无线网络配置</p><h4 id="1-描述"><a href="#1-描述" class="headerlink" title="1.描述"></a>1.描述</h4><p>网络配置的操作由 <a href="http://www.jinbuguo.com/systemd/systemd-networkd.service.html#">systemd-networkd.service(8)</a> 执行。<br>注意，网络设备的Network文件必须以 <code>.network</code> 作为后缀名，否则将被忽略。 一旦与Network文件匹配的网卡出现，对应的Network文件就会立即生效。</p><p>Network文件分别位于： 系统网络目录(<code>/usr/lib/systemd/network</code>)、 运行时网络目录(<code>/run/systemd/network</code>)、 本机网络目录(<code>/etc/systemd/network</code>)。 所有的Network文件(无论位于哪个目录中)，统一按照文件名的字典顺序处理。 对于不同目录下的同名Network文件，仅以优先级最高的目录中的那一个为准。 具体说来就是：<code>/etc/</code> 的优先级最高、 <code>/run/</code> 的优先级居中、<code>/usr/lib/</code> 的优先级最低。 如果系统管理员想要屏蔽 <code>/usr/lib/</code> 目录中的某个Network文件， 那么最佳做法是在 <code>/etc/</code> 目录中创建一个指向 <code>/dev/null</code> 的同名符号链接， 即可彻底屏蔽 <code>/usr/lib/</code> 目录中的同名文件。</p><p>对于例如 <code>foo.network</code> 这样的Network文件，可以同时存在对应的 <code>foo.network.d/</code> 目录，当解析完Network文件之后，目录中所有以 “<code>.conf</code>“ 结尾的文件，都会被按照文件名的字典顺序，依次解析(相当于依次附加到Network文件的末尾)。 这样就可以方便的修改Network文件，或者为Network文件添加额外的设置，而无需修改Network文件本身。 注意，所有配置片段(“<code>.conf</code>“ 文件)必须包含明确的小节头(例如 “<code>[Match]</code>“ 之类)。</p><p>“<code>.d</code>“ 目录除了可以放置在 <code>/etc/systemd/network</code> 目录中， 还可以放置在 <code>/usr/lib/systemd/network</code> 与 <code>/run/systemd/network</code> 目录中。 所有 “<code>.d/</code>“ 目录中的配置片段都会覆盖Network文件的设置(无论Network文件位于哪个目录)。 虽然在优先级上，<code>/etc</code> 中的配置片段优先级最高、 <code>/run</code> 中的配置片段优先级居中、<code>/usr/lib</code> 中的配置片段优先级最低。 但是由于 <code>/run</code> 是临时目录，而 <code>/usr/lib</code> 仅供软件包使用， 所以在实践中，”<code>.d/</code>“ 目录仅会放置在 <code>/etc/systemd/network</code> 目录中。</p><p>注意，如果某个网络接口既没有配置静态IPv6地址、也没有启用DHCPv6或IPv6LL的话， 将会被视为禁用IPv6支持。同时，systemd 将会自动向 <code>/proc/sys/net/ipv6/conf/_`ifname`_/disable_ipv6</code> 中写入”1”，以彻底禁用此接口上的IPv6支持。</p><h4 id="2-配置选项"><a href="#2-配置选项" class="headerlink" title="2.配置选项"></a>2.配置选项</h4><h5 id="1-Match"><a href="#1-Match" class="headerlink" title="1.Match"></a>1.Match</h5><p>Network文件中的Match选项用于描述需要配置的网卡的指定信息，如果同一块网卡有多个network文件，则以第一个匹配的文件配置信息为准。</p><h6 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h6><p>网卡的名称(网卡内核中INTERFACE的属性值)<br>匹配网卡的 “<code>INTERFACE</code>“ 属性值(网卡的内核名称)。 </p><h6 id="MACAddress"><a href="#MACAddress" class="headerlink" title="MACAddress"></a>MACAddress</h6><p>匹配网卡的物理地址。接受一个空白符分隔的MAC地址列表。 每个MAC地址都以冒号(:)、连字符(-)、句点(.)分隔的十六进制数表示(参见下例)。 可以多次使用此选项，表示融合多个列表。设为空字符串表示清空先前已经设置的列表。<br>例子：MACAddress&#x3D;01:23:45:67:89:ab 00-11-22-33-44-55 AABB.CCDD.EEFF</p><h6 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h6><p>匹配网卡的 “<code>DRIVER</code>“ 属性值(网卡的驱动名称)。 接收一个空格分隔的匹配模式列表(使用shell风格的通配符)。 注意，如果网卡的 “<code>DRIVER</code>“ 属性不存在， 那么将使用 “<code>ethtool -i</code>“ 命令中输出的驱动名称。 可以在列表前加上”!”前缀 表示反转。</p><h6 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h6><p>匹配系统的主机名(hostname)或”machine ID”， 参见 <a href="http://www.jinbuguo.com/systemd/systemd.unit.html#">systemd.unit(5)</a> 中的 “<code>ConditionHost=</code>“ 选项。</p><h5 id="2-Link"><a href="#2-Link" class="headerlink" title="2.Link"></a>2.Link</h5><p>可在 “<code>[Link]</code>“ 小节中使用如下选项对网卡进行设置：</p><h6 id="MACAddress-1"><a href="#MACAddress-1" class="headerlink" title="MACAddress"></a>MACAddress</h6><p>设置网卡的物理地址(MAC地址)</p><h6 id="MTUBytes"><a href="#MTUBytes" class="headerlink" title="MTUBytes"></a>MTUBytes</h6><p>设置网卡的最大传输单元(MTU)。 可以使用 以1024为基准的 K, M, G 后缀。</p><p>注意，如果为网卡开启了IPv6支持， 那么设置任何小于 1280 的值都将被自动修正为 1280(IPv6的MTU最小值)。</p><h6 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h6><p>接受一个布尔值。表示是否开启 ARP(Address Resolution Protocol) 支持。 若未设置此选项，则使用内核的默认值。</p><p>当在单个底层物理网卡上创建多个虚拟 MACVLAN 或 VLAN 设备时， 禁用ARP就非常有用了。 因为此时的底层物理网卡仅用于汇聚流量， 而并不参与任何网络操作。</p><h6 id="Multicast"><a href="#Multicast" class="headerlink" title="Multicast"></a>Multicast</h6><p>接受一个布尔值。表示是否开启设备的多播标记。</p><h6 id="AllMulticast"><a href="#AllMulticast" class="headerlink" title="AllMulticast"></a>AllMulticast</h6><p>接受一个布尔值。表示驱动程序是否从网络提取所有多播数据包。 启用多播路由时将会发生这种情况。</p><h6 id="Unmanaged"><a href="#Unmanaged" class="headerlink" title="Unmanaged"></a>Unmanaged</h6><p>接受一个布尔值。 默认值为 “<code>no</code>“ 。 若设为 “<code>yes</code>“ 则表示不使用 systemd 管理此设备， 在效果上相当于没有匹配到此设备。</p><p>当你希望 使用 systemd 之外的其他程序来管理网络设备时， 可以使用此选项。</p><h6 id="RequiredForOnline"><a href="#RequiredForOnline" class="headerlink" title="RequiredForOnline"></a>RequiredForOnline</h6><p>接受一个布尔值。默认值 “<code>yes</code>“ 表示当 “<code>systemd-networkd-wait-online</code>“ 检查网络是否在线时， 此网络必须在线(否则一直等到它在线)。 设为 “<code>no</code>“ 表示 忽略此网络(不检查此网络的状态)。</p><p>无论此选项如何设置，都会正常启动此网络。 只不过当 “<code>RequiredForOnline=no</code>“ 时， 如果此网络不在线(例如未能从 DHCP 获取IP地址、或者网线被拔出等原因)， 那么 “<code>systemd-networkd-wait-online</code>“ 将会自动跳过它。</p><h5 id="3-Network"><a href="#3-Network" class="headerlink" title="3.Network"></a>3.Network</h5><p>可在 “<code>[Network]</code>“ 小节中使用如下选项对网卡进行设置：</p><h6 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h6><p>对网卡的 描述</p><h6 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h6><p>DHCPv4&#x2F;DHCPv6 客户端支持。可以设为 “<code>yes</code>“, “<code>no</code>“, “<code>ipv4</code>“, “<code>ipv6</code>“ 之一。默认值为 “<code>no</code>“ 。</p><p>注意，当 “<code>IPv6AcceptRA=yes</code>“ 时， 无论此选项如何设置，DHCPv6 都将被无条件的启用。 若明确开启了 DHCPv6 支持， 那么无论在此连接上是否存在路由器、也无论路由器传递了什么样的标记(flag)， 都会无条件的启动 DHCPv6 客户端。参见下文的 “<code>IPv6AcceptRA=</code>“ 选项。</p><p>注意，默认情况下， DHCP服务器分配的域名并不用于名字解析。 参见下面的 <code>UseDomains=</code> 选项。</p><p>参见下面的 “<code>[DHCP]</code>“ 小节， 以了解更多DHCP客户端配置选项。</p><h6 id="DHCPServer"><a href="#DHCPServer" class="headerlink" title="DHCPServer"></a>DHCPServer</h6><p>接受一个布尔值。表示是否在此网络上启动内置的 DHCPv4 服务器。 默认值为 “<code>no</code>“ 。 进一步的设置参见下面的 “<code>[DHCPServer]</code>“ 小节。</p><h6 id="LinkLocalAddressing"><a href="#LinkLocalAddressing" class="headerlink" title="LinkLocalAddressing"></a>LinkLocalAddressing</h6><p>链路本地地址自动配置。可设为 “<code>yes</code>“, “<code>no</code>“, “<code>ipv4</code>“, “<code>ipv6</code>“ 之一。 默认值为 “<code>ipv6</code>“</p><h6 id="IPv4LLRoute"><a href="#IPv4LLRoute" class="headerlink" title="IPv4LLRoute"></a>IPv4LLRoute</h6><p>接受一个布尔值。表示是否为 non-IPv4LL 主机与 IPv4LL-only 主机之间的通信提供路由支持。默认值是 no 。 [译者注]”IPv4LL”(IPv4 Link-Local)又称为”<a href="http://www.zeroconf.org/">ZEROCONF</a>“， 可用于在没有DHCP服务器的网络中自动配置IP地址。</p><h6 id="IPv6Token"><a href="#IPv6Token" class="headerlink" title="IPv6Token"></a>IPv6Token</h6><p>一个前64位为空的IPv6地址。 用于设置该连接的 SLAAC IPv6 地址的64位接口部分。 注意，该值仅用于 SLAAC 而不是用于 DHCPv6 (即使 IPv6 Router Advertisement 明确要求 DHCP)。 默认值为自动生成。</p><h6 id="LLMNR"><a href="#LLMNR" class="headerlink" title="LLMNR"></a>LLMNR</h6><p>接受一个布尔值。默认值 yes 表示支持 本地链路多播名称解析(<a href="https://tools.ietf.org/html/rfc4795">Link-Local Multicast Name Resolution</a>)，而 no 则表示关闭。 也可以设为 “<code>resolve</code>“ 表示仅支持解析，但不支持主机注册与宣布。 <a href="http://www.jinbuguo.com/systemd/systemd-resolved.service.html#">systemd-resolved.service(8)</a> 会读取此选项的值。 [译者注]”LLMNR”(mDNS)可用于在没有DNS的局域网内自动发现(通过组播)本地网段上的主机。</p><h6 id="MulticastDNS"><a href="#MulticastDNS" class="headerlink" title="MulticastDNS"></a>MulticastDNS</h6><p>接受一个布尔值。设为 yes 表示支持 组播DNS(<a href="https://tools.ietf.org/html/rfc6762">Multicast DNS</a>)，而默认值 no 则表示关闭。 也可以设为 “<code>resolve</code>“ 表示仅支持解析，但不支持主机或服务注册与宣布。 <a href="http://www.jinbuguo.com/systemd/systemd-resolved.service.html#">systemd-resolved.service(8)</a> 会读取此选项的值。 [译者注]”mDNS”(multicast DNS)可用于在没有DNS的局域网内自动发现(通过组播)本地网段上的主机&#x2F;服务(例如FTP)。</p><h6 id="DNSOverTLS"><a href="#DNSOverTLS" class="headerlink" title="DNSOverTLS"></a>DNSOverTLS</h6><p>接受一个布尔值或特殊值 “<code>opportunistic</code>“ 。 设为 yes 表示为此连接开启 <a href="https://tools.ietf.org/html/rfc7858">DNS-over-TLS</a> 支持。设为 “<code>opportunistic</code>“ 表示优先使用 DNS-over-TLS 但也向下兼容不支持 DNS-over-TLS 的DNS服务器。 此选项实际上是针对每个网口覆盖了 <a href="http://www.jinbuguo.com/systemd/resolved.conf.html#">resolved.conf(5)</a>‘s 中的全局 <code>DNSOverTLS=</code> 设置。默认值为 no 。 此选项将被 <a href="http://www.jinbuguo.com/systemd/systemd-resolved.service.html#">systemd-resolved.service(8)</a> 读取。</p><h6 id="DNSSEC"><a href="#DNSSEC" class="headerlink" title="DNSSEC"></a>DNSSEC</h6><p>接受一个布尔值或特殊值 “<code>allow-downgrade</code>“ 。设为 yes 表示支持 <a href="https://tools.ietf.org/html/rfc4033">DNSSEC</a> ，而默认值 no 则表示关闭。 也可以设为 “<code>allow-downgrade</code>“ 表示允许降级到普通的DNS协议， 以兼容不具备DNSSEC的网络环境。 <a href="http://www.jinbuguo.com/systemd/systemd-resolved.service.html#">systemd-resolved.service(8)</a> 会读取此选项的值。 此选项实际上是针对每个网口覆盖了 <a href="http://www.jinbuguo.com/systemd/resolved.conf.html#">resolved.conf(5)</a> 中的全局 <code>DNSSEC=</code> 设置。</p><h6 id="DNSSECNegativeTrustAnchors"><a href="#DNSSECNegativeTrustAnchors" class="headerlink" title="DNSSECNegativeTrustAnchors"></a>DNSSECNegativeTrustAnchors</h6><p>可设为一个 空格分隔的域名列表。 当通过该网口的DNS服务器查询列表中的域名(含子域名)时， 无需验证应答的正确性。 常用于 禁用某些私有域名的DNSSEC验证。 因为这些私有域名 无法在互联网DNS服务器上进行验证。 默认值为空。 <a href="http://www.jinbuguo.com/systemd/systemd-resolved.service.html#">systemd-resolved.service(8)</a> 会读取此选项的值。</p><h6 id="LLDP"><a href="#LLDP" class="headerlink" title="LLDP"></a>LLDP</h6><p>LLDP是一个二层协议，使得接入网络的一台设备可以将其主要的能力、管理地址、设备标识、接口标识等信息 发送给接入同一个局域网的其他设备。通常只有专业的路由器才会支持LLDP协议。 若设为 yes 则表示接收所有以太网LLDP(链路层发现协议)包，并且维护一个记录了所有LLDP邻居的数据库。 而 no 则表示彻底禁用LLDP支持。 默认值 “<code>routers-only</code>“ 表示仅收集各种路由器LLDP数据， 而忽略所有其他设备的LLDP数据(例如”电话”之类)。 可以用 <a href="http://www.jinbuguo.com/systemd/networkctl.html#">networkctl(1)</a> 查询所有收集到的邻居数据。LLDP仅可用于以太网。 下面的 <code>EmitLLDP=</code> 可用于接收本机发出的LLDP包。</p><h6 id="EmitLLDP"><a href="#EmitLLDP" class="headerlink" title="EmitLLDP"></a>EmitLLDP</h6><p>如何发送以太网链路层发现协议(LLDP)数据包。 可以设为一个布尔值或者特殊值 “<code>nearest-bridge</code>“, “<code>non-tpmr-bridge</code>“, “<code>customer-bridge</code>“ 之一。 默认值 no 表示不发送任何LLDP数据包。 no 之外的其他值都表示周期性的发送包含本机配置信息的LLDP数据包。 LLDP数据包中包含了本机的如下信息：主机名(hostname)、machine ID (参见 <a href="http://www.jinbuguo.com/systemd/machine-id.html#">machine-id(5)</a>)、 本地网络接口的名称、 pretty 主机名(参见 <a href="http://www.jinbuguo.com/systemd/machine-info.html#">machine-info(5)</a>)。 LLDP仅可用于以太网链路。 由于LLDP数据包中包含了精确标识主机的敏感信息，所以切勿在不可信的网络环境中使用。 开启此选项之后，其他系统就可以通过本机发送的LLDP数据包，辨别其所连接的本机网络接口究竟是哪一个。 三个特殊值控制着如何传输LLDP数据包： “<code>nearest-bridge</code>“ 表示仅允许传输到最近连接的桥，这是最严苛的传输方式； “<code>non-tpmr-bridge</code>“ 表示仅允许跨越 Two-Port MAC 传输，但是不允许传输到另外的桥； “<code>customer-bridge</code>“ 表示一直传输到到达一个”customer bridge”(详见 <a href="https://standards.ieee.org/findstds/standard/802.1AB-2016.html">IEEE 802.1AB-2016</a>)。 设为 yes 与设为 “<code>nearest-bridge</code>“ 等价。 参见上文的 <code>LLDP=</code> 选项 以了解更多有关LLDP的含义。</p><h6 id="BindCarrier"><a href="#BindCarrier" class="headerlink" title="BindCarrier"></a>BindCarrier</h6><p>可设为一个网口列表，用于控制当前网口的行为： (1)当列表中的所有网口都处于停用状态(down)的时候，该网口也会被停用。 (2)当列表中的某个网口被启用的时候，该网口也会被启用。</p><h6 id="Address"><a href="#Address" class="headerlink" title="Address"></a>Address</h6><p>一个符合 <a href="http://man7.org/linux/man-pages/man3/inet_pton.3.html">inet_pton(3)</a> 格式的 静态IPv4或IPv6地址及掩码位数 (用 “<code>/</code>“ 字符分隔)。 当 [Address] 小节(见下文)中只含有 <code>Address=</code> 时， 此选项相当于是 [Address] 小节的速记。 可以多次使用此选项以指定多个IP地址。</p><p>如果设置的地址是”0.0.0.0”(IPv4) 或 “[::]”(IPv6)， 那么将首先检查所有当前已配置的网络接口以及所有网络配置文件， 然后按照所需地址段的大小， 自动从系统的可用地址池中分配一个新地址段， 并确保不发生任何地址段冲突。 系统默认的IPv4可用地址池如下： 192.168.0.0&#x2F;16, 172.16.0.0&#x2F;12, 10.0.0.0&#x2F;8 ； 系统默认的IPv6可用地址池如下：fc00::&#x2F;7 。 此选项主要用于管理大量动态创建的、 拥有相同网络配置的、需要自动分配地址段的 网络接口。</p><h6 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h6><p>一个 符合 <a href="http://man7.org/linux/man-pages/man3/inet_pton.3.html">inet_pton(3)</a> 格式的网关地址。可以多次使用此选项以指定多个网关。 当 [Route] 小节(见下文)中只含有 <code>Gateway=</code> 时， 此选项相当于是 [Route] 小节的速记。</p><h6 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h6><p>一个 符合 <a href="http://man7.org/linux/man-pages/man3/inet_pton.3.html">inet_pton(3)</a> 格式的DNS服务器地址。可以多次使用此选项以指定多个DNS服务器。 <a href="http://www.jinbuguo.com/systemd/systemd-resolved.service.html#">systemd-resolved.service(8)</a> 会读取此选项的值。</p><h6 id="Domains"><a href="#Domains" class="headerlink" title="Domains"></a>Domains</h6><p>接受一个应该使用此连接的DNS服务器解析的域列表， 列表中的每一项都必须是一个域(可以带有可选的 “<code>~</code>“ 前缀)。 带有 “<code>~</code>“ 前缀的域被称为”路由域”，而不带前缀的域则被称为”搜索域”。 在将单标签主机名(不含”.”的主机名)扩展为FQDN(全限定域名)时，将会首先把”搜索域”用作搜索后缀。 当在此连接上解析一个单标签主机名时，列表中的每一个搜索域都将被依次添加为后缀， 以拼接成一个可用于解析的全限定域名， 直到某一个能够被解析成功为止。</p><p>列表中的域(包括搜索域与路由域)都可以用于路由DNS查询请求： 对于那些后缀位于此列表中的主机名(如果存在”搜索域”的话，那么还包括单标签主机名)的DNS查询请求，将会被路由到此连接的DNS服务器上。 对于同时承载多个域的主机来说，如果希望在不同的网络接口上拥有不同的私有DNS区域， 那么可以使用此处的域名路由逻辑。</p><p>特殊值 “<code>~.</code>“ (前面的波浪号表示这是一个”路由域”，后面的点表示根域(也就是所有域的后缀))拥有特殊的含义， 它表示将所有未能匹配其他域名路由规则的DNS请求，路由到此连接的DNS服务器上。 利用这个特殊值， 可以设置一组默认的DNS服务器。</p><p><a href="http://www.jinbuguo.com/systemd/systemd-resolved.service.html#">systemd-resolved.service(8)</a> 会读取此选项的值。 “搜索域”对应于 <a href="http://man7.org/linux/man-pages/man5/resolv.conf.5.html">resolv.conf(5)</a> 中的 <code>domain</code> 与 <code>search</code> 项。 在传统的 glibc API 中 无法找到与此处描述的域名路由逻辑对应的功能。</p><h6 id="DNSDefaultRoute"><a href="#DNSDefaultRoute" class="headerlink" title="DNSDefaultRoute"></a>DNSDefaultRoute</h6><p>接受一个布尔值。设为 yes 表示为此连接配置的 DNS 服务器， 将被用于解析不匹配任何其他连接 <code>Domains=</code> 设置的域名。 设为 no 表示为此连接配置的 DNS 服务器，仅用于解析匹配此链接上至少一个 <code>Domains=</code> 的域名(也就是完全不用于解析上述域名)。 若未设置此选项，则默认使用自动模式： 如果此连接没有配置任何”路由域”，那么，为此连接配置的 DNS 服务器， 将用于解析不匹配任何其他连接 <code>Domains=</code> 的域名。</p><h6 id="NTP"><a href="#NTP" class="headerlink" title="NTP"></a>NTP</h6><p>一个时间服务器(NTP)地址。可以多次使用此选项以指定多个对时服务器。 <a href="http://www.jinbuguo.com/systemd/systemd-timesyncd.service.html#">systemd-timesyncd.service(8)</a> 会读取此选项的值。</p><h6 id="IPForward"><a href="#IPForward" class="headerlink" title="IPForward"></a>IPForward</h6><p>控制IP转发功能 (将一个网口进入的IP包根据路由表转发到另一个网口)： 默认值 “<code>no</code>“ 表示关闭转发功能； “<code>yes</code>“ 表示开启转发功能； “<code>ipv4</code>“ 表示仅开启IPv4转发； “<code>ipv6</code>“ 表示仅开启IPv6转发； 此选项实际上是设置了 <code>net.ipv4.ip_forward</code>, <code>net.ipv6.conf.all.forwarding</code> 两个 sysctl 项的值(详见 <a href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt">ip-sysctl.txt</a> 文档)。默认值为 “<code>no</code>“</p><p>注意：只有默认值 “<code>no</code>“ 是局部设置，其他三个值都是全局设置。 具体的含义是指： 即使只有一个网络接口开启了IP转发功能(“<code>yes</code>“ 或 “<code>ipv4</code>“ 或 “<code>ipv6</code>“)，也表示在全局开启IP转发功能， 而且即便随后再明确的将此选项设为 “<code>no</code>“ 也无济于事，IP转发功能依然会在全局范围内保持开启。 换句话说，IP转发功能一旦开启便是全局开启，并且不允许随后再关闭，即使针对单个网络接口关闭也不行。</p><p>如果只想在两个特定的网络接口之间进行转发，请勿使用此选项， 而是应该使用防火墙规则(iptables)。</p><h6 id="IPMasquerade"><a href="#IPMasquerade" class="headerlink" title="IPMasquerade"></a>IPMasquerade</h6><p>若设为 “<code>yes</code>“ 则开启IP地址伪装功能。 它与SNAT(源地址转换技术)的不同之处在于能够自动获取连接的当前ip地址来做转换。 若设为 “<code>yes</code>“ 则隐含了 <code>IPForward=ipv4</code> 设置。 默认值是 “<code>no</code>“</p><h6 id="IPv6PrivacyExtensions"><a href="#IPv6PrivacyExtensions" class="headerlink" title="IPv6PrivacyExtensions"></a>IPv6PrivacyExtensions</h6><p>配置IPv6 无状态临时地址(<a href="https://tools.ietf.org/html/rfc4941">RFC 4941</a>) 与IPv6隐私扩展。 若设为 “<code>yes</code>“ 则表示开启IPv6隐私扩展并使用临时的私有地址取代公共地址。 若设为 “<code>prefer-public</code>“ 则表示开启IPv6隐私扩展(若失败则关闭IPv6隐私扩展)， 但使用公共地址。 若设为 “<code>kernel</code>“ 则表示不改变内核的现有设置。 默认值 “<code>no</code>“ 表示彻底关闭。</p><h6 id="IPv6AcceptRA"><a href="#IPv6AcceptRA" class="headerlink" title="IPv6AcceptRA"></a>IPv6AcceptRA</h6><p>接受一个布尔值。表示是否在此连接上接收IPv6路由通告消息(Router Advertisement)(IPv6的邻居发现协议的一部分)。 设为 yes 表示接收，设为 no 表示不接收(与本地转发的状态无关)。若未设置此选项，则使用内核的默认值： 当本地转发功能被禁用时，此选项的值为”yes”(接收路由通告)；当本地转发功能被开启时，此选项的值为”no”(不接收路由通告)。 如果此选项的值为”yes”(接收路由通告)，那么 DHCPv6 客户端将在两种情况下被启动： (1)传递了相关标志(flag)；(2)在此连接上未发现路由器。</p><p>若想进一步详细配置 IPv6 RA 支持，可以参见下面的 “<code>[IPv6AcceptRA]</code>“ 小节。</p><p>参见内核的 <a href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt">ip-sysctl.txt</a> 文档， 并阅读对 “<code>accept_ra</code>“ 属性的解释，不过要注意的是将此选项设为 <code>1</code> 相当于 将 “<code>accept_ra</code>“ 设为 <code>2</code> 。</p><h6 id="IPv6DuplicateAddressDetection"><a href="#IPv6DuplicateAddressDetection" class="headerlink" title="IPv6DuplicateAddressDetection"></a>IPv6DuplicateAddressDetection</h6><p>设置要发送的 IPv6 DAD(Duplicate Address Detection) 提示数量。 若未设置此选项，则使用内核的默认值。</p><h6 id="IPv6HopLimit"><a href="#IPv6HopLimit" class="headerlink" title="IPv6HopLimit"></a>IPv6HopLimit</h6><p>设置 IPv6 的”Hop Limit”(类似于 IPv4 TTL)值。 每经过一个路由器，该值都会减一， 当减到零时，此包将被丢弃。 若未设置此选项，则使用内核的默认值。</p><h6 id="IPv4ProxyARP"><a href="#IPv4ProxyARP" class="headerlink" title="IPv4ProxyARP"></a>IPv4ProxyARP</h6><p>接受一个布尔值， 表示是否为 IPv4 开启”代理ARP”(<a href="https://tools.ietf.org/html/rfc1027">RFC1027</a>)支持。 “代理ARP”就是通过一个主机(通常是路由器)来作为指定的设备对其他设备的ARP请求作出应答。 一般用于没有配置默认网关和路由策略的网络中。 若未设置此选项，则使用内核的默认值。</p><h6 id="IPv6ProxyNDP"><a href="#IPv6ProxyNDP" class="headerlink" title="IPv6ProxyNDP"></a>IPv6ProxyNDP</h6><p>接受一个布尔值，表示是否支持代理邻居发现协议(Proxy Neighbor Discovery Protocol)。 如果相互通信的两个端点并不直接相连，但是互相又都期望彼此位于同一个直接相连物理连接上时， 可以使用代理邻居发现协议(Proxy Neighbor Discovery Protocol)， 将双方的IPv6地址都映射到”NDP代理”的MAC地址，让”NDP代理”转发两个端点之间的流量， 从而使相互通信的双方看起来就像是在同一个物理连接上直接通信一样。 与 IPv4 的 proxy ARP 技术不同之处在于 IPv6 的NDP代理不是全局开启的， 它仅为”IPv6 neighbor proxy table”中的地址发送邻居宣告消息。 可以使用 <strong>ip -6 neighbour show proxy</strong> 命令显示”IPv6 neighbor proxy table”。 systemd-networkd 将会根据此选项的开关，来控制该接口的 proxy_ndp 开关。 若未设置此选项，则使用内核的默认值。</p><h6 id="IPv6ProxyNDPAddress"><a href="#IPv6ProxyNDPAddress" class="headerlink" title="IPv6ProxyNDPAddress"></a>IPv6ProxyNDPAddress</h6><p>用于代理邻居宣告(Neighbor Advertisement)消息的 IPv6 地址(NDP代理)。 可以多次使用此选项以设置多个代理。对于每个已配置的接口， systemd-networkd 将会把此处设置的代理添加到内核的 IPv6 neighbor proxy table 中。 虽然设置此选项相当于隐含的设置了 <code>IPv6ProxyNDP=yes</code> ， 但是如果明确的设置了 <code>IPv6ProxyNDP=no</code> ，那么此选项将被忽略。若未设置此选项，则使用内核的默认值。</p><h6 id="IPv6PrefixDelegation"><a href="#IPv6PrefixDelegation" class="headerlink" title="IPv6PrefixDelegation"></a>IPv6PrefixDelegation</h6><p>是否允许在此连接上发送IPv6路由通告消息(Router Advertisement)(IPv6的邻居发现协议的一部分)。 设为 “<code>static</code>“ 表示按照 “<code>[IPv6PrefixDelegation]</code>“ 与任意 “<code>[IPv6Prefix]</code>“ 小节中的定义分配前缀。 设为 “<code>dhcpv6</code>“ 表示使用为另一个连接配置的 DHCPv6 客户端以及在 “<code>[IPv6PrefixDelegation]</code>“ 小节中配置的任意值请求前缀，同时忽略所以静态前缀配置小节。 设为 “<code>yes</code>“ 表示既使用静态配置也使用 DHCPv6 。 设为 “<code>no</code>“ 表示完全关闭 IPv6 前缀委派(Prefix Delegation)。 默认值为 “<code>no</code>“ 。详见 “<code>[IPv6PrefixDelegation]</code>“ 与 “<code>[IPv6Prefix]</code>“ 小节以了解更多配置选项。</p><h6 id="IPv6MTUBytes"><a href="#IPv6MTUBytes" class="headerlink" title="IPv6MTUBytes"></a>IPv6MTUBytes</h6><p>设置 IPv6 最大传输单元(MTU)。 必须设为一个大于等于 1280 字节的整数值。若未设置此选项，则使用内核的默认值。</p><h6 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h6><p>将该连接添加到指定名称的Bridge(网桥)中。参见 <a href="http://www.jinbuguo.com/systemd/systemd.netdev.html#">systemd.netdev(5)</a> 手册。</p><h6 id="Bond"><a href="#Bond" class="headerlink" title="Bond"></a>Bond</h6><p>将该连接添加到指定名称的Bond(多网卡绑定)中。参见 <a href="http://www.jinbuguo.com/systemd/systemd.netdev.html#">systemd.netdev(5)</a> 手册。</p><h6 id="VRF"><a href="#VRF" class="headerlink" title="VRF"></a>VRF</h6><p>将该连接添加到指定名称的VRF(VPN路由与转发表)中。参见 <a href="http://www.jinbuguo.com/systemd/systemd.netdev.html#">systemd.netdev(5)</a> 手册。</p><h6 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h6><p>要在此连接上创建的VLAN(虚拟局域网)名称。参见 <a href="http://www.jinbuguo.com/systemd/systemd.netdev.html#">systemd.netdev(5)</a> 手册。 可以多次使用此选项。</p><h6 id="IPVLAN"><a href="#IPVLAN" class="headerlink" title="IPVLAN"></a>IPVLAN</h6><p>要在该连接上创建的 IPVLAN 的名称。详见 <a href="http://www.jinbuguo.com/systemd/systemd.netdev.html#">systemd.netdev(5)</a> 手册。 可以多次使用此选项。</p><h6 id="MACVLAN"><a href="#MACVLAN" class="headerlink" title="MACVLAN"></a>MACVLAN</h6><p>要在此连接上创建的MACVLAN(基于MAC地址划分的虚拟局域网)名称。参见 <a href="http://www.jinbuguo.com/systemd/systemd.netdev.html#">systemd.netdev(5)</a> 手册。 可以多次使用此选项。</p><h6 id="VXLAN"><a href="#VXLAN" class="headerlink" title="VXLAN"></a>VXLAN</h6><p>要在此连接上创建的VXLAN(虚拟可扩展局域网)名称。参见 <a href="http://www.jinbuguo.com/systemd/systemd.netdev.html#">systemd.netdev(5)</a> 手册。 可以多次使用此选项。</p><h6 id="Tunnel"><a href="#Tunnel" class="headerlink" title="Tunnel"></a>Tunnel</h6><p>要在此连接上创建的Tunnel(隧道)名称。参见 <a href="http://www.jinbuguo.com/systemd/systemd.netdev.html#">systemd.netdev(5)</a> 手册。 可以多次使用此选项。</p><h6 id="ActiveSlave"><a href="#ActiveSlave" class="headerlink" title="ActiveSlave"></a>ActiveSlave</h6><p>接受一个布尔值，设为 yes 表示该设备是等待激活的 slave 设备(必须处于 up 状态)。 此选项仅适用于 “<code>active-backup</code>“, “<code>balance-alb</code>“, “<code>balance-tlb</code>“ 模式。默认值为 no 。 此选项在效果上相当于设置 bond 模块的 active_slave 属性。</p><h6 id="PrimarySlave"><a href="#PrimarySlave" class="headerlink" title="PrimarySlave"></a>PrimarySlave</h6><p>接受一个布尔值，设为 yes 表示该设备是首选的 slave 设备， 也就是一旦该设备可用，就立即将其激活， 并且仅在该设备确实已经掉线的情况下才会使用其他 slave 设备。 在希望尽可能优先使用某个 slave 的场合(比如某个 slave 的带宽更高)， 可以使用此选项。 此选项仅适用于 “<code>active-backup</code>“, “<code>balance-alb</code>“, “<code>balance-tlb</code>“ 模式。默认值为 no 。此选项在效果上相当于设置 bond 模块的 primary 属性。</p><h6 id="ConfigureWithoutCarrier"><a href="#ConfigureWithoutCarrier" class="headerlink" title="ConfigureWithoutCarrier"></a>ConfigureWithoutCarrier</h6><p>接受一个布尔值，设为 yes 表示即使没有实际的载体，也允许 networkd 配置该连接。 默认值为 no 。</p><h5 id="4-Address"><a href="#4-Address" class="headerlink" title="4.Address"></a>4.Address</h5><p>可以使用多个 “<code>[Address]</code>“ 小节来配置多个IP地址。 可在 “<code>[Address]</code>“ 小节中使用的选项如下：</p><h6 id="Address-1"><a href="#Address-1" class="headerlink" title="Address"></a>Address</h6><p>含义与 “<code>[Network]</code>“ 小节中同名选项相同。 这是一个必须设置的选项。</p><h6 id="Peer"><a href="#Peer" class="headerlink" title="Peer"></a>Peer</h6><p>一个用于点对点网络中的IP地址， 格式与 “<code>Address</code>“ 相同。</p><h6 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h6><p>一个 符合 <a href="http://man7.org/linux/man-pages/man3/inet_pton.3.html">inet_pton(3)</a> 格式的广播地址，仅用于IPv4连接。 若未设置，则自动从 “<code>Address</code>“ 中提取。</p><h6 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h6><p>一个地址标签</p><h6 id="PreferredLifetime"><a href="#PreferredLifetime" class="headerlink" title="PreferredLifetime"></a>PreferredLifetime</h6><p>设置IP地址的默认有效期。 默认值 “<code>forever</code>“&#x2F;“<code>infinity</code>“ 表示”永不过期”，也就是本小节所设置的IP地址永远有效。 设为 “<code>0</code>“ 表示本小节所设置的IP地址”立即过期”， 除非被明确要求，否则不会被使用。 这种IP地址仅用于 某些需要明确使用该地址的特殊应用程序。</p><h6 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h6><p>IP地址的作用域。可设为 0～255 之间的整数或特殊值 “<code>global</code>“(可用于任何地方), “<code>link</code>“(仅用于局域网), “<code>host</code>“(仅限于主机内通信) 之一。 默认值是 “<code>global</code>“ 。</p><h6 id="HomeAddress"><a href="#HomeAddress" class="headerlink" title="HomeAddress"></a>HomeAddress</h6><p>接受一个布尔值。设为 yes 表示将该地址视为 <a href="https://tools.ietf.org/html/rfc6275">RFC 6275</a> 中定义的”home address”。 仅适用于 IPv6 。默认值是 no</p><h6 id="DuplicateAddressDetection"><a href="#DuplicateAddressDetection" class="headerlink" title="DuplicateAddressDetection"></a>DuplicateAddressDetection</h6><p>接受一个布尔值。设为 yes 表示在添加该地址时执行 <a href="https://tools.ietf.org/html/rfc4862">RFC 4862</a> 中描述的重复地址检测动作。 仅适用于 IPv6 。默认值是 no</p><h6 id="ManageTemporaryAddress"><a href="#ManageTemporaryAddress" class="headerlink" title="ManageTemporaryAddress"></a>ManageTemporaryAddress</h6><p>接受一个布尔值。设为 yes 表示内核将按照 <a href="https://tools.ietf.org/html/rfc3041">RFC 3041</a> 隐私扩展规范，管理根据 <code>Address=</code> 的值作为模版而创建的临时地址。 要想让此设置有效，必须使用 sysctl 将 use_tempaddr 属性设为大于零的值。 给定地址的前缀长度必须是 64 。 开启此选项之后，就像激活了无状态自动配置一样，将允许在手动配置的网络上使用隐私扩展。 仅适用于 IPv6 。默认值是 no</p><h6 id="PrefixRoute"><a href="#PrefixRoute" class="headerlink" title="PrefixRoute"></a>PrefixRoute</h6><p>接受一个布尔值。 当添加或修改一个 IPv6 地址时，用户空间程序需要一个禁止添加前缀路由的指示。 这与例如 IFA_F_MANAGERTEMPADDR 等标记一起使用时相关，此时用户空间程序会创建根据 autoconf 生成的地址， 但是取决于不同的环节，有可能不应该为此前缀添加路由。默认值是 no</p><h6 id="AutoJoin"><a href="#AutoJoin" class="headerlink" title="AutoJoin"></a>AutoJoin</h6><p>接受一个布尔值。因为交换机不会复制不为多播地址报告IGMP的端口上的多播包， 所以如果有一个能够感知IGMP的以太网交换机， 那么将无法通过 <strong>ip maddr</strong> 命令在以太网层次上加入到多播组中去。 通过 <strong>ip link add vxlan</strong> 命令创建的 vxlan 设备或者通过 systemd-networkd 创建的 vxlan 虚拟网络设备， 都开启了必要的选项以允许它们加入到多播组中去。 通过使用 “<code>autojoin</code>“ 选项扩展 <strong>ip maddr</strong> 命令， 可以让 openvswitch (OVS) vxlan 获得类似的功能， 同时仍然保留其他需要接受多播流量的隧道机制。 默认值是 “<code>no</code>“</p><h5 id="5-Neighbor"><a href="#5-Neighbor" class="headerlink" title="5.Neighbor"></a>5.Neighbor</h5><p>“<code>[Neighbor]</code>“ 小节 用于在邻居表(IPv6)或ARP表(IPv4)中， 为给定的MAC地址添加一个永久静态项。 可以使用多个 “<code>[Neighbor]</code>“ 小节来配置多个静态邻居。 可以在 “<code>[Neighbor]</code>“ 小节中使用的选项如下：</p><h6 id="Address-2"><a href="#Address-2" class="headerlink" title="Address"></a>Address</h6><p>邻居的IP地址</p><h6 id="MACAddress-2"><a href="#MACAddress-2" class="headerlink" title="MACAddress"></a>MACAddress</h6><p>邻居的MAC地址</p><h5 id="6-IPv6AddressLabel"><a href="#6-IPv6AddressLabel" class="headerlink" title="6.IPv6AddressLabel"></a>6.IPv6AddressLabel</h5><p>IPv6地址标签用于地址选择(参见 <a href="https://tools.ietf.org/html/rfc3484">RFC 3484</a>)。 内核仅存储标签自身，而标签的优先级则由用户空间程序管理。 可以使用多个 “<code>[IPv6AddressLabel]</code>“ 小节来配置多个IPv6地址标签。 可在 “<code>[IPv6AddressLabel]</code>“ 小节中使用的选项如下：</p><h6 id="Label-1"><a href="#Label-1" class="headerlink" title="Label"></a>Label</h6><p>用于前缀(一个无符号整数)的标签，必须设为 0 到 4294967294 之间的一个整数。 0xffffffff 是预留值，禁止使用。这是一个必须设置的选项。</p><h6 id="Prefix"><a href="#Prefix" class="headerlink" title="Prefix"></a>Prefix</h6><p>IPv6前缀是指一个带有前缀长度的地址(以 “<code>/</code>“ 字符分隔)。 这是一个必须设置的选项。</p><h5 id="7-RoutingPolicyRule"><a href="#7-RoutingPolicyRule" class="headerlink" title="7.RoutingPolicyRule"></a>7.RoutingPolicyRule</h5><p>可以使用多个 “<code>[RoutingPolicyRule]</code>“ 小节来配置多个路由策略。 可在 “<code>[RoutingPolicyRule]</code>“ 小节中使用的选项如下：</p><h6 id="TypeOfService"><a href="#TypeOfService" class="headerlink" title="TypeOfService"></a>TypeOfService</h6><p>指定要匹配的服务类型。可设为一个 0～255 之间的整数。</p><h6 id="From"><a href="#From" class="headerlink" title="From"></a>From</h6><p>指定要匹配的源地址前缀。可以加上”&#x2F;前缀长度”后缀。</p><h6 id="To"><a href="#To" class="headerlink" title="To"></a>To</h6><p>指定要匹配的目的地址前缀。可以加上”&#x2F;前缀长度”后缀。</p><h6 id="FirewallMark"><a href="#FirewallMark" class="headerlink" title="FirewallMark"></a>FirewallMark</h6><p>指定要匹配的 iptables 防火墙标签值(一个介于 1～4294967295 之间的整数)</p><h6 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h6><p>指定在规则选择器匹配成功时， 要查找的路由表ID(一个介于 1～4294967295 之间的整数)。</p><h6 id="Priority"><a href="#Priority" class="headerlink" title="Priority"></a>Priority</h6><p>指定该规则的优先级，必须设为一个无符号整数。 数值越小优先级越高，也就是多条规则按照各自优先级数值从小到大的顺序处理。</p><h6 id="IncomingInterface"><a href="#IncomingInterface" class="headerlink" title="IncomingInterface"></a>IncomingInterface</h6><p>指定要匹配的流入设备。如果设为回环接口，那么表示该规则仅匹配本机产生的数据包。</p><h6 id="OutgoingInterface"><a href="#OutgoingInterface" class="headerlink" title="OutgoingInterface"></a>OutgoingInterface</h6><p>指定要匹配的流出设备。流出接口仅用于源自绑定到某个设备的本地套接字的数据包。</p><h6 id="SourcePort"><a href="#SourcePort" class="headerlink" title="SourcePort"></a>SourcePort</h6><p>指定要在转发信息库(FIB)规则中匹配的源IP端口或源IP端口范围。 可以通过”低端口-高端口”格式(使用连字符)来指定端口范围。默认未设置。</p><h6 id="DestinationPort"><a href="#DestinationPort" class="headerlink" title="DestinationPort"></a>DestinationPort</h6><p>指定要在转发信息库(FIB)规则中匹配的目标IP端口或目标IP端口范围。 可以通过”低端口-高端口”格式(使用连字符)来指定端口范围。默认未设置。</p><h6 id="IPProtocol"><a href="#IPProtocol" class="headerlink" title="IPProtocol"></a>IPProtocol</h6><p>指定要在转发信息库(FIB)规则中匹配的IP协议。可设为例如 “<code>tcp</code>“, “<code>udp</code>“, “<code>sctp</code>“ 这样的协议名称，或者例如 “<code>6</code>“(“<code>tcp</code>“), “<code>17</code>“(“<code>udp</code>“) 这样的协议号。 默认未设置。</p><h6 id="InvertRule"><a href="#InvertRule" class="headerlink" title="InvertRule"></a>InvertRule</h6><p>一个布尔值。表示是否反转规则。默认为 no 。</p><h5 id="8-Route"><a href="#8-Route" class="headerlink" title="8.Route"></a>8.Route</h5><p>可以使用多个 “<code>[Route]</code>“ 小节来配置多个路由。 可在 “<code>[Route]</code>“ 小节中使用的选项如下：</p><h6 id="Gateway-1"><a href="#Gateway-1" class="headerlink" title="Gateway"></a>Gateway</h6><p>含义与 “<code>[Network]</code>“ 中的同名选项相同。</p><h6 id="GatewayOnlink"><a href="#GatewayOnlink" class="headerlink" title="GatewayOnlink"></a>GatewayOnlink</h6><p>接受一个布尔值。默认值为 “<code>no</code>“ 。 设为 yes 表示要求内核不必检查本小节设置的网关是否直接可达， 也就是内核不必检查本小节所设置的网关是否确实连接到了本地网络上。 这样，在向内核的路由表插入路由记录时，可以阻止内核抱怨”路由不可达”的错误。</p><h6 id="Destination"><a href="#Destination" class="headerlink" title="Destination"></a>Destination</h6><p>该路由的目的地址前缀，可以带有”&#x2F;前缀长度”后缀， 如果省略了此后缀， 则视为一个全长度的主机路由。</p><h6 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h6><p>该路由的源地址前缀，可以带有”&#x2F;前缀长度”后缀， 如果省略了此后缀， 则视为一个全长度的主机路由。</p><h6 id="Metric"><a href="#Metric" class="headerlink" title="Metric"></a>Metric</h6><p>该路由的跃点数(一个正整数)</p><h6 id="IPv6Preference"><a href="#IPv6Preference" class="headerlink" title="IPv6Preference"></a>IPv6Preference</h6><p>为路由发现消息(Router Discovery messages)设置路由优先级(参见 <a href="https://tools.ietf.org/html/rfc4191">RFC4191</a>)。 可设为如下值： “<code>low</code>“ 表示最低优先级、 “<code>medium</code>“ 表示默认优先级、 “<code>high</code>“ 表示最高优先级。</p><h6 id="Scope-1"><a href="#Scope-1" class="headerlink" title="Scope"></a>Scope</h6><p>该路由的适用范围： “<code>global</code>“, “<code>link</code>“, “<code>host</code>“ 。 默认值为 “<code>global</code>“</p><h6 id="PreferredSource"><a href="#PreferredSource" class="headerlink" title="PreferredSource"></a>PreferredSource</h6><p>该路由的首选源地址， 必须符合 <a href="http://man7.org/linux/man-pages/man3/inet_pton.3.html">inet_pton(3)</a> 格式。</p><h6 id="Table-num"><a href="#Table-num" class="headerlink" title="Table=_num_"></a><code>Table=_</code>num<code>_</code></h6><p>该路由表的标识符(可设为 1~4294967295 之间的整数， 0 表示不设置标识符)。 可以通过 <strong>ip route show table <em><code>num</code></em></strong> 命令查看此路由表的内容。</p><h6 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h6><p>设置路由的协议标识符。可设为 0 到 255 之间的整数，或者特殊值 “<code>kernel</code>“, “<code>boot</code>“, “<code>static</code>“ 之一。默认值为 “<code>static</code>“</p><h6 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h6><p>设置路由的类型。可设为下列值之一： “<code>unicast</code>“ 表示描述前往目的地址的真实路径(单播路由)、 “<code>blackhole</code>“ 表示直接悄无声息的丢弃数据包(黑洞路由)、 “<code>unreachable</code>“ 表示直接丢弃数据包并返回一个”主机不可达”ICMP消息、 “<code>prohibit</code>“ 表示直接丢弃数据包并返回一个”通信被禁止”ICMP消息。 “<code>throw</code>“ 表示在当前路由表中的路由查找将失败，路由选择过程将返回到路由策略数据库(RPDB)。 默认值是 “<code>unicast</code>“ 。</p><h6 id="InitialCongestionWindow"><a href="#InitialCongestionWindow" class="headerlink" title="InitialCongestionWindow"></a>InitialCongestionWindow</h6><p>设置启动TCP连接时使用的初始TCP拥塞窗口大小。在TCP会话启动期间， 当客户端请求资源时，服务器的初始拥塞窗口大小决定了首次数据传输时一次性向客户端发送多少字节的数据。 取值范围是 1 到 4294967295(2^32 - 1) 字节(可以使用以1024为基准的 K, M, G 后缀)。 若未设置此选项，则使用内核的默认值。</p><h6 id="InitialAdvertisedReceiveWindow"><a href="#InitialAdvertisedReceiveWindow" class="headerlink" title="InitialAdvertisedReceiveWindow"></a>InitialAdvertisedReceiveWindow</h6><p>设置TCP初始接收窗口大小，也就是首次传输时可以一次性接受多少字节的数据。 在等待接收端确认和更新窗口之前，发送端每次最多只能发送该这么多数据。 取值范围是 1 到 4294967295(2^32 - 1) 字节(可以使用以1024为基准的 K, M, G 后缀)。 若未设置此选项，则使用内核的默认值。</p><h6 id="QuickAck"><a href="#QuickAck" class="headerlink" title="QuickAck"></a>QuickAck</h6><p>接受一个布尔值。设为 yes 表示为路由启用 TCP “quick ack”模式。若未设置此选项，则使用内核的默认值。</p><h6 id="MTUBytes-1"><a href="#MTUBytes-1" class="headerlink" title="MTUBytes"></a>MTUBytes</h6><p>设置该路由的最大传输单元。 单位是字节(可以使用 以1024为基准的 K, M, G 后缀)。</p><p>注意，如果在此连接上启用了 IPv6 ，那么任何小于 1280 (IPv6 的最小 MTU 值) 的值都会被自动增加到 1280 。</p><h5 id="9-DHCP"><a href="#9-DHCP" class="headerlink" title="9.DHCP"></a>9.DHCP</h5><p>“<code>[DHCP]</code>“ 小节用于配置 DHCPv4&#x2F;DHCP6 客户端。 仅在 [Network] 小节中的 <code>DHCP=</code> 选项已开启的情况下有意义。</p><h6 id="UseDNS"><a href="#UseDNS" class="headerlink" title="UseDNS"></a>UseDNS</h6><p>默认值 yes 表示 从DHCP服务器接收DNS服务器的设置， 同时无视任何本地的静态DNS配置。</p><p>这相当于 <a href="http://man7.org/linux/man-pages/man5/resolv.conf.5.html">resolv.conf(5)</a> 中 <code>nameserver</code> 的作用。</p><h6 id="UseNTP"><a href="#UseNTP" class="headerlink" title="UseNTP"></a>UseNTP</h6><p>默认值 yes 表示 从DHCP服务器接收NTP服务器的设置(被 systemd-timesyncd 使用)， 同时无视任何本地的静态NTP配置。</p><h6 id="UseMTU"><a href="#UseMTU" class="headerlink" title="UseMTU"></a>UseMTU</h6><p>若设为 yes 则表示 从DHCP服务器接收MTU(最大传输单元)的设置。 如果已经设置了 <code>MTUBytes=</code> 选项，那么此选项将被忽略。 默认值是 no 。</p><h6 id="Anonymize"><a href="#Anonymize" class="headerlink" title="Anonymize"></a>Anonymize</h6><p>接受一个布尔值。设为 yes 表示按照 <a href="https://tools.ietf.org/html/rfc7844">RFC 7844</a> 规范向 DHCP 服务器发送选项， 也就是不再发送例如主机名之类暴露用户身份的信息，以实现匿名的网络访问。 默认值是 no 。</p><p>此选项应该仅在 <code>MACAddressPolicy=random</code> 的情况下才可以设为 yes 。 参见 <a href="http://www.jinbuguo.com/systemd/systemd.link.html#">systemd.link(5)</a> 手册。</p><p>注意，当此选项被设为 yes 之后， 下列选项将被忽略： <code>SendHostname=</code>, <code>ClientIdentifier=</code>, <code>UseRoutes=</code>, <code>SendHostname=</code>, <code>UseMTU=</code>, <code>VendorClassIdentifier=</code>, &#96;UseTimezone</p><h6 id="SendHostname"><a href="#SendHostname" class="headerlink" title="SendHostname"></a>SendHostname</h6><p>默认值 yes 表示将本机的主机名(hostname)发送给DHCP服务器。 注意，主机名只能由7位ASCII小写字母、数字、连字符(-)组成，并且必须格式化为有效的DNS域名。 否则，即使将此选项设为 yes ， 也不会发送主机名。</p><h6 id="UseHostname"><a href="#UseHostname" class="headerlink" title="UseHostname"></a>UseHostname</h6><p>默认值 yes 表示 将从DHCP服务器接收到的主机名(hostname)设置为系统的临时主机名。</p><h6 id="Hostname"><a href="#Hostname" class="headerlink" title="Hostname"></a>Hostname</h6><p>将此选项的值(而不是真实的主机名)作为主机名发送给 DHCP 服务器。 注意，主机名只能由7位ASCII小写字母、数字、连字符(-)组成， 并且必须格式化为有效的DNS域名。</p><h6 id="UseDomains"><a href="#UseDomains" class="headerlink" title="UseDomains"></a>UseDomains</h6><p>接受一个布尔值或特殊值 “<code>route</code>“ 。 yes 表示将从DHCP服务器接收到的域用于此连接的DNS搜索域。 在效果上与 <code>Domains=</code> 中不带 “<code>~</code>“ 前缀的值类似。 “<code>route</code>“ 表示仅将从DHCP服务器接收到的域用于路由DNS查询(而不用于搜索)， 在效果上与 <code>Domains=</code> 中带有 “<code>~</code>“ 前缀的值类似。 默认值为 no 。</p><p>建议仅在可信任网络环境中才能将此选项设为 yes 。 因为它会影响到所有主机名的解析，特别是单标签主机名(不含”.”的主机名)的解析。 一般来说，仅设置”路由域”而不设置”搜索域”是安全的， 因为这样做不会影响到单标签主机名(不含”.”的主机名)的解析。</p><p>当设为 yes 时，此选项相当于 <a href="http://man7.org/linux/man-pages/man5/resolv.conf.5.html">resolv.conf(5)</a> 中 <code>domain</code> 的作用。</p><h6 id="UseRoutes"><a href="#UseRoutes" class="headerlink" title="UseRoutes"></a>UseRoutes</h6><p>默认值 yes 表示从DHCP服务器请求静态路由，并将DHCP服务器返回的结果添加到本机的路由表中， 同时将跃点数设为 1024 ，此外，还会根据路由目的地址以及网关的不同，将 scope 值设为 “global”, “link”, “host” 之一。 如果目的地址就在本机(例如 127.x.x.x 或者本地连接自身的地址)，那么 scope 值将被设为 “host” ， 否则如果网关不存在(也就是直接路由)，那么 scope 值将被设为 “link” 。 对于其他情况， scope 值将被设为默认的 “global” 。</p><h6 id="UseTimezone"><a href="#UseTimezone" class="headerlink" title="UseTimezone"></a>UseTimezone</h6><p>若设为 yes 则表示 将从DHCP服务器接收到的时区用作本机的时区。 默认值是 “<code>no</code>“</p><h6 id="CriticalConnection"><a href="#CriticalConnection" class="headerlink" title="CriticalConnection"></a>CriticalConnection</h6><p>若设为 yes 则表示 即使所获得的IP地址租约已经过期，也不归还，依然继续使用。 这种做法是与DHCP协议相违背的， 但在某些场合却是最佳的选择(例如根文件系统依赖于此连接)。 默认值为 no</p><h6 id="ClientIdentifier"><a href="#ClientIdentifier" class="headerlink" title="ClientIdentifier"></a>ClientIdentifier</h6><p>使用什么样的 DHCPv4 客户端标识符： “<code>mac</code>“ 表示连接的MAC地址； “<code>duid</code>“ 表示一个符合RFC4361规范的客户端ID(也就是 IAID 与 DUID 的组合)； “<code>duid-only</code>“ 表示仅使用 DUID (可能与 RFC 规范不兼容，但某些场合需要这样做)。 默认值是 “<code>duid</code>“</p><h6 id="VendorClassIdentifier"><a href="#VendorClassIdentifier" class="headerlink" title="VendorClassIdentifier"></a>VendorClassIdentifier</h6><p>标识厂商类型与配置的厂商类标识符(DHCP Option 60)， 这是一个DHCP可选项。</p><h6 id="UserClass"><a href="#UserClass" class="headerlink" title="UserClass"></a>UserClass</h6><p>用于 DHCPv4 客户端标识用户或应用的类型(DHCP “User Class” 选项)。 此选项中包含的字符串表明此客户端是哪些用户类的成员。 每个类都有一个标识字符串，供DHCP服务对客户端进行分类。 此选项接受一个空白分隔的字符串列表。</p><h6 id="DUIDType"><a href="#DUIDType" class="headerlink" title="DUIDType"></a>DUIDType</h6><p>为此连接设置一个专用的 <code>DUIDType</code> 以覆盖全局默认值。参见 <a href="http://www.jinbuguo.com/systemd/networkd.conf.html#">networkd.conf(5)</a> 以了解可用值。</p><h6 id="DUIDRawData"><a href="#DUIDRawData" class="headerlink" title="DUIDRawData"></a>DUIDRawData</h6><p>为此连接设置一个专用的 <code>DUIDRawData</code> 以覆盖全局默认值。参见 <a href="http://www.jinbuguo.com/systemd/networkd.conf.html#">networkd.conf(5)</a> 以了解可用值。</p><h6 id="IAID"><a href="#IAID" class="headerlink" title="IAID"></a>IAID</h6><p>为此连接设置一个 DHCP IAID(Identity Association Identifier) ，一个 32-bit 无符号整数。</p><h6 id="RequestBroadcast"><a href="#RequestBroadcast" class="headerlink" title="RequestBroadcast"></a>RequestBroadcast</h6><p>要求DHCP服务器在完成配置IP地址之前使用广播消息。 对于不能接收原始包的网卡， 或者 在配置IP地址之前不能接收任何包的网卡来说，必须开启此选项。 另一方面， 对于广播包被屏蔽的网络来说，则必须关闭此选项。</p><h6 id="RouteMetric"><a href="#RouteMetric" class="headerlink" title="RouteMetric"></a>RouteMetric</h6><p>指定由DHCP分配的路由的 跃点数(一个正整数)。</p><h6 id="RouteTable-num"><a href="#RouteTable-num" class="headerlink" title="RouteTable=_num_"></a><code>RouteTable=_</code>num<code>_</code></h6><p>DHCP路由表标识符(一个 1 到 4294967295 之间的整数， 0 表示未设置)。 可以使用 <strong>ip route show table <em><code>num</code></em></strong> 查看路由表内容。</p><p>除非已经明确为此选项设置了一个正整数， 否则当与 <code>VRF=</code> 一起使用时，将会使用VRF的路由表。</p><h6 id="ListenPort"><a href="#ListenPort" class="headerlink" title="ListenPort"></a>ListenPort</h6><p>设置DHCP客户端的监听端口(客户端默认在UDP的68端口监听)。</p><h6 id="RapidCommit"><a href="#RapidCommit" class="headerlink" title="RapidCommit"></a>RapidCommit</h6><p>接受一个布尔值。 DHCPv6 客户端可以通过一种被称为”rapid commit”的快速两消息交换方式(solicit, reply)从 DHCPv6 服务器获得配置参数。 如果 DHCPv6 客户端与服务器都支持”rapid commit”选项， 那么将会使用快速两消息交换方式(solicit, reply)取代默认的四消息交换方式(solicit, advertise, request, reply)。 两消息交换方式提高了客户端配置速度，在网络负债较重的环境中很有意义。 详见 <a href="https://tools.ietf.org/html/rfc3315#section-17.2.1">RFC 3315</a> 文档。 默认值为 yes 。</p><h6 id="ForceDHCPv6PDOtherInformation"><a href="#ForceDHCPv6PDOtherInformation" class="headerlink" title="ForceDHCPv6PDOtherInformation"></a>ForceDHCPv6PDOtherInformation</h6><p>接受一个布尔值。 设为 yes 表示即使在路由通告(Router Advertisement)消息中设置了’Other information’位，也强制使用 DHCPv6 有状态模式。 默认情况下，当在路由通告(Router Advertisement)消息中仅设置了’Other information’位时， DHCPv6 将以无状态的两消息交换方式请求网络信息。但是在 <a href="https://tools.ietf.org/html/rfc7084">RFC 7084</a>(要求 WPD-4)规范中， 针对客户边缘(Customer Edge)路由器，此种默认行为发生了改变，使得即使在路由通告(Router Advertisement)消息中仅设置了’Other information’位， 也将请求有状态的 DHCPv6 前缀委派(Prefix Delegation)。 此选项就用于开启这种 CE(Customer Edge) 行为，否则无法自动区分’Other information’位的含义。 此选项的默认值是 no 。 当该网络设备用作 CE(Customer Edge) 路由器时(不需要委派前缀)，应该将此选项设为 yes 。</p><h5 id="10-IPv6AcceptRA"><a href="#10-IPv6AcceptRA" class="headerlink" title="10.IPv6AcceptRA"></a>10.IPv6AcceptRA</h5><p>“<code>[IPv6AcceptRA]</code>“ 用于配置IPv6路由通告(Router Advertisement)客户端。 仅在 [Network] 小节中的 <code>IPv6AcceptRA=</code> 选项已开启的情况下有意义。</p><h6 id="UseDNS-1"><a href="#UseDNS-1" class="headerlink" title="UseDNS"></a>UseDNS</h6><p>默认值 yes 表示从IPv6路由通告消息中接收DNS服务器的设置， 同时无视任何本地的静态DNS配置。</p><p>这相当于 <a href="http://man7.org/linux/man-pages/man5/resolv.conf.5.html">resolv.conf(5)</a> 中 <code>nameserver</code> 的作用。</p><h6 id="UseDomains-1"><a href="#UseDomains-1" class="headerlink" title="UseDomains"></a>UseDomains</h6><p>接受一个布尔值。或特殊值 “<code>route</code>“ 。 yes 表示将从IPv6路由通告消息中接收到的域用于此连接的DNS搜索域。 在效果上与 <code>Domains=</code> 中不带 “<code>~</code>“ 前缀的值类似。 “<code>route</code>“ 表示仅将从IPv6路由通告消息中接收到的域用于路由DNS查询(而不用于搜索)， 在效果上与 <code>Domains=</code> 中带有 “<code>~</code>“ 前缀的值类似。 默认值为 no</p><p>建议仅在可信任网络环境中才能将此选项设为 yes 。 因为它会影响到所有主机名的解析，特别是单标签主机名(不含”.”的主机名)的解析。 一般来说，仅设置”路由域”而不设置”搜索域”是安全的， 因为这样做不会影响到单标签主机名(不含”.”的主机名)的解析。</p><p>当设为 yes 时，此选项相当于 <a href="http://man7.org/linux/man-pages/man5/resolv.conf.5.html">resolv.conf(5)</a> 中 <code>nameserver</code> 的作用。</p><h6 id="RouteTable-num-1"><a href="#RouteTable-num-1" class="headerlink" title="RouteTable&#x3D;num"></a>RouteTable&#x3D;<em><code>num</code></em></h6><p>在路由通告中接收到的路由表编号(一个 1 到 4294967295 之间的整数， 0 表示未设置)。 可以使用 <strong>ip route show table <em><code>num</code></em></strong> 命令显示表内容。</p><h5 id="11-DHCPServer"><a href="#11-DHCPServer" class="headerlink" title="11.DHCPServer"></a>11.DHCPServer</h5><p>“<code>[DHCPServer]</code>“ 小节用于配置 DHCPv4 服务端。 仅在 [Network] 小节中的 <code>DHCPServer=</code> 选项已开启的情况下有意义。</p><h6 id="PoolOffset-PoolSize"><a href="#PoolOffset-PoolSize" class="headerlink" title="PoolOffset&#x3D;, PoolSize"></a>PoolOffset&#x3D;<code>, </code>PoolSize</h6><p>配置可用于动态分配的IP地址池。 地址池必须与DHCP服务器的IP地址位于同一子网内， 并且不得包含子网地址与广播地址。 <code>PoolOffset=</code> 用于设置地址池的起点，用相对于子网起点的偏移量表示。 若设为”0”则表示使用默认值。 <code>PoolSize=</code> 用于设置地址池的长度(也就是包含的IP地址数量)。 若设为”0”则表示使用默认值。 默认情况下，地址池的起点位于子网地址之后的第一个地址， 终点位于广播地址前面的那个地址，也就是包含了全部的可分配地址。 如果地址池中正好包含了DHCP服务器自身的地址(默认情况就是这样)也没关系， 这个地址不会被分配给DHCP客户端。</p><h6 id="DefaultLeaseTimeSec-MaxLeaseTimeSec"><a href="#DefaultLeaseTimeSec-MaxLeaseTimeSec" class="headerlink" title="DefaultLeaseTimeSec&#x3D;, MaxLeaseTimeSec"></a>DefaultLeaseTimeSec&#x3D;<code>, </code>MaxLeaseTimeSec</h6><p>设置传递给DHCP客户端的 默认租期(默认”1h”)与最大租期(默认”12h”)， 可以使用 “min”, “h”, “days”, “weeks”, “months” 后缀。 默认租期用于客户端未指定租约时长的情况。 如果客户端指定的租约时长超过了此处设置的最大值， 那么将自动限制为此处设置的最大值。 如果租约经常变化， 那么应该设置较小的值； 反之， 为了降低DHCP所占用的网络流量， 应该设置较大的值。</p><h6 id="EmitDNS-DNS"><a href="#EmitDNS-DNS" class="headerlink" title="EmitDNS&#x3D;, DNS"></a>EmitDNS&#x3D;<code>, </code>DNS</h6><p>接受一个布尔值。 设置是否要给DHCP客户端传递DNS服务器信息。 默认值 “<code>yes</code>“ 表示要传递。 而 <code>DNS=</code> 则用于设置一个 要传递的DNS服务器列表(以IPv4地址表示)。 如果 <code>EmitDNS=yes</code> 但同时并未设置 <code>DNS=</code> 的值， 那么将自动使用从”上级连接”中获得的DNS服务器列表。 所谓”上级连接”是指 系统中优先级最高的默认路由。 注意： (1)不会从本机的 <code>/etc/resolv.conf</code> 中提取DNS服务器。 (2)并不通知DHCP客户端”上级连接”的DNS变化。 为了确保客户端能够及时知晓”上级连接”的DNS变化， 应该减小 <code>MaxLeaseTimeSec=</code> 的值。</p><h6 id="EmitNTP-NTP"><a href="#EmitNTP-NTP" class="headerlink" title="EmitNTP&#x3D;, NTP"></a>EmitNTP&#x3D;<code>, </code>NTP</h6><p>与 <code>EmitDNS=</code> 和 <code>DNS=</code> 完全相同， 不同之处 仅在于 这两个选项针对的是 NTP时间服务器。</p><h6 id="EmitRouter"><a href="#EmitRouter" class="headerlink" title="EmitRouter"></a>EmitRouter</h6><p>与 <code>EmitDNS=</code> 完全相同， 不同之处仅在于 这两个选项针对的是 路由器。</p><h6 id="EmitTimezone-Timezone"><a href="#EmitTimezone-Timezone" class="headerlink" title="EmitTimezone,Timezone"></a>EmitTimezone,Timezone</h6><p>接受一个布尔值。 设置是否要给DHCP客户端传递时区信息。默认值 “<code>yes</code>“ 表示要传递。 而 <code>Timezone=</code> 则用于设置一个要传递的时区字符串， 例如 “<code>Asia/Shanghai</code>“(中华民国中原时区) 或 “<code>UTC</code>“(世界统一时间) 或 “<code>PRC</code>“(中华人民共和国)。 若未明确设置 <code>Timezone=</code> 的值， 那么将使用本机的时区，也就是 <code>/etc/localtime</code> 软连接。</p><h5 id="12-IPv6PrefixDelegation"><a href="#12-IPv6PrefixDelegation" class="headerlink" title="12.IPv6PrefixDelegation"></a>12.IPv6PrefixDelegation</h5><p>“<code>[IPv6PrefixDelegation]</code>“ 小节用于配置如何发送IPv6路由通告消息(IPv6 Router Advertisement)以及是否用作路由器角色， 仅在 [Network] 小节中的 <code>IPv6PrefixDelegation=</code> 选项已开启的情况下有意义。 IPv6 网络前缀定义在一个或多个 “<code>[IPv6Prefix]</code>“ 小节中。</p><h6 id="Managed-OtherInformation"><a href="#Managed-OtherInformation" class="headerlink" title="Managed,OtherInformation"></a>Managed,OtherInformation</h6><p>此二选项 都只接受一个布尔值。 <code>Managed=yes</code> 表示通过 DHCPv6 服务器来获取 IPv6 地址。 <code>OtherInformation=yes</code> 表示通过 DHCPv6 服务器来获取其他信息。 此二选项的默认值都是 “<code>no</code>“ ，表示完全不使用 DHCPv6 服务器。</p><h6 id="RouterLifetimeSec"><a href="#RouterLifetimeSec" class="headerlink" title="RouterLifetimeSec"></a>RouterLifetimeSec</h6><p>设置此连接作为 IPv6 路由器的时长(单位是秒)。 如果设置了此选项，那么将会在路由通告消息中将该网络连接宣布为一个 IPv6 路由器。 若未设置此选项，则表示本机不是一个路由器。</p><h6 id="RouterPreference"><a href="#RouterPreference" class="headerlink" title="RouterPreference"></a>RouterPreference</h6><p>设置 IPv6 路由的优先权，此选项仅在 <code>RouterLifetimeSec=</code> 非零的时候有意义。 可设为 “<code>high</code>“, “<code>medium</code>“(默认值), “<code>low</code>“ 之一。 详见 <a href="https://tools.ietf.org/html/rfc4191">RFC 4191</a> 文档。</p><h6 id="EmitDNS-DNS-1"><a href="#EmitDNS-DNS-1" class="headerlink" title="EmitDNS,DNS"></a>EmitDNS,DNS</h6><p>DNS&#x3D;<code>用于设置当</code>EmitDNS&#x3D;yes<code>时， 通过路由通告(Router Advertisement)消息分发的递归DNS服务器的 IPv6 地址列表。 如果</code>DNS&#x3D;<code> 的值为空， 那么 DNS 服务器将从 &quot;</code>[Network]<code>&quot; 小节读取。如果 &quot;</code>[Network]<code>&quot; 小节也不包含任何 DNS 服务器， 那么，将使用来自于上行链路中优先级最高的默认路由的 DNS 服务器。 如果 </code>EmitDNS&#x3D;no<code>， 那么将不会在路由通告(Router Advertisement)消息中发送DNS服务器信息。</code>EmitDNS&#x3D;&#96; 的默认值是 yes 。</p><h6 id="EmitDomains-Domains"><a href="#EmitDomains-Domains" class="headerlink" title="EmitDomains,Domains"></a>EmitDomains,Domains</h6><p>Domains&#x3D;<code>用于设置当</code>EmitDomains&#x3D;yes<code>时， 通过路由通告(Router Advertisement)消息分发的DNS搜索域列表。 如果</code>Domains&#x3D;<code> 的值为空，那么DNS搜索域将从 &quot;</code>[Network]<code>&quot; 小节读取。如果 &quot;</code>[Network]<code>&quot; 小节也不包含任何DNS搜索域， 那么，将使用来自于上行链路中优先级最高的默认路由的DNS搜索域。 如果 </code>EmitDomains&#x3D;no<code>， 那么将不会在路由通告(Router Advertisement)消息中发送DNS搜索域信息。</code>EmitDomains&#x3D;&#96; 的默认值是 yes 。</p><h6 id="DNSLifetimeSec"><a href="#DNSLifetimeSec" class="headerlink" title="DNSLifetimeSec"></a>DNSLifetimeSec</h6><p>设置 <code>DNS=</code> 与 <code>Domains=</code> 两个选项中设置的列表的有效期(单位是秒)。</p><h5 id="13-IPv6Prefix"><a href="#13-IPv6Prefix" class="headerlink" title="13.IPv6Prefix"></a>13.IPv6Prefix</h5><p>可以设置多个 “<code>[IPv6Prefix]</code>“ 小节， 每个小节都包含一个通过路由通告声明的 IPv6 前缀。详见 <a href="https://tools.ietf.org/html/rfc4861">RFC 4861</a> 文档。</p><p>AddressAutoconfiguration&#x3D;<code>, </code>OnLink<br>此二选项都只接受一个布尔值。 <code>AddressAutoconfiguration=yes</code> 表示允许自动配置带有此前缀的 IPv6 地址。 <code>OnLink=yes</code> 表示此前缀可用于在线(OnLink)检测。 此二选项的默认值都是 “<code>yes</code>“ 以简化配置难度。</p><p>Prefix<br>设置用于分发的 IPv6 前缀。 值是一个形如 “<code>IPv6地址/前缀长度</code>“ 的字符串。 因为每个 IPv6 前缀的有效期、是否允许自动配置地址、在线(OnLink)状态可能各不相同， 所以需要使用多个 “<code>[IPv6Prefix]</code>“ 小节来分别配置多个不同的 IPv6 前缀。</p><p>PreferredLifetimeSec&#x3D;<code>, </code>ValidLifetimeSec<br>PreferredLifetimeSec&#x3D;<code>表示该IPv6前缀的首选生存期时长(单位是秒)，默认值是 604800 秒(一个星期)。</code>ValidLifetimeSec&#x3D;&#96; 表示该IPv6前缀的有效生存期时长(单位是秒)，默认值是 2592000 秒(30天)。</p><h5 id="14-Bridge"><a href="#14-Bridge" class="headerlink" title="14.Bridge"></a>14.Bridge</h5><p>可在 “<code>[Bridge]</code>“ 小节中使用的选项如下：</p><h6 id="UnicastFlood"><a href="#UnicastFlood" class="headerlink" title="UnicastFlood"></a>UnicastFlood</h6><p>接受一个布尔值。 设为 yes 表示网桥应该通过该端口转发没有FDB项并且目标MAC地址未知的流量。 若未设置此选项，则使用内核的默认值。</p><h6 id="MulticastToUnicast"><a href="#MulticastToUnicast" class="headerlink" title="MulticastToUnicast"></a>MulticastToUnicast</h6><p>接受一个布尔值。设置是否开启运行在网桥多播侦听功能之上的多播到单播。 这意味着单播副本只传递给对它感兴趣的主机。 若未设置此选项，则使用内核的默认值。</p><h6 id="HairPin"><a href="#HairPin" class="headerlink" title="HairPin"></a>HairPin</h6><p>接受一个布尔值。 设置网桥是否可以将从该端口接收到的流量仍然通过该端口返还发送回去。 若未设置此选项， 则使用内核的默认值。</p><h6 id="UseBPDU"><a href="#UseBPDU" class="headerlink" title="UseBPDU"></a>UseBPDU</h6><p>接受一个布尔值。设置该网桥端口是否处理 STP BPDU(Bridge Protocol Data Units)。 若未设置此选项，则使用内核的默认值。</p><h6 id="FastLeave"><a href="#FastLeave" class="headerlink" title="FastLeave"></a>FastLeave</h6><p>接受一个布尔值。 设置是否允许在该端口接收到”IGMP Leave”消息后立即停止此端口上的多播。 此选项仅与IGMP嗅探一起使用才有意义。若未设置此选项，则使用内核的默认值。</p><h6 id="AllowPortToBeRoot"><a href="#AllowPortToBeRoot" class="headerlink" title="AllowPortToBeRoot"></a>AllowPortToBeRoot</h6><p>接受一个布尔值。设置是否允许该端口成为根端口(Root Port)，也就是与根桥(Root Bridge)直接相连或路径最短的端口。 此选项仅在网桥启用了STP(生成树协议)的情况下才有意义。 若未设置此选项，则使用内核的默认值。</p><h6 id="Cost"><a href="#Cost" class="headerlink" title="Cost"></a>Cost</h6><p>设置该端口发送数据包的”cost”。 一个网桥上的不同端口可能有不同的速度， 速度越快的端口，其”cost”值也越低。 因此，”cost”值可用于决定使用哪个端口。 取值范围是 1 到 65535 之间的一个整数。</p><h6 id="Priority-1"><a href="#Priority-1" class="headerlink" title="Priority"></a>Priority</h6><p>设置该接口的”优先级”。 网桥上的每一个端口都可以拥有一个”优先级”，用于确定优先使用哪一个连接。 较小的数值表示优先级较高(更优先使用)。 可设为 0 到 63 之间的整数。 此选项没有默认值，意味着默认使用内核的值(默认为 32)。</p><h5 id="15-BridgeFDB"><a href="#15-BridgeFDB" class="headerlink" title="15.BridgeFDB"></a>15.BridgeFDB</h5><p>“<code>[BridgeFDB]</code>“ 小节 用于管理网桥端口的流量转发表。 可以通过设置多个 “<code>[BridgeFDB]</code>“ 小节 来配置多个静态MAC表项。</p><h6 id="MACAddress-3"><a href="#MACAddress-3" class="headerlink" title="MACAddress"></a>MACAddress</h6><p>这是一个必须设置的选项， 含义与 “<code>[Link]</code>“ 小节中的同名选项相同。</p><h6 id="VLANId"><a href="#VLANId" class="headerlink" title="VLANId"></a>VLANId</h6><p>新的静态MAC表项的”VLAN ID”。 若未设置， 则不添加任何”VLAN ID”信息。</p><h5 id="16-CAN"><a href="#16-CAN" class="headerlink" title="16.CAN"></a>16.CAN</h5><p>管理控制器区域网络(Controller Area Network)(CAN 总线)。 可在 “<code>[CAN]</code>“ 小节中使用的选项如下：</p><h6 id="BitRate"><a href="#BitRate" class="headerlink" title="BitRate"></a>BitRate</h6><p>CAN设备的比特率(位&#x2F;秒)。 可以使用以1000为基准的 SI 后缀(K, M)。</p><h6 id="SamplePoint"><a href="#SamplePoint" class="headerlink" title="SamplePoint"></a>SamplePoint</h6><p>可选的采样点小数点百分比(例如 “<code>75%</code>“, “<code>87.5%</code>“)。</p><h6 id="RestartSec"><a href="#RestartSec" class="headerlink" title="RestartSec"></a>RestartSec</h6><p>自动重启延迟。 设为非零值表示在总线断开的情况下，延迟指定的时长后自动触发CAN控制器重启。 可以使用表示时间单位的 “<code>s</code>“, “<code>ms</code>“, “<code>us</code>“ 后缀。设为 “<code>infinity</code>“ 或 “<code>0</code>“ 表示关闭自动重启。 默认为关闭自动重启。</p><h5 id="17-BridgeVLAN"><a href="#17-BridgeVLAN" class="headerlink" title="17.BridgeVLAN"></a>17.BridgeVLAN</h5><p>“<code>[BridgeVLAN]</code>“ 小节用于管理网桥端口的 VLAN ID 配置。 可以通过设置多个 “<code>[BridgeVLAN]</code>“ 小节来配置多个 VLAN 项。 此小节仅在 <a href="http://www.jinbuguo.com/systemd/systemd.netdev.html#">systemd.netdev(5)</a> 中 “<code>[Bridge]</code>“ 小节下的 <code>VLANFiltering=</code> 选项被开启时才有意义。</p><h6 id="VLAN-1"><a href="#VLAN-1" class="headerlink" title="VLAN"></a>VLAN</h6><p>可以设为一个单独的 ID 或 “M-N” 格式表示的ID范围。表示在此端口上启用的 VLAN ID 。 有效的 VLAN ID 范围是 1~4094 。</p><h6 id="EgressUntagged"><a href="#EgressUntagged" class="headerlink" title="EgressUntagged"></a>EgressUntagged</h6><p>可以设为一个单独的 ID 或 “M-N” 格式表示的ID范围。 此处设置的 VLAN ID 将被用于在出口上 untag 帧。 设置此选项将会隐含的使用 <code>VLAN=</code> 并将 VLAN ID 同时应用于进入的帧。</p><h6 id="PVID"><a href="#PVID" class="headerlink" title="PVID"></a>PVID</h6><p>为所有进入的 untag 帧设置 Port VLAN ID 。此选项仅可使用一次。 设置此选项将会隐含的使用 <code>VLAN=</code> 并将 VLAN ID 同时应用于进入的帧。</p><h4 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h4><h6 id="1-指定网卡配置静态ip"><a href="#1-指定网卡配置静态ip" class="headerlink" title="1.指定网卡配置静态ip"></a>1.指定网卡配置静态ip</h6><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;50-static.network</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Match]</span><br><span class="line">Name=enp2s0</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">Address=192.168.0.15/24</span><br><span class="line">Gateway=192.168.0.1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># /etc/systemd/network/80-dhcp.network</span><br><span class="line">[Match]</span><br><span class="line">Name=en*</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">DHCP=yes</span><br></pre></td></tr></table></figure><h6 id="2-桥接网卡"><a href="#2-桥接网卡" class="headerlink" title="2.桥接网卡"></a>2.桥接网卡</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># /etc/systemd/network/25-bridge-static.network</span><br><span class="line">[Match]</span><br><span class="line">Name=bridge0</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">Address=192.168.0.15/24</span><br><span class="line">Gateway=192.168.0.1</span><br><span class="line">DNS=192.168.0.1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># /etc/systemd/network/25-bridge-slave-interface-1.network</span><br><span class="line">[Match]</span><br><span class="line">Name=enp2s0</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">Bridge=bridge0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># /etc/systemd/network/25-bridge-slave-interface-2.network</span><br><span class="line">[Match]</span><br><span class="line">Name=wlp3s0</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">Bridge=bridge0</span><br></pre></td></tr></table></figure><p>创建一个网桥，并将 “<code>enp2s0</code>“ 与 “<code>wlp3s0</code>“ 添加进去。 同时为网桥配置一个静态地址，静态设置的网关也将被用作默认路由。 设置的DNS服务器将会被添加到全局DNS服务器列表中。</p><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;20-bridge-slave-interface-vlan.network<br>[Match]<br>Name&#x3D;enp2s0</p><p>[Network]<br>Bridge&#x3D;bridge0</p><p>[BridgeVLAN]<br>VLAN&#x3D;1-32<br>PVID&#x3D;42<br>EgressUntagged&#x3D;42</p><p>[BridgeVLAN]<br>VLAN&#x3D;100-200</p><p>[BridgeVLAN]<br>EgressUntagged&#x3D;300-400</p><p>本例的设置覆盖了上例中对 “<code>enp2s0</code>“ 接口的配置，为其开启了 VLAN 功能： (1) VLAN ID 等于 1-32, 42, 100-400 的包将被直接发出， (2) VLAN ID 等于 42, 300-400 的包将被去掉 tag 标记之后再发出。 (3) 接收到的无 tag 标记的包将被指定一个 VLAN ID 等于 42 的值。</p><h6 id="3-隧道配置"><a href="#3-隧道配置" class="headerlink" title="3.隧道配置"></a>3.隧道配置</h6><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;25-tunnels.network<br>[Match]<br>Name&#x3D;ens1</p><p>[Network]<br>Tunnel&#x3D;ipip-tun<br>Tunnel&#x3D;sit-tun<br>Tunnel&#x3D;gre-tun<br>Tunnel&#x3D;vti-tun</p><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;25-tunnel-ipip.netdev<br>[NetDev]<br>Name&#x3D;ipip-tun<br>Kind&#x3D;ipip</p><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;25-tunnel-sit.netdev<br>[NetDev]<br>Name&#x3D;sit-tun<br>Kind&#x3D;sit</p><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;25-tunnel-gre.netdev<br>[NetDev]<br>Name&#x3D;gre-tun<br>Kind&#x3D;gre</p><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;25-tunnel-vti.netdev<br>[NetDev]<br>Name&#x3D;vti-tun<br>Kind&#x3D;vti</p><p>这将启动 “<code>ens1</code>“ 接口，并使用此接口创建一个 IPIP 隧道、 一个 SIT 隧道、一个 GRE 隧道、一个 VTI 隧道。</p><h6 id="4-多网卡绑定"><a href="#4-多网卡绑定" class="headerlink" title="4.多网卡绑定"></a>4.多网卡绑定</h6><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;30-bond1.network<br>[Match]<br>Name&#x3D;bond1</p><p>[Network]<br>DHCP&#x3D;ipv6</p><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;30-bond1.netdev<br>[NetDev]<br>Name&#x3D;bond1<br>Kind&#x3D;bond</p><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;30-bond1-dev1.network<br>[Match]<br>MACAddress&#x3D;52:54:00:e9:64:41</p><p>[Network]<br>Bond&#x3D;bond1</p><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;30-bond1-dev2.network<br>[Match]<br>MACAddress&#x3D;52:54:00:e9:64:42</p><p>[Network]<br>Bond&#x3D;bond1</p><p>创建一个 “<code>bond1</code>“ 设备， 并将两个MAC地址为 52:54:00:e9:64:41 与 52:54:00:e9:64:42 的网卡添加进去。 同时使用 DHCPv6 来获取地址。</p><h6 id="5-虚拟路由转发-VRF"><a href="#5-虚拟路由转发-VRF" class="headerlink" title="5.虚拟路由转发(VRF)"></a>5.虚拟路由转发(VRF)</h6><p>将 “<code>bond1</code>“ 添加到 VRF 主接口 “<code>vrf1</code>“ 上。 这将把此接口上生成的路由重定向到创建 VFR 过程中定义的路由表中。 注意，Linux-4.8 之前的内核不会根据 VFR 路由表重定向流量，除非专门添加了特定的IP规则。</p><p>&#x2F;etc&#x2F;systemd&#x2F;network&#x2F;25-vrf.network<br>[Match]<br>Name&#x3D;bond1</p><p>[Network]<br>VRF&#x3D;vrf1</p><h6 id="6-MacVTap"><a href="#6-MacVTap" class="headerlink" title="6.MacVTap"></a>6.MacVTap</h6><p>启动 “<code>macvtap-test</code>“ 接口， 并将其附着到 “<code>enp0s25</code>“ 上。</p><p>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;network&#x2F;25-macvtap.network<br>[Match]<br>Name&#x3D;enp0s25</p><p>[Network]<br>MACVTAP&#x3D;macvtap-test</p><h2 id="2-NetworkManager"><a href="#2-NetworkManager" class="headerlink" title="2.NetworkManager"></a>2.NetworkManager</h2><h3 id="1-描述-1"><a href="#1-描述-1" class="headerlink" title="1.描述"></a>1.描述</h3><p><a href="https://networkmanager.dev/">NetworkManager</a> 是一个为系统提供检测和配置功能以便自动连接到网络的程序。NetworkManager 的功能对无线和有线网络都很有用。对于无线网络，NetworkManager 偏好已知的无线网络，并能切换到最可靠的网络。能感知 NetworkManager 的应用程序可以切换在线和离线模式。比起无线连接，NetworkManager 更偏好有线连接，且支持调制解调器连接和一些类型的 VPN。NetworkManager 最初由 Red Hat 开发，现在由 <a href="https://wiki.archlinuxcn.org/wiki/GNOME" title="GNOME">GNOME</a> 管理。</p><h4 id="1-移动网络支持"><a href="#1-移动网络支持" class="headerlink" title="1.移动网络支持"></a>1.移动网络支持</h4><p><a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85" title="安装">安装</a> <a href="https://archlinux.org/packages/?name=modemmanager">modemmanager</a>包 和 <a href="https://archlinux.org/packages/?name=usb_modeswitch">usb_modeswitch</a>包。然后<a href="https://wiki.archlinuxcn.org/wiki/%E5%90%AF%E7%94%A8" title="启用">启用</a>并<a href="https://wiki.archlinuxcn.org/wiki/%E5%90%AF%E5%8A%A8" title="启动">启动</a> <code>ModemManager.service</code>。<br>可能需要<a href="https://wiki.archlinuxcn.org/wiki/Help:%E9%98%85%E8%AF%BB#%E6%8E%A7%E5%88%B6_systemd_%E5%8D%95%E5%85%83" title="Help:阅读">重新启动</a> <code>NetworkManager.service</code> 才能使其检测 ModemManager。重新启动后，重新插入调制解调器应该就可以识别了。</p><p>从前端界面(例如 <a href="https://archlinux.org/packages/?name=nm-connection-editor">nm-connection-editor</a>包)添加连接并将连接类型选择为 broadband,选择 ISP 和套餐, <a href="https://archlinux.org/packages/?name=mobile-broadband-provider-info">mobile-broadband-provider-info</a>包 会自动填入 <a href="https://en.wikipedia.org/wiki/Access_Point_Name" title="wikipedia:Access Point Name">APN</a> 和其它设置。</p><h4 id="2-PPPoE-DSL-支持"><a href="#2-PPPoE-DSL-支持" class="headerlink" title="2.PPPoE &#x2F; DSL 支持"></a>2.PPPoE &#x2F; DSL 支持</h4><p><a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85" title="安装">安装</a> <a href="https://archlinux.org/packages/?name=rp-pppoe">rp-pppoe</a>包 以支持 PPPoE &#x2F; DSL 连接。使用 <code>nm-connection-editor</code> 添加一个新的 DSL&#x2F;PPPoE 连接。</p><h4 id="3-VPN-支持"><a href="#3-VPN-支持" class="headerlink" title="3.VPN 支持"></a>3.VPN 支持</h4><p>从 1.16 版本开始 NetworkManager 原生支持 <a href="https://wiki.archlinuxcn.org/wiki/WireGuard" title="WireGuard">WireGuard</a>，它只需要 <code>wireguard</code> 内核模块。详见 <a href="https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/">WireGuard in NetworkManager 博客文章</a>。</p><p>对其他类型 VPN 的支持基于一个插件系统。它们在以下软件包中提供：</p><ul><li><a href="https://archlinux.org/packages/?name=networkmanager-openconnect">networkmanager-openconnect</a>包 支持 <a href="https://wiki.archlinuxcn.org/wzh/index.php?title=OpenConnect&action=edit&redlink=1" title="OpenConnect（页面不存在）">OpenConnect</a></li><li><a href="https://wiki.archlinuxcn.org/wzh/index.php?title=Networkmanager-openvpn&action=edit&redlink=1" title="Networkmanager-openvpn（页面不存在）">networkmanager-openvpn</a> 支持 <a href="https://wiki.archlinuxcn.org/wiki/OpenVPN" title="OpenVPN">OpenVPN</a></li><li><a href="https://archlinux.org/packages/?name=networkmanager-pptp">networkmanager-pptp</a>包 支持 <a href="https://wiki.archlinuxcn.org/wiki/PPTP_Client" title="PPTP Client">PPTP Client</a></li><li><a href="https://archlinux.org/packages/?name=networkmanager-strongswan">networkmanager-strongswan</a>包 支持 <a href="https://wiki.archlinuxcn.org/wiki/StrongSwan" title="StrongSwan">strongSwan</a></li><li><a href="https://archlinux.org/packages/?name=networkmanager-vpnc">networkmanager-vpnc</a>包</li><li><a href="https://aur.archlinux.org/packages/networkmanager-fortisslvpn-git/">networkmanager-fortisslvpn-git</a>AUR</li><li><a href="https://aur.archlinux.org/packages/networkmanager-iodine-git/">networkmanager-iodine-git</a>AUR</li><li><a href="https://aur.archlinux.org/packages/networkmanager-libreswan/">networkmanager-libreswan</a>AUR</li><li><a href="https://archlinux.org/packages/?name=networkmanager-l2tp">networkmanager-l2tp</a>包</li><li><a href="https://aur.archlinux.org/packages/networkmanager-ssh-git/">networkmanager-ssh-git</a>AUR</li><li><a href="https://archlinux.org/packages/?name=network-manager-sstp">network-manager-sstp</a>包</li></ul><h4 id="4-GUI界面"><a href="#4-GUI界面" class="headerlink" title="4.GUI界面"></a>4.GUI界面</h4><ul><li><a href="https://archlinux.org/packages/?name=nm-connection-editor">nm-connection-editor</a>包 提供图形界面；</li><li><a href="https://archlinux.org/packages/?name=network-manager-applet">network-manager-applet</a>包 提供系统托盘图标（<code>nm-applet</code>）。</li></ul><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S networkmanager</span><br><span class="line"><span class="comment">#此软件包包含一个守护程序、一个命令行界面（`nmcli`）和一个基于 curses 的界面（`nmtui`）。</span></span><br></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><h4 id="1-nmcli"><a href="#1-nmcli" class="headerlink" title="1.nmcli"></a>1.nmcli</h4><h5 id="1-常用的命令"><a href="#1-常用的命令" class="headerlink" title="1.常用的命令"></a>1.常用的命令</h5><p>1.显示附近的 Wi-Fi 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli device wifi list</span><br></pre></td></tr></table></figure><p>2.连接到 Wi-Fi 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli device wifi connect _SSID_或_BSSID_ password _密码_</span><br></pre></td></tr></table></figure><p>3.连接到隐藏的 Wi-Fi 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli device wifi connect _SSID_或_BSSID_ password _密码_ hidden <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>4.连接到 <code>wlan1</code> 网络接口上的 Wi-Fi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli device wifi connect _SSID_或_BSSID_ password _密码_ ifname wlan1 _profile_name_</span><br></pre></td></tr></table></figure><p>5.断开网络接口上的连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli device disconnect ifname eth0</span><br></pre></td></tr></table></figure><p>6.显示连接列表及其名称、UUID、类型和支持设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection show</span><br></pre></td></tr></table></figure><p>7.激活连接（即使用现有配置文件连接到网络）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection up _name_或_uuid_</span><br></pre></td></tr></table></figure><p>8.删除连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection delete _name_或_uuid_</span><br></pre></td></tr></table></figure><p>9.显示所有网络设备及其状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli device</span><br></pre></td></tr></table></figure><p>10.关闭 Wi-Fi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli radio wifi off</span><br></pre></td></tr></table></figure><h5 id="2-编辑连接"><a href="#2-编辑连接" class="headerlink" title="2.编辑连接"></a>2.编辑连接</h5><p>1.获取连接列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection</span><br></pre></td></tr></table></figure><p>2.nmcli交互式编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`nmcli connection edit <span class="string">&#x27;Wired connection 2&#x27;</span>`.</span><br></pre></td></tr></table></figure><p>3.nmcli命令行界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection modify <span class="string">&#x27;Wired connection 2&#x27;</span> _setting_._property_ _value_</span><br></pre></td></tr></table></figure><p>连接文件<br>&#x2F;etc&#x2F;NetworkManager&#x2F;system-connections&#x2F;<br>4.重载连接文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli connection reload</span><br></pre></td></tr></table></figure><h4 id="2-nmtui"><a href="#2-nmtui" class="headerlink" title="2.nmtui"></a>2.nmtui</h4><p>nmtui为networkmanager的交互式图形化管理工具</p><h2 id="3-iwd"><a href="#3-iwd" class="headerlink" title="3.iwd"></a>3.iwd</h2><h3 id="1-描述-2"><a href="#1-描述-2" class="headerlink" title="1.描述"></a>1.描述</h3><p><a href="https://iwd.wiki.kernel.org/">iwd</a> (iNet wireless daemon，iNet 无线守护程序) 是由英特尔（Intel）为 Linux 编写的一个无线网络守护程序。该项目的核心目标是不依赖任何外部库，而是最大程度地利用 Linux 内核提供的功能来优化资源利用。</p><p>iwd 可以独立工作，也可以和 <a href="https://wiki.archlinuxcn.org/wiki/ConnMan" title="ConnMan">ConnMan</a>、<a href="https://wiki.archlinuxcn.org/wiki/Systemd-networkd" title="Systemd-networkd">systemd-networkd</a> 和 <a href="https://wiki.archlinuxcn.org/wiki/NetworkManager#Using_iwd_as_the_Wi-Fi_backend" title="NetworkManager">NetworkManager</a> 这样更完善的网络管理器结合使用。</p><h3 id="2-安装-1"><a href="#2-安装-1" class="headerlink" title="2.安装"></a>2.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S iwd</span><br><span class="line"><span class="comment">#iwd软件包 软件包提供了客户端程序 `iwctl`、守护程序 `iwd` 和 WiFi 监控工具 `iwmon`</span></span><br><span class="line"><span class="comment">#[iwgtk]CNRepo 提供 iwd 的 GUI 前端和托盘图标。</span></span><br></pre></td></tr></table></figure><h3 id="3-使用-1"><a href="#3-使用-1" class="headerlink" title="3.使用"></a>3.使用</h3><h4 id="1-iwctl"><a href="#1-iwctl" class="headerlink" title="1.iwctl"></a>1.iwctl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入交互式命令行</span></span><br><span class="line">iwctl</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看帮助</span></span><br><span class="line">[iwd]<span class="comment"># help</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首先，如果不知道你的网络设备名称，请列出所有 WiFi 设备：</span></span><br><span class="line">[iwd]<span class="comment"># device list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#然后，要开始扫描网络（注意：这个命令不会输出任何内容），执行：</span></span><br><span class="line">[iwd]<span class="comment"># station device scan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#再然后，就可以列出所有可用的网络：</span></span><br><span class="line">[iwd]<span class="comment"># station device get-networks</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最后，要连接到一个网络</span></span><br><span class="line">[iwd]<span class="comment"># station device connect SSID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果要求输入网络密码，将会提示用户输入。此外，连接操作可以应用成命令行参数的形式：</span></span><br><span class="line">iwctl --passphrase passphrase station device connectSSID</span><br><span class="line"></span><br><span class="line"><span class="comment">#要断开网络连接：</span></span><br><span class="line">[iwd]<span class="comment"># station device disconnect</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要显示 WiFi 设备详细情况，比如 MAC 地址：</span></span><br><span class="line">[iwd]<span class="comment"># device device show</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要显示包括 WiFi 设备的连接网络在内的连接状态：</span></span><br><span class="line">[iwd]<span class="comment"># station device show</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要列出以前连接过的网络：</span></span><br><span class="line">[iwd]<span class="comment"># known-networks list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要忘记已知的网络：</span></span><br><span class="line">[iwd]<span class="comment"># known-networks SSID forget</span></span><br></pre></td></tr></table></figure><h2 id="4-wpa-supplicant"><a href="#4-wpa-supplicant" class="headerlink" title="4.wpa_supplicant"></a>4.wpa_supplicant</h2><h3 id="1-描述-3"><a href="#1-描述-3" class="headerlink" title="1.描述"></a>1.描述</h3><p><a href="https://hostap.epitest.fi/wpa_supplicant/">wpa_supplicant</a> 是跨平台的 WPA <a href="https://en.wikipedia.org/wiki/Supplicant_(computer)" title="wikipedia:Supplicant (computer)">请求者程序（supplicant）</a>，支持 WEP、WPA 和 WPA2(<a href="https://en.wikipedia.org/wiki/IEEE_802.11i-2004" title="wikipedia:IEEE 802.11i-2004">IEEE 802.11i</a>).。可以在桌面、笔记本甚至嵌入式系统中使用。</p><h3 id="2-安装-2"><a href="#2-安装-2" class="headerlink" title="2.安装"></a>2.安装</h3><p><a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85" title="安装">安装</a> <a href="https://archlinux.org/packages/?name=wpa_supplicant">wpa_supplicant</a>包 软件包。此软件包提供了主程序 _wpa_supplicant_，密码工具 <em>wpa_passphrase</em> 和文字界面前端 <em>wpa_cli</em>.</p><p>此外软件包 <a href="https://aur.archlinux.org/packages/wpa_supplicant_gui/">wpa_supplicant_gui</a>AUR 提供了图形界面 _wpa_gui_。 <a href="https://aur.archlinux.org/packages/wpa-cute/">wpa-cute</a>AUR 是 <em>wpa_gui</em> 的一个分支，提供了额外的修正和改进。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S wpa_supplicant</span><br></pre></td></tr></table></figure><h3 id="3-使用-2"><a href="#3-使用-2" class="headerlink" title="3.使用"></a>3.使用</h3><p>配置文件<br>&#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=/run/wpa_supplicant</span><br><span class="line">update_config=1</span><br></pre></td></tr></table></figure><p>连接网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpa_supplicant -B -i _interface_ -c /etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></table></figure><p>生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpa_passphrase MYSSID passphrase &gt; /etc/wpa_supplicant/example.conf</span><br></pre></td></tr></table></figure><h2 id="5-dhcpcd"><a href="#5-dhcpcd" class="headerlink" title="5.dhcpcd"></a>5.dhcpcd</h2><h3 id="1-描述-4"><a href="#1-描述-4" class="headerlink" title="1.描述"></a>1.描述</h3><p><em>hcpcd</em> 是 DHCP 和 DHCPv6 客户端，是目前功能最丰富的开源 DHCP 客户端。<a href="https://roy.marples.name/projects/dhcpcd">项目主页</a>包含了完整的功能列表。</p><h3 id="2-安装-3"><a href="#2-安装-3" class="headerlink" title="2.安装"></a>2.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S dhcpcd</span><br></pre></td></tr></table></figure><h3 id="3-使用-3"><a href="#3-使用-3" class="headerlink" title="3.使用"></a>3.使用</h3><h4 id="1-获取ip地址"><a href="#1-获取ip地址" class="headerlink" title="1.获取ip地址"></a>1.获取ip地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取ip地址</span></span><br><span class="line">dhcpcd</span><br></pre></td></tr></table></figure><h4 id="2-设置静态IP地址"><a href="#2-设置静态IP地址" class="headerlink" title="2. 设置静态IP地址"></a>2. 设置静态IP地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/dhcpcd.conf</span><br><span class="line"></span><br><span class="line">interface eth0</span><br><span class="line">static ip_address=192.168.0.10/24</span><br><span class="line">static routers=192.168.0.1</span><br><span class="line">static domain_name_servers=192.168.0.1 8.8.8.8</span><br></pre></td></tr></table></figure><h4 id="3-设置回落地址"><a href="#3-设置回落地址" class="headerlink" title="3.设置回落地址"></a>3.设置回落地址</h4><p>在dhcp续约失败时，会启用此ip配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/etc/dhcpcd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># define static profile</span></span><br><span class="line">profile static_eth0</span><br><span class="line">static ip_address=192.168.1.23/24</span><br><span class="line">static routers=192.168.1.1</span><br><span class="line">static domain_name_servers=192.168.1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># fallback to static profile on eth0</span></span><br><span class="line">interface _eth0_</span><br><span class="line">fallback static_eth0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux网络管理工具&quot;&gt;&lt;a href=&quot;#Linux网络管理工具&quot; class=&quot;headerlink&quot; title=&quot;Linux网络管理工具&quot;&gt;&lt;/a&gt;Linux网络管理工具&lt;/h1&gt;&lt;h2 id=&quot;1-systemd-networkd&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>科学上网技术原理和及配置教程</title>
    <link href="https://bugprogram-git.github.io/2022/12/22/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <id>https://bugprogram-git.github.io/2022/12/22/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</id>
    <published>2022-12-22T04:35:34.000Z</published>
    <updated>2024-04-21T15:31:26.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="科学上网技术原理及配置教程"><a href="#科学上网技术原理及配置教程" class="headerlink" title="科学上网技术原理及配置教程"></a>科学上网技术原理及配置教程</h1><h2 id="1-什么是科学上网"><a href="#1-什么是科学上网" class="headerlink" title="1.什么是科学上网?"></a>1.什么是科学上网?</h2><p>由于中国大陆的一些政治原因，我们上国际互联网的流量在出国的时候一般会受到政府的审查。(其他的国家没有上网流量审查，中国特有，上国内的网站不会被屏蔽)，类似于google，facebook，twitter的一些网站一般会都会被政府的屏蔽，导致我们在中国大陆是无法直接访问这些被屏蔽的网站的，因此我们需要借助一些特别的技术手段实现访问这些被屏蔽的网站<br>我们通常上网的流量在访问国际互联网首先要经过政府的流量审查设备GFW(Great FireWall)，因此我们要访问那些被屏蔽的网站，如google，首先就要过GFW这一关<br>要绕过GFW我们首先要明白GFW的工作原理</p><ul><li>GFW工作原理<br>GFW通常通过域名、IP、关键字等进行流量审查(但不仅限于这些手段)，因此我们要绕过GFW就要绕过GFW就要借助这些特点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"> 用户-&gt;&gt; GFW:访问google</span><br><span class="line"> GFW --&gt;&gt; Google: 丢弃数据包</span><br></pre></td></tr></table></figure>如果我们使用科学上网一般是这样的<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">用户 -&gt;&gt; GFW:访问代理服务器</span><br><span class="line">GFW -&gt;&gt; 代理服务器: (正常访问)</span><br><span class="line">代理服务器 -&gt;&gt; Google: (访问成功)</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-常用的科学上网手段"><a href="#2-常用的科学上网手段" class="headerlink" title="2.常用的科学上网手段"></a>2.常用的科学上网手段</h2><ul><li><p>VPN<br>VPN(Virtual Private Network)虚拟专用网络，一般用于企业中为了实现多地区组网实现加密通讯的一种协议。正是由于VPN加密的特点，使得VPN可以用于科学上网，不过近些年由于GFW的不断升级，GFW现如今很容易识别到VPN流量，因此现如今使用VPN实现科学上网的方式并不安全。</p></li><li><p>Shadowsocks协议<br>一种简单的基于socks5代理方式的加密传输协议，最早由clowwindy为了实现科学上网而开发，轻量而且抗封锁</p></li><li><p>ShadowosocksR协议<br>Shadowsocks协议的加强版本</p></li><li><p>VMess协议<br>VMess协议是v2ray原创的加密通讯协议(也是为了实现科学上网)</p></li><li><p>VLess协议<br>VLESS是一种无状态的轻量级数据传输协议，被定义为下一代V2ray数据传输协议。</p></li><li><p>Trojan协议<br>Trojan使用TLS加密模式模仿互联网最常见的https流量，以逃过防火墙的识别。</p></li><li><p>hyster*</p></li></ul><h2 id="3-详细技术原理"><a href="#3-详细技术原理" class="headerlink" title="3.详细技术原理"></a>3.详细技术原理</h2><p>1.以shadowsocks为例<br>shadowsocks程序中有两个核心程序分别为ss-server和ss-local</p><p>整个工作流程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">client--&gt;|socks5|ss-local</span><br><span class="line">ss-local--crypto--&gt;ss-server</span><br><span class="line">ss-server--decrypto--&gt;destination_site</span><br><span class="line">destination_site--&gt;ss-server</span><br><span class="line">ss-server--&gt;|crypto|ss-local</span><br><span class="line">ss-local--&gt;|decrypto|client</span><br></pre></td></tr></table></figure><p>1.客户端需要代理的程序首先将需要代理的流量封装成socks5数据包发送给本地代理客户端ss-local</p><p>2.ss-local接收到来自客户端程序发送来的流量之后，将数据包解封装还原成原始流量，并将数据包重新封装成shadowsocks数据包，并将数据包进行加密，发送给远程shdowsocks服务器ss-server。</p><p>3.ss-server接收到ss-local客户端发送来的数据后，首先将数据解析，并将数据进行解密，还原成原始数据报文，并根据数据报文中的信息，请求客户端实际需要请求的服务器。</p><p>4.ss-server接收到实际请求的服务器返回来的数据报文，将数据报文首先进行加密，并将数据报文封装成shadowsocks数据包文，发送给远程客户端ss-local。</p><p>5.客户端ss-local接收到数据包后将数据包进行解密，还原数据原始报文，并将数据包文封装成socks5协议数据包返回给实际代理的应用程序。</p><h2 id="4-科学上网服务器部署"><a href="#4-科学上网服务器部署" class="headerlink" title="4.科学上网服务器部署"></a>4.科学上网服务器部署</h2><p>以下部署环境均基于Ubuntu-20.04环境进行部署</p><h3 id="1-shadowsocks"><a href="#1-shadowsocks" class="headerlink" title="1.shadowsocks"></a>1.shadowsocks</h3><h4 id="1-1-shadowsocks服务端"><a href="#1-1-shadowsocks服务端" class="headerlink" title="1.1 shadowsocks服务端"></a>1.1 shadowsocks服务端</h4><p>1.安装shadowsocks服务文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取源码</span></span><br><span class="line">wget https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.3.5/shadowsocks-libev-3.3.5.tar.gz</span><br><span class="line"><span class="comment">#编译完得到ss-server可执行文件</span></span><br></pre></td></tr></table></figure><p>2.修改配置文件(服务端)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;::0&quot;</span><span class="punctuation">,</span><span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>        <span class="comment">//监听的地址</span></span><br><span class="line">    <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span><span class="number">8388</span><span class="punctuation">,</span>                <span class="comment">//监听的端口</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;chacha20-ietf-poly1305&quot;</span><span class="punctuation">,</span> <span class="comment">//加密算法</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;ExamplePassword&quot;</span><span class="punctuation">,</span>      <span class="comment">//密码</span></span><br><span class="line">    <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span><span class="string">&quot;tcp_and_udp&quot;</span><span class="punctuation">,</span>              <span class="comment">//模式</span></span><br><span class="line">    <span class="attr">&quot;fast_open&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span>                  <span class="comment">//是否打开fast_open,(fast_open可以减少多次tcp传输数据之前的握手次数。)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>3.创建service文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/shadowsocks-libev-server@.service</span><br><span class="line"></span><br><span class="line">[Unit]  </span><br><span class="line">Description=Shadowsocks-Libev Custom Client Service <span class="keyword">for</span> %I  </span><br><span class="line">Documentation=man:ss-local(1)  </span><br><span class="line">After=network.target  </span><br><span class="line">  </span><br><span class="line">[Service]  </span><br><span class="line">Type=simple  </span><br><span class="line">User=nobody</span><br><span class="line">Group=nogroup  </span><br><span class="line">LimitNOFILE=32768  </span><br><span class="line">ExecStart=/usr/bin/ss-server -c /etc/shadowsocks-libev/config.json  </span><br><span class="line"></span><br><span class="line">[Install]  </span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment">#重载systemd</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>4.启动shadowsocks服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start shdowsocks-libev-server@.service</span><br></pre></td></tr></table></figure><h4 id="1-2-shadowsocks客户端"><a href="#1-2-shadowsocks客户端" class="headerlink" title="1.2 shadowsocks客户端"></a>1.2 shadowsocks客户端</h4><p>1.安装shadowsocks服务文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取源码</span></span><br><span class="line">wget https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.3.5/shadowsocks-libev-3.3.5.tar.gz</span><br><span class="line"><span class="comment">#编译完得到ss-localr可执行文件</span></span><br></pre></td></tr></table></figure><p>2.创建配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shadowsocks-libev/config.json</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span>                <span class="comment">//ss-server的ip地址</span></span><br><span class="line">    <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span> <span class="number">8388</span><span class="punctuation">,</span>                   <span class="comment">//ss-server监听的端口</span></span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span>                    <span class="comment">//本地提供socks5代理的端口</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ExamplePassword&quot;</span><span class="punctuation">,</span>         <span class="comment">//服务端验证密码</span></span><br><span class="line">    <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span>                        <span class="comment">//超时时间</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chacha20-ietf-poly1305&quot;</span>     <span class="comment">//加密方法</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>3.创建service文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/lib/systemd/system/shadowsocks-libev-local@.service</span><br><span class="line"></span><br><span class="line">[Unit]  </span><br><span class="line">Description=Shadowsocks-Libev Custom Client Service <span class="keyword">for</span> %I  </span><br><span class="line">Documentation=man:ss-local(1)  </span><br><span class="line">After=network.target  </span><br><span class="line">  </span><br><span class="line">[Service]  </span><br><span class="line">Type=simple  </span><br><span class="line"><span class="comment"># CapabilityBoundingSet=CAP_NET_BIND_SERVICE  </span></span><br><span class="line">User=nobody  </span><br><span class="line">Group=nogroup  </span><br><span class="line">LimitNOFILE=32768  </span><br><span class="line">ExecStart=/usr/bin/ss-local -c /etc/shadowsocks-libev/config.json  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">[Install]  </span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>4.启动shadowsocks客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart shadowsocks-libev-local@.service</span><br></pre></td></tr></table></figure><h3 id="2-xray"><a href="#2-xray" class="headerlink" title="2.xray"></a>2.xray</h3><h4 id="2-1-xray服务端配置"><a href="#2-1-xray服务端配置" class="headerlink" title="2.1 xray服务端配置"></a>2.1 xray服务端配置</h4><p>1.获取Xray内核，这里直接从github下载二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/XTLS/Xray-core/releases/download/v1.7.5/Xray-linux-64.zip</span><br><span class="line"><span class="comment">#一键安装脚本</span></span><br><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/daveleung/hijkpw-scripts-mod/main/xray_mod1.sh)</span><br></pre></td></tr></table></figure><p>2.解压文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/xray</span><br><span class="line">sudo unzip Xray-linux-64.zip -d /usr/local/xray <span class="comment">#将v2ray压缩包指定解压到v2ray目录下</span></span><br></pre></td></tr></table></figure><p>解压完一会得到几个文件</p><ul><li>xray               xray的核心文件</li><li>geosite.dat   用于流量分流的域名规则</li><li>geoip.dat     用于流量分流的ip规则</li><li>readme.md  说明文档</li></ul><p>3.创建服务端配置文件<br>基于vless+kcp传输协议</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/xray</span><br><span class="line">sudo vim /etc/xray/config.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/xray/access.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/xray/error.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;info&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vless&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;clients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;63a1897b-895d-4307-ae9f-558cf04d4138&quot;</span> <span class="comment">//表示符用于客户端验证</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;decryption&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fallbacks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="number">80</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tlsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;certificates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;certificateFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/local/xray/cert/ssl.crt&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;keyFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/local/xray/cert/ssl.key&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tcpSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;httpSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;kcpSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;mtu&quot;</span><span class="punctuation">:</span> <span class="number">1350</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tti&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;uplinkCapacity&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;downlinkCapacity&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;congestion&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;readBufferSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;writeBufferSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;header&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wechat-video&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;seed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9yPvIsO0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;quicSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v.tbctl.cn&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blackhole&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;block&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;0.0.0.0/8&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;10.0.0.0/8&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;100.64.0.0/10&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;169.254.0.0/16&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;172.16.0.0/12&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;192.0.0.0/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;192.0.2.0/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;192.168.0.0/16&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;198.18.0.0/15&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;198.51.100.0/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;203.0.113.0/24&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;::1/128&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;fc00::/7&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;fe80::/10&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;block&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>4.创建service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/lib/systemd/system/xray.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Xray Service</span><br><span class="line">Documentation=https://github.com/xtls</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">NoNewPrivileges=<span class="literal">true</span></span><br><span class="line">ExecStart=/usr/local/xray/xray run -config /etc/xray/config.json</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#重载文件</span></span><br><span class="line">systemd daemon-reload</span><br></pre></td></tr></table></figure><p>4.启动xray服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start xray.service</span><br></pre></td></tr></table></figure><h4 id="2-2-xray客户端"><a href="#2-2-xray客户端" class="headerlink" title="2.2 xray客户端"></a>2.2 xray客户端</h4><h6 id="1-获取Xray内核"><a href="#1-获取Xray内核" class="headerlink" title="1.获取Xray内核"></a>1.获取Xray内核</h6><p>这里直接从github下载二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/XTLS/Xray-core/releases/download/v1.7.5/Xray-linux-64.zip</span><br></pre></td></tr></table></figure><h6 id="2-解压文件"><a href="#2-解压文件" class="headerlink" title="2.解压文件"></a>2.解压文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/xray</span><br><span class="line">sudo unzip Xray-linux-64.zip -d /usr/local/xray <span class="comment">#将v2ray压缩包指定解压到v2ray目录下</span></span><br></pre></td></tr></table></figure><h6 id="3-配置客户端配置文件"><a href="#3-配置客户端配置文件" class="headerlink" title="3.配置客户端配置文件"></a>3.配置客户端配置文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etx/xray/config.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//日志</span></span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warning&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/xray/error.log&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/log/xray/access.log&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all-in&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">12345</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dokodemo-door&quot;</span><span class="punctuation">,</span> <span class="comment">//用于透明代理，这里默认监听到0.0.0.0，不能监听到127.0.0.1，如果监听到127.0.0.1会导致透明代理失败，对于端口对外暴漏的问题可以通过设置防火墙规则来实现</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tcp,udp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;followRedirect&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sniffing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;destOverride&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;http&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;sockopt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tproxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tproxy&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span> <span class="comment">//如果需要socks代理可以设置这一段，注意，socks代理端口不能对外暴露，尤其是在云服务器上，</span></span><br><span class="line">      <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">1080</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span> <span class="comment">//这里一定要监听到本地</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sniffing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;destOverride&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;tls&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;routeOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;auth&quot;</span><span class="punctuation">:</span> <span class="string">&quot;noauth&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;udp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;allowTransparent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;direct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;domainStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UseIPv4&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;sockopt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;mark&quot;</span><span class="punctuation">:</span> <span class="number">2</span> <span class="comment">//用于tproxy对流量进行分类，防止流量回环，这个值要和后面的iptables的配置值对应。</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vless&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vnext&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v.tbctl.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">443</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;63a1897b-895d-4307-ae9f-558cf111111&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;alterId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;t@t.tt&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;encryption&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;flow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tlsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;allowInsecure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;show&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;kcpSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;mtu&quot;</span><span class="punctuation">:</span> <span class="number">1350</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tti&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;uplinkCapacity&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;downlinkCapacity&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;congestion&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;readBufferSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;writeBufferSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;header&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wechat-video&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;seed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9yPvIsO0&quot;</span> <span class="comment">//kcp seed</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;mux&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;concurrency&quot;</span><span class="punctuation">:</span> <span class="number">-1</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//dns服务器</span></span><br><span class="line">    <span class="attr">&quot;hosts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;dns.google&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.8.8.8&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https+local://dns.alidns.com/dns-query&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;domains&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;domain:geosite:cn&quot;</span><span class="punctuation">,</span><span class="string">&quot;bing.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;expectIPs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;geoip:cn&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;skipFallback&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https+local://doh.pub/dns-query&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;domains&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;domain:geosite:cn&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;expectIPs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;geoip:cn&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;skipFallback&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;https://1.1.1.1/dns-query&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;https://1.0.0.1/dns-query&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;https://dns.google/dns-query&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IPIfNonMatch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;all-in&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">53</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dns-out&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;8.8.8.8&quot;</span><span class="punctuation">,</span> <span class="string">&quot;1.1.1.1&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;geosite:category-ads-all&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;block&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;geosite:geolocation-!cn&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;proxy&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="4-启动客户端"><a href="#4-启动客户端" class="headerlink" title="4.启动客户端"></a>4.启动客户端</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start xray.service</span><br></pre></td></tr></table></figure><h5 id="5-配置透明代理（可选）"><a href="#5-配置透明代理（可选）" class="headerlink" title="*5.配置透明代理（可选）"></a>*5.配置透明代理（可选）</h5><h6 id="5-1-配置路由转发"><a href="#5-1-配置路由转发" class="headerlink" title="5.1 配置路由转发"></a>5.1 配置路由转发</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><h6 id="5-2-配置流量重定向-使用iptables"><a href="#5-2-配置流量重定向-使用iptables" class="headerlink" title="5.2 配置流量重定向(使用iptables)"></a>5.2 配置流量重定向(使用iptables)</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">iptables -t mangle -N XRAY</span><br><span class="line"><span class="comment">#法网内网服务器的数据包不转发</span></span><br><span class="line">iptables -t mangle -A XRAY -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 100.64.0.0/10 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 192.0.0.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 240.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 255.255.255.255/32 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 192.168.0.0/16 -p tcp ! --dport 53 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN</span><br><span class="line"><span class="comment">#ssh数据包不转发，不配置会导致ssh连接不上</span></span><br><span class="line">iptables -t mangle -A XRAY -p tcp --dport 22 -j RETURN</span><br><span class="line"><span class="comment">#ocserv数据包不转发</span></span><br><span class="line">iptables -t mangle -A XRAY -p tcp --dport 8443 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY -p udp --dport 8443 -j RETURN</span><br><span class="line"><span class="comment">#数据包转发到本地12345端口</span></span><br><span class="line">iptables -t mangle -A XRAY -p tcp -j TPROXY --on-port 12345 --tproxy-mark 1</span><br><span class="line">iptables -t mangle -A XRAY -p udp -j TPROXY --on-port 12345 --tproxy-mark 1</span><br><span class="line"><span class="comment">#将所有的即将路由的流量重定向到XRAY链（实现局域网其他设备透明代理)</span></span><br><span class="line">iptables -t mangle -A PREROUTING -j XRAY</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建XRAY_SELF链</span></span><br><span class="line">iptables -t mangle -N XRAY_SELF</span><br><span class="line"></span><br><span class="line"><span class="comment">#内网ip段直连</span></span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 100.64.0.0/10 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 192.0.0.0/24 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 240.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 255.255.255.255/32 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 192.168.0.0/16 -p tcp ! --dport 53 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -p tcp --sport 22 -j RETURN</span><br><span class="line"><span class="comment">#这里之所以要跳过8443端口，是因为后面需要通过ocserv服务器中转，8443是这里配置的ocserv的监听端口</span></span><br><span class="line">iptables -t mangle -A XRAY_SELF -p tcp --sport 8443 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -p udp --sport 8443 -j RETURN</span><br><span class="line">iptables -t mangle -A XRAY_SELF -m mark --mark 2 -j RETURN</span><br><span class="line"><span class="comment">#tproxy有一个特性，所有经OUTPUT链打标签的流量将重新发送到PREROUTING链上重新路由，因此这里将标签打1，流量会重新到达PREROUTING链</span></span><br><span class="line">iptables -t mangle -A XRAY_SELF -p tcp -j MARK --set-mark 1</span><br><span class="line">iptables -t mangle -A XRAY_SELF -p udp -j MARK --set-mark 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#将本地OUTPUT链的流量重定向到XRAY_SELF链，实现本地主机透明代理</span></span><br><span class="line">iptables -t mangle -A OUTPUT -j XRAY_SELF</span><br><span class="line"><span class="comment">#添加策略路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#防止端口暴露，阻止外部连接代理端口(尤其实在云服务器上，如果暴露端口，很可能会被云服务器厂商警告)</span></span><br><span class="line">iptables -t filter -A INPUT -p tcp --dport 12345 ! -i lo -j DROP</span><br><span class="line">iptables -t filter -A INPUT -p udp --dport 12345 ! -i lo -j DROP</span><br><span class="line"><span class="comment">#防ping</span></span><br><span class="line">iptables -t filter -A INPUT -p icmp --icmp-type echo-request -j DROP</span><br><span class="line">iptables -t filter -A INPUT -p icmp --icmp-type echo-reponse -j DROP</span><br></pre></td></tr></table></figure><h6 id="5-3-配置路由策略"><a href="#5-3-配置路由策略" class="headerlink" title="5.3 配置路由策略"></a>5.3 配置路由策略</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ip route add <span class="built_in">local</span> default dev lo table 100 <span class="comment"># 添加路由表 100（匹配到这个规则的数据包都被视为lo网卡发出的</span></span><br><span class="line">sudo ip rule add fwmark 1 table 100 <span class="comment"># 为路由表 100 设定规则</span></span><br></pre></td></tr></table></figure><h6 id="5-4-设置开机自启动-可选"><a href="#5-4-设置开机自启动-可选" class="headerlink" title="*5.4 设置开机自启动(可选)"></a>*5.4 设置开机自启动(可选)</h6><p>保存iptables规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">&quot;iptables-save &gt; /etc/iptabels/iptables.rules&quot;</span></span><br></pre></td></tr></table></figure><p>创建service文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/lib/system/system/iptables.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=IPv4 Packet Filtering Framework</span><br><span class="line">Before=network-pre.target</span><br><span class="line">Wants=network-pre.target</span><br><span class="line">After=network.target xray.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">Type=simple</span><br><span class="line">ExecStartPre=/bin/bash -c &quot;sudo ip route add local default dev lo table 100; sudo ip rule add fwmark 1 table 100&quot;</span><br><span class="line">ExecStart=/usr/sbin/iptables-restore  /etc/iptables/iptables.rules</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置xray开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> xray</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置iptables开机自动重载规则</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> iptables</span><br></pre></td></tr></table></figure><h5 id="6-通过ocserv服务器进行中转（可选）"><a href="#6-通过ocserv服务器进行中转（可选）" class="headerlink" title="*6.通过ocserv服务器进行中转（可选）"></a>*6.通过ocserv服务器进行中转（可选）</h5><p>为了使用更加的方便，可以将xray客户端搭建在云服务器上，然后再云服务器上搭建ocserv服务端，通过配置路由规则，将ocserv客户端的流量通过ocserv服务器用xray进行转发，实现科学上网</p><p>整个技术架构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram  </span><br><span class="line">OcservClient-&gt;&gt;OcservServer:Crypto(DTLS)</span><br><span class="line">OcservServer-&gt;&gt;XrayClient:Origin</span><br><span class="line">XrayClient-&gt;&gt;XrayServer:Crypto(VLESS+kcp+tls)</span><br><span class="line">XrayServer-&gt;&gt;RealServer:Origin</span><br></pre></td></tr></table></figure><p>实现通过ocserv进行中转的前提是服务器已经配置好透明代理，只要配置好透明代理，服务器上所有的流量都会走xray进行路由匹配，如果检测到需要路由的流量，xray会对流量进行自动代理。因此要实现通过ocserv对流量进行中转只需要将服务器的ocserv配置好即可，并且将ocserv和客户端通信的流量从xray过滤即可，防止ocserv直连客户端的流量同样走代理</p><h3 id="6-常用的客户端软件配置-基于windows"><a href="#6-常用的客户端软件配置-基于windows" class="headerlink" title="6.常用的客户端软件配置(基于windows)"></a>6.常用的客户端软件配置(基于windows)</h3><h4 id="6-1-基于Windows"><a href="#6-1-基于Windows" class="headerlink" title="6.1 基于Windows"></a>6.1 基于Windows</h4><h5 id="6-1-1-ClashForWindows"><a href="#6-1-1-ClashForWindows" class="headerlink" title="6.1.1.ClashForWindows"></a>6.1.1.ClashForWindows</h5><p>Clash for Windows是代理工具Clash在Windows系统的唯一图形客户端，同时还支持Windows、Linux、macOS三大系统，功能强大且支持多种代理协议，如Shadowsocks(SS)、ShadowsocksR(SSR)、Socks、Snell、V2Ray、Trojan等代理协议。以下是配置步骤</p><p>1.获取ClashForWindows<br><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.20.11/Clash.for.Windows.Setup.0.20.11.exe">下载windows下clash客户端💻</a><br>2.点解clash主界面的profile选项<br><img src="/images/clash1.png" alt="点解profile"><br>3.输入订阅链接(由购买的机场提供)后并点击下载<br><img src="/images/clash2.png" alt="输入订阅链接"><br>4.点击下载好的配置文件<br><img src="/images/clash3.png" alt="点击下载好的配置文件"><br>5.返回节点列表，进行刷新，选择合适的可用的节点<br><img src="/images/clash4.png" alt="选择合适的节点"></p><h5 id="6-1-2-V2rayN"><a href="#6-1-2-V2rayN" class="headerlink" title="6.1.2.V2rayN"></a>6.1.2.V2rayN</h5><p>v2rayN是Windows系统下的代理软件客户端，功能强大且支持多种代理协议，如VMess、VLESS、Trojan、Socks、Shadowsocks等代理协议<br>1.获取V2rayN文件<br><a href="https://github.com/2dust/v2rayN/releases/download/6.21/v2rayN-With-Core.zip">下载V2rayN</a></p><p>2.解压并启动V2rayN<br><img src="/images/v2rayn1.png" alt="解压">3.添加订阅连接<br><img src="/images/v2rayn2.png" alt="添加订阅链接"><br>4.返回节点列表，选择节点<br><img src="/images/v2rayn3.png" alt="选择节点"></p><h4 id="6-2-基于Linux"><a href="#6-2-基于Linux" class="headerlink" title="6.2.基于Linux"></a>6.2.基于Linux</h4><h5 id="6-2-1-Clash"><a href="#6-2-1-Clash" class="headerlink" title="6.2.1 Clash"></a>6.2.1 Clash</h5><p>1.获取Linux平台下clash可执行文件<br><a href="https://github.com/Dreamacro/clash/releases/download/v1.12.0/clash-linux-amd64-v1.12.0.gz">下载Linux下clash客户端💻</a><br>2.解压配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压</span></span><br><span class="line">gunzip clash-linux-amd64-v1.12.0.gz</span><br><span class="line"><span class="comment">#重命名并附加可执行权限</span></span><br><span class="line"><span class="built_in">mv</span> clash-linux-amd64-v1.12.0 clash &amp;&amp; <span class="built_in">chmod</span> +x clash &amp;&amp; <span class="built_in">mv</span> clash /usr/local/bin/clash</span><br><span class="line"><span class="comment">#创建clash配置文件目录</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /usr/local/etc/clash</span><br></pre></td></tr></table></figure><p>3.获取配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /usr/local/etc/clash/config.yaml <span class="variable">$URL</span> <span class="comment">#URL由机场进行提供</span></span><br></pre></td></tr></table></figure><p>4.第一次启动clash(去下载geoip库)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clash -d /usr/local/etc/clash</span><br></pre></td></tr></table></figure><p>5.使用systemd管理clash启动与停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/clash.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=A rule based proxy <span class="keyword">in</span> Go <span class="keyword">for</span> %i.</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=%i</span><br><span class="line">Restart=on-abort</span><br><span class="line">ExecStart=/usr/local/bin/clash -d /usr/local/etc/clash <span class="comment">#根据实际clash可执行文件和clash配置文件所在的位置自行修改</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>6.启动clash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start clash.service</span><br></pre></td></tr></table></figure><p>7.*配置透明代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -N CLASH_TCP_RULE</span><br><span class="line"><span class="comment">#创建新的规则链</span></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -j CLASH_TCP_RULE</span><br><span class="line">iptables -t nat -A CLASH_TCP_RULE -p tcp -d 192.168.0.0/16 -j RETURN</span><br><span class="line"><span class="comment">#不对局域网地址进行转发</span></span><br><span class="line">iptables -t nat -A CLASH_TCP_RULE -p tcp -j REDIRECT --to-ports 1082(此为clash配置的透明代理端口)</span><br></pre></td></tr></table></figure><h3 id="7-如何借助局域网已经科学上网设备设备实现科学上网"><a href="#7-如何借助局域网已经科学上网设备设备实现科学上网" class="headerlink" title="7.如何借助局域网已经科学上网设备设备实现科学上网?"></a>7.如何借助局域网已经科学上网设备设备实现科学上网?</h3><h4 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1.代理模式"></a>1.代理模式</h4><p>此次实例仍然基于clash进行演示。<br>对于不便于装上科学上网的客户端的设备可以使用局域网已经实现科学上网的设备实现科学上网,基本原理如下<br><img src="/images/clashallowlan.png" alt="大体流程"><br>配置流程</p><h6 id="1-开启clash的局域网访问"><a href="#1-开启clash的局域网访问" class="headerlink" title="1.开启clash的局域网访问"></a>1.开启clash的局域网访问</h6><p><img src="/images/clash5.png" alt="提前准备"></p><h6 id="2-获取主机的ip和端口"><a href="#2-获取主机的ip和端口" class="headerlink" title="2.获取主机的ip和端口"></a>2.获取主机的ip和端口</h6><p>1.获取ip<br>对于windows系统，Win+R键,输入cmd,输入ipconfig<br><img src="/images/cmd.png" alt="win+r"></p><p><img src="/images/ip.png" alt="获取ip"><br>由于我这里连接的是网线,因此有效的ip应该是以太网，如果你使用的是wifi连接,则关注wlan连接的ip信息。</p><h6 id="3-手机上配置相关代理"><a href="#3-手机上配置相关代理" class="headerlink" title="3.手机上配置相关代理"></a>3.手机上配置相关代理</h6><p><img src="/images/proxy1.png" alt="点击代理"><br><img src="/images/proxy2.png" alt="点击手动"><br><img src="/images/proxy3.png" alt="输入主机名和端口"></p><p>主机名为之前查看的ip地址，端口号为clash主界面配置的端口号<br><strong>注意事项</strong><br>配置完成即可实现科学上网，如果不行，请检查电脑端clash是否科学上网正常。</p><h4 id="2-网关模式"><a href="#2-网关模式" class="headerlink" title="2.网关模式"></a>2.网关模式</h4><p>网关模式即透明代理模式，需要配置好科学上网的设备上配置好路由转发和透明代理，其他的设备只需要将网关修改为目标主机的ip地址，即可实现科学上网</p><p>对于节点机场购买可以参考<a href="https://www.duyaoss.com/">毒药官网</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;科学上网技术原理及配置教程&quot;&gt;&lt;a href=&quot;#科学上网技术原理及配置教程&quot; class=&quot;headerlink&quot; title=&quot;科学上网技术原理及配置教程&quot;&gt;&lt;/a&gt;科学上网技术原理及配置教程&lt;/h1&gt;&lt;h2 id=&quot;1-什么是科学上网&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="软件配置" scheme="https://bugprogram-git.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="科学上网" scheme="https://bugprogram-git.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
</feed>
